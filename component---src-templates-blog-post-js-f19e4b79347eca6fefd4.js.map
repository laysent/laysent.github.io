{"version":3,"sources":["webpack:///./src/components/katex.js","webpack:///./src/templates/blog-post.js"],"names":["Katex","componentDidMount","document","body","querySelector","render","React","Component","BlogPostTemplate","post","this","props","data","markdownRemark","blogTitle","site","siteMetadata","pageContext","previous","next","frontmatter","date","modified","title","description","hasBeenModified","location","to","itemScope","itemType","itemProp","style","scale","display","marginBottom","rhythm","marginTop","dateTime","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","pageQuery"],"mappings":"+GAEMA,E,wLACJC,kBAAA,WAOMC,SAASC,KAAKC,cAAc,WAC9B,sC,EAGJC,OAAA,WACE,OAAO,M,UAbSC,EAAMC,WAiBXP,O,kMCXTQ,E,gLACJH,OAAA,WACE,IAAMI,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKG,KAAKC,aAAaF,UAF7C,EAGoBJ,KAAKC,MAAMM,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KAHX,EAIwCV,EAAKW,YAA5CC,EAJD,EAICA,KAAMC,EAJP,EAIOA,SAAUC,EAJjB,EAIiBA,MAAOC,EAJxB,EAIwBA,YAEzBC,EAAkBH,GAAaA,IAAaD,EAClD,OACE,kBAAC,IAAD,CAAQK,SAAUhB,KAAKC,MAAMe,SAAUH,MAAOT,EAAWa,GAAG,UAC1D,kBAAC,IAAD,CAAKJ,MAAOA,EAAOC,YAAaA,EAAaE,SAAUhB,KAAKC,MAAMe,WAClE,kBAAC,IAAD,MACA,6BAASE,WAAS,EAACC,SAAS,iCAC1B,gCACE,wBAAIC,SAAS,YAAYP,GACzB,uBACEQ,MAAK,iBACAC,aAAM,IADN,CAEHC,QAAQ,QACRC,aAAcC,YAAO,GACrBC,UAAWD,aAAQ,MAGrB,0BAAML,SAAS,gBAAgBO,SAAUhB,GAAOA,GAC/CI,GACC,+CAAoB,0BAAMK,SAAS,eAAeO,SAAUf,GAAWA,GAAvE,KAEF,0BAAMM,WAAS,EAACC,SAAS,2BAA2BC,SAAS,UAA7D,SAA4E,0BAAMA,SAAS,QAAf,cAGhF,yBAAKQ,wBAAyB,CAAEC,OAAQ9B,EAAK+B,MAAQV,SAAS,gBAC9D,wBACEC,MAAO,CACLG,aAAcC,YAAO,MAGzB,gCACE,kBAAC,IAAD,QAGJ,wBACEJ,MAAO,CACLG,aAAcC,YAAO,MAIzB,6BACE,wBACEJ,MAAO,CACLE,QAAQ,OACRQ,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG1B,GACC,kBAAC,OAAD,CAAMS,GAAE,YAAcT,EAAS2B,OAAOC,KAAQC,IAAI,QAAlD,KACK7B,EAASE,YAAYG,QAI9B,4BACGJ,GACC,kBAAC,OAAD,CAAMQ,GAAE,YAAcR,EAAK0B,OAAOC,KAAQC,IAAI,QAC3C5B,EAAKC,YAAYG,MADpB,W,GAjEejB,IAAMC,WA6EtBC,YAER,IAAMwC,EAAS","file":"component---src-templates-blog-post-js-f19e4b79347eca6fefd4.js","sourcesContent":["import React from 'react'\n\nclass Katex extends React.Component {\n  componentDidMount() {\n    /**\n     * Dynamically add KaTeX style support, only when KaTeX is detected.\n     * This will save a lot of space for compiled HTML pages,\n     * as most of the posts does not have math equations.\n     * Thus, no need to pre-compile KaTeX css into HTML <head>.\n     */\n    if (document.body.querySelector('.katex')) {\n      import('katex/dist/katex.min.css'/* webpackChunkName: \"katex\" */);\n    }\n  }\n  render() {\n    return null;\n  }\n}\n\nexport default Katex;\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport License from '../components/license';\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport Katex from '../components/katex'\nimport { rhythm, scale } from '../utils/typography'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const blogTitle = this.props.data.site.siteMetadata.blogTitle\n    const { previous, next } = this.props.pageContext\n    const { date, modified, title, description } = post.frontmatter;\n\n    const hasBeenModified = modified && (modified !== date);\n    return (\n      <Layout location={this.props.location} title={blogTitle} to=\"/blog/\">\n        <SEO title={title} description={description} location={this.props.location} />\n        <Katex />\n        <article itemScope itemType=\"http://schema.org/BlogPosting\">\n          <header>\n            <h1 itemProp=\"headline\">{title}</h1>\n            <p\n              style={{\n                ...scale(-1 / 5),\n                display: `block`,\n                marginBottom: rhythm(1),\n                marginTop: rhythm(-1),\n              }}\n            >\n              <time itemProp=\"datePublished\" dateTime={date}>{date}</time>\n              {hasBeenModified && (\n                <span> • (modified: <time itemProp=\"dateModified\" dateTime={modified}>{modified}</time>)</span>\n              )}\n              <span itemScope itemType=\"http://schema.org/Person\" itemProp=\"author\"> • by <span itemProp=\"name\">LaySent</span></span>\n            </p>\n          </header>\n          <div dangerouslySetInnerHTML={{ __html: post.html }} itemProp=\"articleBody\" />\n          <hr\n            style={{\n              marginBottom: rhythm(1),\n            }}\n          />\n          <footer>\n            <License />\n          </footer>\n        </article>\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n\n        <nav>\n          <ul\n            style={{\n              display: `flex`,\n              flexWrap: `wrap`,\n              justifyContent: `space-between`,\n              listStyle: `none`,\n              padding: 0,\n            }}\n          >\n            <li>\n              {previous && (\n                <Link to={`blog/post${previous.fields.slug}`} rel=\"prev\">\n                  ← {previous.frontmatter.title}\n                </Link>\n              )}\n            </li>\n            <li>\n              {next && (\n                <Link to={`blog/post${next.fields.slug}`} rel=\"next\">\n                  {next.frontmatter.title} →\n                </Link>\n              )}\n            </li>\n          </ul>\n        </nav>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        blogTitle\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        modified(formatString: \"YYYY-MM-DD\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}