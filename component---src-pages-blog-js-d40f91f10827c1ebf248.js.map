{"version":3,"sources":["webpack:///./src/components/posts.js","webpack:///./src/pages/blog.js"],"names":["urlTransform","text","trim","replace","toLowerCase","Posts","render","this","props","data","title","subtitle","isRoot","site","siteMetadata","blogTitle","siteTitle","posts","allMarkdownRemark","edges","location","to","keywords","map","node","frontmatter","fields","slug","date","hasTags","tags","length","hasCategory","category","key","style","marginBottom","rhythm","boxShadow","dateTime","lang","timeToRead","split","tag","i","Fragment","color","dangerouslySetInnerHTML","__html","description","React","Component","BlogIndex","pageQuery"],"mappings":"2MAOA,SAASA,EAAaC,GACpB,OAAOA,EAAKC,OAAOC,QAAQ,KAAM,KAAKA,QAAQ,MAAO,IAAIC,c,IAuE5CC,E,gLAnEbC,OAAA,WAAU,IAAD,EACmCC,KAAKC,MAAvCC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,SAAUC,EADxB,EACwBA,OADxB,EAEiCL,KAAKC,MAAMC,KAAKI,KAAKC,aAArDC,EAFD,EAECA,UAAkBC,EAFnB,EAEYN,MACbO,EAAQR,EAAKS,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CACEC,SAAUb,KAAKC,MAAMY,SACrBV,MAAOE,EAASI,EAAYD,EAC5BH,OAAQA,EACRD,SAAUA,EACVU,GAAIT,EAAS,IAAM,UAEnB,kBAAC,IAAD,CACEF,MAAOA,EACPY,SAAU,CAAC,aAAc,MAAO,OAAQ,WACxCF,SAAUb,KAAKC,MAAMY,WAEtBH,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KAC9CC,EAAOJ,EAAKC,YAAYG,KACxBC,EAAUL,EAAKC,YAAYK,MAAQN,EAAKC,YAAYK,KAAKC,OAAS,EAClEC,IAAgBR,EAAKC,YAAYQ,SAEvC,OACE,6BAASC,IAAKV,EAAKE,OAAOC,MACxB,wBACEQ,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWjB,GAAE,YAAcG,EAAKE,OAAOC,MAC7DjB,IAGL,+BAAO,0BAAM6B,SAAUX,GAAOA,IAC9B,2BAAOY,KAAK,MAAZ,MAAqBhB,EAAKiB,WAA1B,eACCT,GACC,qCAEE,kBAAC,OAAD,CAAMG,MAAO,CAAEG,UAAU,QAAWjB,GAAE,kBAAoBrB,EAAawB,EAAKC,YAAYQ,UAAlD,KACnCT,EAAKC,YAAYQ,WAIvBJ,GACC,qCAECL,EAAKC,YAAYK,KAAKY,MAAM,KAAKnB,KAAI,SAACoB,EAAKC,EAAGd,GAAT,OACpC,kBAAC,IAAMe,SAAP,CAAgBX,IAAKS,GACnB,kBAAC,OAAD,CAAMR,MAAO,CAAEG,UAAU,OAASQ,MAAO,WAAazB,GAAE,aAAerB,EAAa2C,GAA5B,KAAxD,IACIA,EAAIzC,QAEP0C,IAAMd,EAAKC,OAAS,GAApB,WAKP,uBAAGgB,wBAAyB,CAAEC,OAAQxB,EAAKC,YAAYwB,qB,GA3DjDC,IAAMC,W,8CCNpBC,E,gLACJ9C,OAAA,WACE,OACE,kBAAC,EAAD,iBACMC,KAAKC,MADX,CAEEE,MAAM,YACNE,QAAM,M,GANUsC,IAAMC,WAcjBE,GAFED,YAEO","file":"component---src-pages-blog-js-d40f91f10827c1ebf248.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from './layout'\nimport SEO from './seo'\nimport { rhythm } from '../utils/typography'\n\nfunction urlTransform(text) {\n  return text.trim().replace(/ /g, '-').replace(/\\./g, '').toLowerCase();\n}\n\nclass Posts extends React.Component {\n  render() {\n    const { data, title, subtitle, isRoot } = this.props\n    const { blogTitle, title: siteTitle } = this.props.data.site.siteMetadata\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout\n        location={this.props.location}\n        title={isRoot ? siteTitle : blogTitle}\n        isRoot={isRoot}\n        subtitle={subtitle}\n        to={isRoot ? '/' : '/blog/'}\n      >\n        <SEO\n          title={title}\n          keywords={['JavaScript', 'Web', 'Blog', 'LaySent']}\n          location={this.props.location}\n        />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          const date = node.frontmatter.date;\n          const hasTags = node.frontmatter.tags && node.frontmatter.tags.length > 0;\n          const hasCategory = !!node.frontmatter.category;\n\n          return (\n            <article key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={`blog/post${node.fields.slug}`}>\n                  {title}\n                </Link>\n              </h3>\n              <small><time dateTime={date}>{date}</time></small>\n              <small lang=\"en\"> • {node.timeToRead}min to read</small>\n              {hasCategory && (\n                <small>\n                  {` • `}\n                  <Link style={{ boxShadow: `none` }} to={`/blog/category/${urlTransform(node.frontmatter.category)}/`}>\n                    {node.frontmatter.category}\n                  </Link>\n                </small>\n              )}\n              {hasTags && (\n                <small>\n                {` • `}\n                {node.frontmatter.tags.split(',').map((tag, i, tags) => (\n                  <React.Fragment key={tag}>\n                    <Link style={{ boxShadow: `none`, color: '#ffb600' }} to={`/blog/tag/${urlTransform(tag)}/`}>\n                      #{tag.trim()}\n                    </Link>\n                    {i !== tags.length - 1 && ` / `}\n                  </React.Fragment>\n                ))}\n                </small>\n              )}\n              <p dangerouslySetInnerHTML={{ __html: node.frontmatter.description }} />\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default Posts\n","import React from 'react'\nimport { graphql } from 'gatsby'\n\nimport Posts from '../components/posts';\n\nclass BlogIndex extends React.Component {\n  render() {\n    return (\n      <Posts\n        {...this.props}\n        title=\"All posts\"\n        isRoot\n      />\n    );\n  }\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { fields: { type: { ne: \"til\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n            tags\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}