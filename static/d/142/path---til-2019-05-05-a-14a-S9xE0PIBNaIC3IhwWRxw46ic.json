{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"0890d56d-67dc-5bef-bceb-d325488f640d","html":"<p><code class=\"language-text\">style</code> 本身是一个标准的 HTML 标签，在里面写的 CSS 样式，会被应用到页面上。同时，作为一个 HTML 标签，<code class=\"language-text\">style</code> 本身也可以被赋予一定的展示样式。加上 <code class=\"language-text\">contenteditable</code> 的属性，就会得到一个可编写的 <code class=\"language-text\">style</code> 标签。通过直接编写其中的 CSS 样式，页面会自动更新，展示应用样式后的效果。</p>\n<style>\n\n.editable-style-container {\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  background-color: #e65525;\n  box-shadow: 0 0 0 3px #e78267;\n}\n.editable-style-container style.editable-style {\n  display: none;\n}\n.editable-style-container:hover {\n  border: 1px solid #ccc;\n  background-color: #fff;\n  border-radius: 5px;\n  height: auto;\n  width: 100%;\n}\n.editable-style-container:hover style.editable-style {\n  display: block;\n  min-height: 5rem;\n  max-height: 10rem;\n  overflow: auto;\n}\n</style>\n<p></p>\n  <div class=\"editable-style-container\">\n    <style contenteditable class=\"editable-style\">\n    </style>\n  </div>\n<p></p>\n<p>上面展示的这个圆点，鼠标悬停之后，就会显示一个可输入的框。在里面输入一些 CSS 可以看到对页面元素的修改。比如，可以试试输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article small</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #007acc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-05-05","title":"contenteditable style","category":"JavaScript"}}},{"node":{"id":"5bd484fa-33b3-5f27-8937-98c787d17543","html":"<p>传统的 CSS filter，可以对当前的元素应用指定的滤镜。以模糊（blur）滤镜为例，常常会被拿来实现毛玻璃的效果。然而，因为滤镜只能应用于元素自身，所以毛玻璃的效果也是局限性很大的。一个常见的做法是，背景图片在当前元素中用 background-image 的方式再赋值一次，然后通过定位对齐，再加上 blur 的效果。这样看上去，中间一块的图片就好像有了模糊的效果。</p>\n<p>一个例子：</p>\n<style>\n.container {\n  width: 620px;\n  height: 414px;\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  position: relative;\n  margin: 0 auto;\n}\n.filter {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 310px;\n  height: 207px;\n}\n@supports (-webkit-backdrop-filter: blur(10px)) or (-webkit-backdrop-filter: sepia() hue-rotate(120deg)) {\n  span.not-supported {\n    display: none;\n  }\n}\n</style>\n<p>\n  <div class=\"filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.filter-container .filter {\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  background-position: -155px -103.5px;\n  filter: sepia() hue-rotate(120deg);\n}\n.filter-container .filter:hover {\n  filter: blur(10px);\n}\n</style>\n<p>HTML 结构是：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS 是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 620px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%, -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 310px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 207px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -155px -103.5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，显然这样的局限性是很大的。css backdrop filter 就是为了打破这种局限性。有了 css backdrop filter，当前元素的滤镜会加到当前元素下面的所有元素上，而不仅仅是自身的元素。</p>\n<p>上面例子的改写<span class=\"not-supported\">（注意：当前浏览器不支持 backdrop-filter 功能）</span>：</p>\n<p>\n  <div class=\"backdrop-filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.backdrop-filter-container .filter {\n  -webkit-backdrop-filter: sepia() hue-rotate(120deg);\n}\n.backdrop-filter-container .filter:hover {\n  -webkit-backdrop-filter: blur(10px);\n}\n</style>\n<p>HTML 保持不变，CSS 改动为：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，需要加 filter 的部分，没有做额外特殊的处理（比如背景图片的配适），就可以直接使用。简洁明了。</p>\n<p>另外，鼠标悬停之后可以看到模糊效果的展示。使用 filter 和使用 backdrop-filter 的展示效果也是略有不同的。主要是，用 filter 这种方案，背后还是有图片的，所以当前景图片模糊之后，边缘部分，后面背景的图片会显示出来，效果有折扣。（如果需要处理，简单的做法是，加大 blur 元素的宽高，然后用 <code class=\"language-text\">overflow:hidden</code> 把整体显示出来的大小限定回原来需要的大小，这样边缘部分相当于被裁剪了）</p>\n<p>当然，css backdrop filter 目前的支持还非常有限。除了 Safari 和 Edge，基本没有浏览器支持。具体可以看 <a href=\"https://caniuse.com/#feat=css-backdrop-filter\">Caniuse</a>。</p>\n<p>在 Electron 中，可以通过下面的方法让打开 backdrop-filter 的支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webPreferences<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    enableBlinkFeatures<span class=\"token punctuation\">:</span> <span class=\"token string\">'CSSBackdropFilter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chrome 对 backdrop filter 的支持进展可以看这个 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=520585\">Issue</a></p>","frontmatter":{"date":"2019-05-04","title":"css backdrop filter","category":"CSS"}}},{"node":{"id":"a00692f1-010c-5b22-8079-378695212e48","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', value: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>","frontmatter":{"date":"2019-05-04","title":"Promise.allSetttled","category":"JavaScript"}}},{"node":{"id":"9ebfbed8-1960-5592-afaa-4ad983213be5","html":"<p>如果拿到了一份带有 source map 的 JavaScript 代码，那么理论上就可以通过这份 source map 去尽可能的还原出原始的文件内容。</p>\n<p>首先，source map 本质上是一个 JSON 文件。在其中，<code class=\"language-text\">sourceContent</code> 数组就记录了所有源文件的纯文本内容，而这些文件的文件路径及文件名则存放在了 <code class=\"language-text\">sources</code> 数组中。两者相互对应，理论上来说参照这两者的数据，就可以将源文件还原到原始的目录下。</p>\n<p>然而，Webpack 的打包结果，文件的路径名称都带上了 <code class=\"language-text\">webpack:///</code> 的前缀。在实际处理的过程中，可以直接使用已有的库，比如 <a href=\"https://github.com/alexkuz/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个库因为已经比较老了，对 Webpack 3/4 等新版本的支持存在问题。在原库合并 PR 之前，可以先使用改进过的版本 <a href=\"https://github.com/laysent/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个修改过的版本，除了修复对新版 Webpack 编译结果的支持外，也加入了 glob 的支持，可以更方便的进行批量 source map 还原。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">restore-source-tree -o output_folder path/to/source-maps/*.map</code></pre></div>\n<p>最终生成的文件会存放在 output_folder 下。</p>","frontmatter":{"date":"2019-05-03","title":"restore source map","category":"JavaScript"}}},{"node":{"id":"dab8bde4-4838-5442-9404-2cd65df85c0b","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">https://mathiasbynens.be/notes/globalthis</a></p>","frontmatter":{"date":"2019-05-03","title":"polyfill of globalThis","category":"JavaScript"}}},{"node":{"id":"da7a5303-aa58-5ca2-83b5-f6be73c62cc6","html":"<p>React 的渲染过程中，使用了 VNode 来表示一个组件树。虽然最终 virtual DOM 会被翻译成真实的 DOM tree，但是在之前，选择了使用 VNode 而不是真实的 DOM，能想到的有几个原因：</p>\n<ol>\n<li>React 不仅仅只是为浏览器环境准备的，所以运行环境中并不一定存在真实的 DOM。virtual dom 只使用了 JavaScript 中的对象，这个在所有的 JavaScript 运行环境里都是支持且可以直接使用的。也正因为如此，React 和 ReactDOM 才是两个独立的库，DOM 相关的内容只存在于 ReactDOM 中。对于不使用 DOM 的 React 方案，在手机端有 React Native，在 Console 中有 ink。</li>\n<li>自定义组件没有办法直接用 DOM 的元素来表示。虽然最终，自定义组件肯定会表示成一颗 DOM 树，但是在渲染的过程中，shouldComponentUpdate 可能就会插手让渲染不必进行下去了。此时，只用中间的自定义组件，还没有运行到真实的 DOM 结构。此时，用 virtual dom 的抽象表示是更合适的。</li>\n<li>创建 VNode 的速度要显著的快于创建 DOM node 的速度。因为 VNode 最终不一定要转化为 DOM（比如最终发现不需要修改），如果直接生成 DOM node，可能反而浪费了。VNode 只是一个 object，创建的速度比 DOM 要快得多。</li>\n</ol>\n<p>当然，需要说明的是，VNode 只是创建的速度比 DOM 要快很多。但这不代表使用 virtual dom 的渲染方案本身比直接操纵 DOM 树来的快。事实上，如果能够根据业务需求去手动的操作每一个 DOM 的节点，达到的最终效果肯定要好于用 React 库实现的统一解决方案。</p>","frontmatter":{"date":"2019-05-03","title":"why virtual dom","category":"JavaScript"}}},{"node":{"id":"3f990a47-8a8b-53f9-a219-91181ad91d17","html":"<p>使用 <code class=\"language-text\">import</code> 函数引入的代码，在 Webpack 中会被编译到一个异步模块中。<code class=\"language-text\">import</code> 函数返回一个 Promise，会在异步模块\n加载完毕后 resolve。</p>\n<p>Webpack 允许在调用 <code class=\"language-text\">import</code> 的时候加入注释来对异步加载进行配置。最常见的是指定新文件的 chunk name：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackChunkName: \"name\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果在 Webpack 的配置中指定了输出的文件名格式，比如 <code class=\"language-text\">[name].js</code>，那么最终输出的结果的文件名就会是 <code class=\"language-text\">name.js</code>。</p>\n<p>当然，<code class=\"language-text\">import</code> 输入的参数字符串可以不是一个固定值。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这种情况下，Webpack 会尝试将 module-parent-path 下所有的文件都各自打包成一个异步模块。在这种情况下，显然 webpackChunkName 没法直接写死一个字符串了。Webpack 提供了 <code class=\"language-text\">index</code> 和 <code class=\"language-text\">request</code> 两个参数，可以用于动态生成的这些异步加载模块的命名。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">index</code> 表示当前引用的文件的序号，<code class=\"language-text\">request</code> 则表示当前引用的模块中动态的部分。举例俩说，上面这里如果 <code class=\"language-text\">moduleName</code> 是 <code class=\"language-text\">example</code>，且配置生成的文件名是 <code class=\"language-text\">[name].js</code>，那么最终这个模块的文件名就是 <code class=\"language-text\">name-0-example.js</code>。</p>\n<p>当然，一次性将 module-parent-path 下所有的文件都打包成独立的异步模块可能会太多了，Webpack 提供了一些裁剪的方案：</p>\n<ul>\n<li><code class=\"language-text\">webpackInclude</code>，允许配置一个正则表达式，匹配的部分才打包成异步模块，忽略其他的</li>\n<li><code class=\"language-text\">webpackExclude</code>，允许配置一个正则表达式，匹配的部分会被忽略，打包其他剩下的模块</li>\n<li><code class=\"language-text\">webpackMode</code>，默认的模式是 <code class=\"language-text\">lazy</code>，每一个文件都会打包成一个异步模块；<code class=\"language-text\">lazy-once</code> 则会要求 Webpack 将所有的文件打包到一个模块中；<code class=\"language-text\">eager</code> 会把模块打包到当前的 chunk 中，但是不执行，等到真正执行了 <code class=\"language-text\">import</code> 命令之后，才执行里面的代码（省去了网络请求），依然返回的是 promise；<code class=\"language-text\">weak</code> 不会产生网络请求，默认模块会由其他途径加载完成，如果其他途径没有事先加载过，那么此处调用就会造成 promise 的 reject。</li>\n</ul>\n<p>如果有多个配置，可以叠加写在一起。一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName\n  <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span>\n  <span class=\"token comment\">/* webpackInclude: /include\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackExclude: /exclude\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackMode: \"lazy\" */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了上述之外，Webpack 还支持一些模块加载相关的配置，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPrefetch: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 prefetch 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=prefetch /&gt;</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPreload: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 preload 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=preload /&gt;</code>。</p>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* webpackPreload: true */</span>\n  <span class=\"token comment\">/* webpackChunkName: \"name\" */</span>\n  <span class=\"token string\">'module-path-here'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到，这里配置注释写在前面还是写在后面都是不影响的。</p>\n<p><a href=\"https://wanago.io/2018/08/20/webpack-4-course-part-eight-dynamic-imports-with-prefetch-and-preload/\">参考</a></p>","frontmatter":{"date":"2019-05-02","title":"webpack dynmaic import","category":"Configuration"}}},{"node":{"id":"7e71e4e9-1eae-5084-8ae0-1818630b9f96","html":"<p>在《JavaScript: The Good Parts》里，作者并不赞成 <code class=\"language-text\">switch</code> 语句的使用（主要是因为 fall-through 的情况很容易造成错误）。然而在实际的代码里，还是有不少地方可以看到 switch 的使用。目的各不相同，有不少可以借鉴的地方。</p>\n<section><h2>默认值设置</h2><p>React 的 <a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L220\">Scheduler</a> 中，有这样一段代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ImmediatePriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> UserBlockingPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> NormalPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> LowPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> IdlePriority<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>不失为设置默认值的一种写法，看上去比使用 if 来得更明确一些：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  priorityLevel <span class=\"token operator\">!==</span> ImmediatePriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> UserBlockingPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> NormalPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> LowPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> IdlePriority\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>防止代码篡改的判定</h2><p>上面的需求，也很容易写成下面这种数组的方案：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> allowedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  ImmediatePriority<span class=\"token punctuation\">,</span>\n  UserBlockingPriority<span class=\"token punctuation\">,</span>\n  NormalPriority<span class=\"token punctuation\">,</span>\n  LowPriority<span class=\"token punctuation\">,</span>\n  IdlePriority<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNot</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> comparedTo <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> comparedTo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedValues<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>然而，这样的代码方式，可能存在被入侵的危险。不论是上面例子中的 <code class=\"language-text\">every</code> 函数，还是用 <code class=\"language-text\">Array.prototype</code> 上的任意函数，都有被篡改的可能性。如果其他地方的代码修改了 <code class=\"language-text\">Array.prototype.every</code> 的行为，让这里的返回值发生了变化，那么代码最终就会产生意料之外的行为。</p><p>在 Scheduler 中当然不需要考虑这个问题，但是在其他的应用场景下，这可能是不得不考虑的问题。举例来说，如果一个 Web 应用允许第三方脚本的运行，同时自身有对数据进行白名单检查的需求，那么就只能使用 switch 硬编码所有的情况，而不能使用数组或者对象，否则第三方的脚本有可能对最终的行为做篡改。</p><p>Microsoft Teams 的代码里，就有类似的应用场景（见 extracted/lib/renderer/preload_sandbox.js）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChannelAllowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// IMPORTANT - the allowList must be a hardcorded switch statement.</span>\n  <span class=\"token comment\">// Array and object methods can be overridden and forced to return true.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> xxx<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> zzz<span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"date":"2019-05-01","title":"use case of switch","category":"JavaScript"}}}]}},"pageContext":{"glob":"2019-05-*","time":"2019-05","previous":null,"next":null}}