{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"3f990a47-8a8b-53f9-a219-91181ad91d17","html":"<p>在《JavaScript: The Good Parts》里，作者并不赞成 <code class=\"language-text\">switch</code> 语句的使用（主要是因为 fall-through 的情况很容易造成错误）。然而在实际的代码里，还是有不少地方可以看到 switch 的使用。目的各不相同，有不少可以借鉴的地方。</p>\n<section><h2>默认值设置</h2><p>React 的 <a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L220\">Scheduler</a> 中，有这样一段代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ImmediatePriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> UserBlockingPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> NormalPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> LowPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> IdlePriority<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>不失为设置默认值的一种写法，看上去比使用 if 来得更明确一些：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  priorityLevel <span class=\"token operator\">!==</span> ImmediatePriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> UserBlockingPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> NormalPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> LowPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> IdlePriority\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>防止代码篡改的判定</h2><p>上面的需求，也很容易写成下面这种数组的方案：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> allowedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  ImmediatePriority<span class=\"token punctuation\">,</span>\n  UserBlockingPriority<span class=\"token punctuation\">,</span>\n  NormalPriority<span class=\"token punctuation\">,</span>\n  LowPriority<span class=\"token punctuation\">,</span>\n  IdlePriority<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNot</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> comparedTo <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> comparedTo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedValues<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>然而，这样的代码方式，可能存在被入侵的危险。不论是上面例子中的 <code class=\"language-text\">every</code> 函数，还是用 <code class=\"language-text\">Array.prototype</code> 上的任意函数，都有被篡改的可能性。如果其他地方的代码修改了 <code class=\"language-text\">Array.prototype.every</code> 的行为，让这里的返回值发生了变化，那么代码最终就会产生意料之外的行为。</p><p>在 Scheduler 中当然不需要考虑这个问题，但是在其他的应用场景下，这可能是不得不考虑的问题。举例来说，如果一个 Web 应用允许第三方脚本的运行，同时自身有对数据进行白名单检查的需求，那么就只能使用 switch 硬编码所有的情况，而不能使用数组或者对象，否则第三方的脚本有可能对最终的行为做篡改。</p><p>Microsoft Teams 的代码里，就有类似的应用场景（见 extracted/lib/renderer/preload_sandbox.js）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChannelAllowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// IMPORTANT - the allowList must be a hardcorded switch statement.</span>\n  <span class=\"token comment\">// Array and object methods can be overridden and forced to return true.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> xxx<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> zzz<span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"date":"2019-05-02","title":"use case of switch","category":"JavaScript"}}},{"node":{"id":"da7a5303-aa58-5ca2-83b5-f6be73c62cc6","html":"<ol>\n<li>React isn’t just for Browser environment, thus might not have HTMLElement at all\nvirtual dom only uses JavaScript objects, which is possible to be used anywhere,\nas long as JavaScript is running.\nReact and ReactDOM are two packages, HTMLElement is only available in ReactDOM package.</li>\n</ol>\n<p>  Native React is for iOS/Android, ink is for console project.</p>\n<ol start=\"2\">\n<li>virtual dom isn’t “fast”. The fastest way of rendering will always be manipulating the DOM directly\n(and only manipulate the necessary part)\n(probably using document.createDocumentFragment if possible)</li>\n</ol>","frontmatter":{"date":"2019-05-11","title":"why virtual dom","category":"JavaScript"}}}]}},"pageContext":{"glob":"2019-05-*","time":"2019-05","previous":"2019-04","next":null}}