{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"438d909b-d6b0-5774-80be-4fad8a1b7fd4","html":"<p>HTML 中的 <code class=\"language-text\">input</code> 组件，如果设置成 <code class=\"language-text\">type=file</code>，就可以变成一个文件选择控件。</p>\n<p>默认情况下，系统默认打开的这个文件选择框，可以接受任意的文件选择。如果需要指定可以选择的文件类型，可以使用 <code class=\"language-text\">accept</code> 参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/x-png,image/gif,image/jpeg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>上面这个例子中，浏览器将会只接受 png / gif 或 jpg 的输入。</p>\n<p>也可以写:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>以支持任意类型的图片格式输入。同理，类似的比如 <code class=\"language-text\">video/*</code> 将会只接受任意类型的视频；<code class=\"language-text\">audio/*</code> 将会只接受任意类型的音频文件。</p>\n<p>除了指定 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME</a> 类型之外，也可以指定后缀。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.pdf,.doc,.docx<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>将会只允许以 pdf / doc / docx 这三种名称作为后缀的文件被选择。</p>\n<p>各个浏览器的支持情况可以看<a href=\"http://caniuse.com/#feat=input-file-accept\">这里</a>。</p>\n<p>（当然，这个只是前端的一个校验，后端依然需要重新对前端给的输入进行检查才行）</p>","frontmatter":{"date":"2019-06-10","title":"Read certain type of files","category":"HTML"}}},{"node":{"id":"cdd0a7a0-4d82-5b1e-bd0b-fa4c71b743e2","html":"<p>由于系统的差异，不同的电脑上存在的字体是不一样的。为了网站的效果可以兼顾各个设备，一般在写 CSS 的时候，<code class=\"language-text\">font-family</code> 总是很长的一串。通过字体 fallback 的功能，让浏览器自行选择最先能匹配到的字体文件，从而保证显示的效果大体上接近于视觉效果图。在实际书写中，有一个值得注意的细节：<strong>英文字体应该在中文字体的前面</strong>。</p>\n<p>中文字体文件往往包含英文字符，但是这些英文字符的样式很可能并不是设计师希望看到的。如果中文字体展示在英文字体的前面，英文字体就没法被使用到，导致最终的效果略有偏差。下面展示了中文字体 PingFang SC 和苹果默认英文系统字体（SF NS Display）针对英文字母的渲染效果（需要在 MacOS 下查看）：</p>\n<style>\n.pingfang-sc {\n  font-family: 'PingFang SC';\n  font-size: 3em;\n}\n.default-font {\n  font-family: -apple-system, BlinkMacSystemFont;\n  font-size: 3em;\n}\n</style>\n<p><span class=\"pingfang-sc\">ffi</span></p>\n<p><span class=\"default-font\">ffi</span></p>\n<p>所以，应该写：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>\n    -apple-system, BlinkMacSystemFont,\n    <span class=\"token string\">'Segoe UI'</span>, <span class=\"token string\">'Helvetica Neue'</span>, Helvetica, Arial,\n    <span class=\"token string\">'PingFang SC'</span>, <span class=\"token string\">'Microsoft YaHei'</span>,\n    sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而不是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">'PingFang SC'</span>, <span class=\"token string\">'Microsoft YaHei'</span>,\n    -apple-system, BlinkMacSystemFont,\n    <span class=\"token string\">'Segoe UI'</span>, <span class=\"token string\">'Helvetica Neue'</span>, Helvetica, Arial,\n    sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，<code class=\"language-text\">-apple-system, BlinkMacSystemFont</code> 针对苹果下的 Safari 和 Chrome 内核调用系统自带字体，对应到的英文字体是 SF (SF NS Display)，中文字体是 PingFang (PingFang SC)。</p>","frontmatter":{"date":"2019-06-05","title":"Order of font-family","category":"CSS"}}},{"node":{"id":"4ae2b172-9c43-5c76-a48a-d5d9375130e5","html":"<p>在 JavaScript 中，如果得到了一串字节（比如 <code class=\"language-text\">Uint8Array</code>），要转化成对应的字符串，就可以用到 <code class=\"language-text\">TextDecoder</code>。简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">119</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"hello world\"</span></code></pre></div>\n<p>当然，上面的这个例子是比较简单的。不使用 <code class=\"language-text\">TextDecoder</code> 也可以直接转化成字符串：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">119</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"hello world\"</span></code></pre></div>\n<p><code class=\"language-text\">TextDecoder</code> 的主要优势，需要在非 ASCII 码范围内才体现出来。特别是 utf-8 这类变长字符串编码，直接处理比较困难。交给现成的 API 来处理，简单方便。</p>\n<p>参考文档：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\">MDN</a></p>","frontmatter":{"date":"2019-06-04","title":"TextDecoder","category":"JavaScript"}}},{"node":{"id":"d781115a-0efa-54bd-b73d-2e303fc25f5d","html":"<p>一个项目工程里的组件，很可能需要依赖于某些项目顶层定义的 <code class=\"language-text\">Provider</code> 才能正确使用。比如，mobx 的项目可能会在顶层通过 <code class=\"language-text\">mobx-react</code> 中的 <code class=\"language-text\">Provider</code> 提供 <code class=\"language-text\">store</code> 参数。</p>\n<p>如果需要在每一个 story 中都写：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Provider</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">info</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ComponentForThisStory</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Provider</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>显然太啰嗦了。</p>\n<p>storybook 提供了全局定义 decorator 的方法，可以以此来注册一些全局都用得到的改动。举例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure<span class=\"token punctuation\">,</span> addDecorator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">withProvider</span><span class=\"token punctuation\">(</span>story<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Provider</span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">info</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">story</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Provider</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadStories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>loadStories<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样，在 story 中，只需要简单的提供组件就可以了，<code class=\"language-text\">decorator</code> 会自动为组件加上合适的外层 <code class=\"language-text\">Provider</code>。</p>\n<p><a href=\"https://alligator.io/react/storybook-with-redux/\">参考文档</a></p>","frontmatter":{"date":"2019-06-03","title":"global Provider for storybook","category":"JavaScript"}}},{"node":{"id":"05365d56-a756-56f8-8132-d6b6f77ab537","html":"<p>Glob 类似于 Regular Expression，主要的使用场景是用于批量的文件匹配，在 bash 或是配置文件中常常被使用。下面列举了一些常见的语法规则：</p>\n<ul>\n<li><code class=\"language-text\">*</code> 匹配任意多个字符（包括匹配零个）</li>\n<li><code class=\"language-text\">?</code> 匹配任意一个字符</li>\n<li><code class=\"language-text\">[abc]</code> 匹配方括号中的任意一个字符</li>\n<li><code class=\"language-text\">[!abc]</code> 或 <code class=\"language-text\">[^abc]</code> 匹配除了方括号中定义的三个字符外的任意字符</li>\n<li><code class=\"language-text\">[a-z]</code> 匹配方括号定义范围内的任意一个字符</li>\n<li><code class=\"language-text\">[!a-z]</code> 或 <code class=\"language-text\">[^a-z]</code> 匹配除了方括号定义范围内的任意一个字符</li>\n<li><code class=\"language-text\">{ab,cd,ef}</code> 匹配花括号中定义的三个字符串中的任意一个</li>\n</ul>\n<p>举个例子，如果 Jest 的单元测试文件命名规范的正则表达式是：<code class=\"language-text\">.+\\.(?:test|spec)\\.[tj]sx?$</code>，也就是匹配下面的这些文件：</p>\n<ul>\n<li>a.test.js</li>\n<li>b.test.jsx</li>\n<li>c.test.ts</li>\n<li>d.test.tsx</li>\n<li>e.spec.js</li>\n<li>f.spec.jsx</li>\n<li>g.spec.ts</li>\n<li>h.spec.tsx</li>\n</ul>\n<p>那么，相应的 Glob 可以写：<code class=\"language-text\">*.{test,spec}.{js,jsx,ts,tsx}</code>。</p>\n<p>如果不涉及到 React 的代码（没有 jsx），可以写成：<code class=\"language-text\">*.{test,spec}.[tj]s</code>。</p>\n<p>参考文档：</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Glob_(programming)\">Wikipedia</a></li>\n<li><a href=\"http://www.jedit.org/users-guide/globs.html\">Glob Patterns</a></li>\n<li><a href=\"http://www.globtester.com/\">globtester</a></li>\n</ul>","frontmatter":{"date":"2019-06-02","title":"glob","category":"Bash"}}},{"node":{"id":"25c60151-a022-5098-8ea0-5c8eb172e4b3","html":"<p>以下整理了一些可用的占位图片服务：</p>\n<section><h2>lorempixel</h2><p>地址：<a href=\"http://lorempixel.com/\">http://lorempixel.com/</a></p><p>参考引用方法：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://lorempixel.com/400/200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>placeholder image<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div><p>服务会返回随机的照片。可以通过参数选择需要返回的照片的类别（具体方法参考网站上的文档）。</p><p>效果：</p><img src=\"http://lorempixel.com/400/200\" alt=\"placeholder image\"></section>\n<section><h2>lorem picsum</h2><p>地址：<a href=\"https://picsum.photos/\">https://picsum.photos/</a></p><p>参考引用方法：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://picsum.photos/400/200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>placeholder image<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div><p>服务会返回随机的照片。可以通过参数选择需要返回的照片的类别（具体方法参考网站上的文档）。</p><p>效果：</p><img src=\"https://picsum.photos/400/200\" alt=\"placeholder image\"></section>\n<section><h2>placeholder</h2><p>地址：<a href=\"https://placeholder.com\">https://placeholder.com</a></p><p>参考引用方法：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://via.placeholder.com/400x200.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>placeholder image<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div><p>服务器会根据要求返回需要的图片，可以指定背景颜色/文字/大小等，具体配置的方法见网站上的文档。</p><p>效果：</p><img src=\"https://via.placeholder.com/400x200.png\" alt=\"placeholder image\"></section>\n<section><h2>其他</h2><p>其他可以参考的类似服务有：</p><ul>\n<li><a href=\"https://docs.imgix.com/apis/url/text/txt\">imgix</a></li>\n</ul></section>","frontmatter":{"date":"2019-05-31","title":"Placeholder Images","category":"Service"}}},{"node":{"id":"cfcc5715-dc41-5ff2-a216-1b5ae28c3f5f","html":"<p>默认情况下，Jest 配置文件中的 <code class=\"language-text\">transform</code> 属性，是不会被应用到 node_modules 目录下的。如果引用的库本身使用了非 JavaScript 文件（比如 CSS 文件），会造成 Jest 无法正确处理。</p>\n<p>一个可行的替代方案，是用 <code class=\"language-text\">moduleNameMapper</code> 来代替 <code class=\"language-text\">transform</code> 的功能。</p>\n<p>以 CSS 的处理为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  transform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.(less|css)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jest-transform-stub\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这个是常规方案，但是对 CSS / Less 的处理不包含 node_modules 的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  moduleNameMapper<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.(less|css)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jest-transform-stub\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这个方案，可以达到一样的效果，但是 node_module 内的 CSS 引用也会被正确的处理。</p>\n<p>两种方案没有优劣，主要是看使用的场景。</p>","frontmatter":{"date":"2019-05-30","title":"Transform node_modules in Jest","category":"JavaScript"}}},{"node":{"id":"fb7226ce-2605-5daf-87c4-e8147ba6cc32","html":"<p>一个网站的 Style Guide 可以方便的展示出基础 HTML 元素的样式，方便查看整体的效果。</p>\n<p>一些值得参考的 Style Guide</p>\n<ul>\n<li><a href=\"https://www.poormansstyleguide.com/\">Poor Man’s Style Guide</a></li>\n<li><a href=\"https://www.chenhuijing.com/styleguide/\">Chen Hui Jing’s Style Guide</a></li>\n</ul>\n<p>本网站使用的 <a href=\"/styleguide\">Style Guide</a>。</p>","frontmatter":{"date":"2019-05-29","title":"Style Guide","category":"HTML"}}},{"node":{"id":"f397fea6-d6b4-5fd1-b8f6-27f16b387261","html":"<p><code class=\"language-text\">npm</code> 和 <code class=\"language-text\">yarn</code> 都提供升级依赖的命令。</p>\n<p>针对 <code class=\"language-text\">npm</code>，可以使用 <code class=\"language-text\">npm update</code> 来执行，命令格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">npm update [-g] [&lt;pkg&gt;...]</code></pre></div>\n<p>更新的时候，默认会更新 <code class=\"language-text\">package.json</code> 文件，可以通过增加 <code class=\"language-text\">--no-save</code> 标记来禁用这一改动。</p>\n<p><code class=\"language-text\">npm</code> 的文档可以看<a href=\"https://docs.npmjs.com/cli/update\">这里</a>。</p>\n<p><code class=\"language-text\">yarn</code> 的命令会更加丰富一些，命令格式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">yarn upgrade [package | package@tag | package@version | @scope/]... [--pattern]</code></pre></div>\n<p>其中，<code class=\"language-text\">--pattern</code> 后面可以跟 grep 的 pattern，只有匹配到的依赖会被升级。</p>\n<p>默认情况下，升级会参考 <code class=\"language-text\">package.json</code> 里定义的依赖允许的升级范围来选择可行的最高版本进行升级。如果希望直接升级到最新版本（往往意味着会有 breaking change），那么可以加上 <code class=\"language-text\">--latest</code> 标志。</p>\n<p><code class=\"language-text\">yarn</code> 的文档可以看<a href=\"https://yarnpkg.com/lang/en/docs/cli/upgrade/\">这里</a>。</p>","frontmatter":{"date":"2019-05-28","title":"Upgrade Npm Dependencies","category":"Bash"}}},{"node":{"id":"fc5319b0-0f0a-5ebf-9e57-069b0cbf41a4","html":"<p>以下 Bash 代码可以递归删除指定的 <code class=\"language-text\">.map</code> 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -type f -name <span class=\"token string\">'*.map'</span> -delete</code></pre></div>\n<p>如果同时希望删除 <code class=\"language-text\">.map</code> 和 <code class=\"language-text\">.xxx</code> 文件，可以加上 <code class=\"language-text\">-o</code> flag</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -type f -name <span class=\"token string\">'*.map'</span> -o -name <span class=\"token string\">'.*'</span> -delete</code></pre></div>\n<p>一些参数说明：</p>\n<ul>\n<li><code class=\"language-text\">-type f</code> 表示需要查找的是文件</li>\n<li><code class=\"language-text\">-name &#39;xxx&#39;</code> 定义需要匹配的文件名</li>\n<li><code class=\"language-text\">-o</code> 表示 or，后面可以跟新的匹配规则</li>\n<li><code class=\"language-text\">-delete</code> 表示匹配到的文件需要被删除</li>\n</ul>","frontmatter":{"date":"2019-05-27","title":"Recursively delete files by type","category":"Bash"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}