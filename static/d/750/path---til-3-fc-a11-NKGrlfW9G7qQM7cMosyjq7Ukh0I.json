{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"4ee5c1e7-b1f6-51d4-97f2-c743b2309fde","html":"<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>假设有一个 TypeScript 的类型是：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  str<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，下面的设置将会抽出所有函数的部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Example<span class=\"token punctuation\">,</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span>Example<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Equivalent</span> <span class=\"token punctuation\">{</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-05-16","title":"Extract all function properties from given type","category":"TypeScript"}}},{"node":{"id":"7fc6c54d-3b86-5235-9e18-54a0c3221a44","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">check this</a></p>","frontmatter":{"date":"2019-05-15","title":"polyfill of globalThis","category":"JavaScript"}}},{"node":{"id":"dab8bde4-4838-5442-9404-2cd65df85c0b","html":"<p><a href=\"https://github.com/JedWatson/classnames\">classnames</a> 库提供了一个 <code class=\"language-text\">bind</code> API，用于处理 CSS Module 的情况。</p>\n<p>在 Webpack 中用 CSS Module 的方案编译 CSS 文件，后续在 JavaScript 中 <code class=\"language-text\">import style from &#39;xxx.css&#39;;</code> 后，<code class=\"language-text\">style</code> 就是一个对象。这个对象的大体结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo-abcde'</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar-12345'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，对象的 <code class=\"language-text\">key</code> 是原始的 class name，而 <code class=\"language-text\">value</code> 则是施加 CSS Module 之后得到的唯一名称。</p>\n<p>如果直接使用 <code class=\"language-text\">classnames</code> 的标准 API，那么写起来就需要大量使用 computed property name 的语法，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classnames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>而使用 <code class=\"language-text\">bind</code> API，可以事先告知 <code class=\"language-text\">classnames</code> class name 的对应关系（通过指定 <code class=\"language-text\">this</code>），后续只需要使用字符串，<code class=\"language-text\">classnames</code> 就可以自动使用合适的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames/bind'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// result in: className=\"foo-abcde\"</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-15","title":"classnames & css module","category":"JavaScript"}}},{"node":{"id":"ee70a427-5c58-512f-975a-a2ab0b185a9a","html":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> $<span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token comment\">#} == https://github.com/* ]] || [[ ${!#} == git@github.com:* ]] || {</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string\">\"This command is only for cloning GitHub repo.\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">exit</span> 1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"[WARNING]\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"This command is used to clone GitHub (external) repos only;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"It will reset user name and email in repo automatically;\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string\">\"External Username and Email is used for GitHub repo.\"</span><span class=\"token punctuation\">;</span>\n    local tmp<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n    local repo_name<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">git</span> clone <span class=\"token variable\">$@</span> --progress 2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>1 <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n    repo_name<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">awk</span> -F\\<span class=\"token string\">' '</span>/Cloning into/ <span class=\"token punctuation\">{</span>print $2<span class=\"token punctuation\">}</span>' $tmp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">rm</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cd</span> <span class=\"token variable\">$repo_name</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">git</span> config user.name xxx<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">git</span> config user.email xxx@yyy.zzz<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nf</code></pre></div>\n<p><a href=\"https://stackoverflow.com/questions/37669115/how-to-redirect-full-output-of-git-clone-to-a-file\">https://stackoverflow.com/questions/37669115/how-to-redirect-full-output-of-git-clone-to-a-file</a></p>\n<blockquote>\n<p>By default Git will display the cloning progress only when the standard error stream is directed to a terminal. Since you’re redirecting it to the pipe, the output stream is no longer attached to the terminal. So in order to capture the output, you need to add —progress parameter to force the progress status, e.g.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[includeIf &quot;gitdir:~/work/github/&quot;]\n    path = ~/work/github/.gitconfig</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]\n        name = LaySent\n        email = laysent@gmail.com\n[init]\n        templatedir = &quot;&quot;</code></pre></div>","frontmatter":{"date":"2019-05-14","title":"Multiple Git Configuration","category":"Git"}}},{"node":{"id":"eab4ce73-53cf-5329-9cbf-8bfb8219aa5b","html":"<p><a href=\"https://davidwalsh.name/object-create-null\">https://davidwalsh.name/object-create-null</a></p>","frontmatter":{"date":"2019-05-13","title":"Object.create(null)","category":"JavaScript"}}},{"node":{"id":"9080b3e5-21eb-5560-a0f4-842f647be8cd","html":"<p>React 的渲染过程中，使用了 VNode 来表示一个组件树。虽然最终 virtual DOM 会被翻译成真实的 DOM tree，但是在之前，选择了使用 VNode 而不是真实的 DOM，能想到的有几个原因：</p>\n<ol>\n<li>React 不仅仅只是为浏览器环境准备的，所以运行环境中并不一定存在真实的 DOM。virtual dom 只使用了 JavaScript 中的对象，这个在所有的 JavaScript 运行环境里都是支持且可以直接使用的。也正因为如此，React 和 ReactDOM 才是两个独立的库，DOM 相关的内容只存在于 ReactDOM 中。对于不使用 DOM 的 React 方案，在手机端有 React Native，在 Console 中有 ink。</li>\n<li>自定义组件没有办法直接用 DOM 的元素来表示。虽然最终，自定义组件肯定会表示成一颗 DOM 树，但是在渲染的过程中，shouldComponentUpdate 可能就会插手让渲染不必进行下去了。此时，只用中间的自定义组件，还没有运行到真实的 DOM 结构。此时，用 virtual dom 的抽象表示是更合适的。</li>\n<li>创建 VNode 的速度要显著的快于创建 DOM node 的速度。因为 VNode 最终不一定要转化为 DOM（比如最终发现不需要修改），如果直接生成 DOM node，可能反而浪费了。VNode 只是一个 object，创建的速度比 DOM 要快得多。</li>\n</ol>\n<p>当然，需要说明的是，VNode 只是创建的速度比 DOM 要快很多。但这不代表使用 virtual dom 的渲染方案本身比直接操纵 DOM 树来的快。事实上，如果能够根据业务需求去手动的操作每一个 DOM 的节点，达到的最终效果肯定要好于用 React 库实现的统一解决方案。</p>","frontmatter":{"date":"2019-05-11","title":"why virtual dom","category":"JavaScript"}}},{"node":{"id":"da7a5303-aa58-5ca2-83b5-f6be73c62cc6","html":"<p>JavaScript 的 <code class=\"language-text\">performance</code> 除了常用的 <code class=\"language-text\">now</code> / <code class=\"language-text\">mark</code> 之外，也提供了和页面加载相关的很多接口。通过调用这些接口，就可以很方便的收集页面加载的相关指标，方便了解不同用户的实际体验。</p>\n<p><code class=\"language-text\">perfomance.getEntries</code> 返回的数据，有三种类型：<code class=\"language-text\">navigation</code>，<code class=\"language-text\">resource</code>，<code class=\"language-text\">paint</code>。</p>\n<p>其中，<code class=\"language-text\">navigation</code> 包含了 <code class=\"language-text\">PerformanceNavigationTiming</code>，里面记录了和页面导航相关的时间信息，比如 connection 的起始/结束时间等。可以通过下面的代码拿到完整的数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// connectEnd: xxx</span>\n<span class=\"token comment\">// connectStart: xxx</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">resource</code> 包含了所有的 <code class=\"language-text\">PerformanceResourceTiming</code>。每一个资源的请求，对应一个 <code class=\"language-text\">PerformanceResourceTiming</code>。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> duration <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`resource: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> use </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>duration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> milliseconds to load`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// resource: https://xxxx use xxx milliseconds to load</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">paint</code> 包含了所有的 <code class=\"language-text\">PerformancePaintTiming</code>。一共有两个，分别是 first-paint 和 first-contentful-paint。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> startTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, startTime: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// first-paint: xxxx</span>\n  <span class=\"token comment\">// first-contentful-paint: xxx</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-11","title":"performance data via JavaScript","category":"JavaScript"}}},{"node":{"id":"4252565c-e343-5338-8284-9d89fe806fa2","html":"<p>在 HTML 中，如果一个 <code class=\"language-text\">a</code> 标签，带上了 <code class=\"language-text\">download</code> 的属性，链接地址就会被浏览器直接用于下载。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link_here<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">download</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filename.suffix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>同样，如果需要 JavaScript 能够直接触发一个资源的下载，可以创建带 <code class=\"language-text\">download</code> 属性的 <code class=\"language-text\">a</code> 标签，然后调用这个元素的 <code class=\"language-text\">click</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'link_here'</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger download</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">download</code> 的支持情况见<a href=\"https://caniuse.com/download/embed\">这里</a>。</p>\n<p>这个方案有一个问题：如果是跨域的资源，直接这样的 <code class=\"language-text\">a</code> 标签点击是不能调用下载的（因为执行了严格的同源策略），行为上就会和一个普通的导航没有区别（比如，增加 <code class=\"language-text\">target=_blank</code> 之后就会打开一个新窗口展示资源）。</p>\n<p>解决跨域的一个前端方案是：fetch 资源，然后将结果转化成 Blob，然后将这个 Blob 生成一个 URL。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link_here'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>repsonse <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>blob <span class=\"token operator\">=></span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> link<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename.here'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-10","title":"download third party resource","category":"JavaScript"}}},{"node":{"id":"8fd27234-ec29-5aa3-893d-0976d8cd498d","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', reason: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。</p>\n<p>和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>\n<p>需要注意的是，返回的结果是一个数组，其中的每一个元素都是一个对象。其中，每个对象都有 <code class=\"language-text\">status</code> 的字段，表示对应的 Promise 最终的结果是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code>。如果是 <code class=\"language-text\">fulfilled</code> 状态，那么对象会有 <code class=\"language-text\">value</code> 字段，值相当于 <code class=\"language-text\">.then</code> 回调中的第一个参数；如果是 <code class=\"language-text\">rejected</code> 状态，那么对象会有 <code class=\"language-text\">reason</code> 字段，值相当于 <code class=\"language-text\">.catch</code> 回调中的第一个参数。</p>","frontmatter":{"date":"2019-05-09","title":"Promise.allSettled","category":"JavaScript"}}},{"node":{"id":"4c97e58a-96d7-5693-967e-f1dcdd60ff3a","html":"<p>在 Node.js 中，<code class=\"language-text\">utils</code> 提供了 <code class=\"language-text\">debuglog</code> 模块可以用于调试信息的输出。默认情况下，<code class=\"language-text\">debuglog</code> 的内容是不会输出的，只有当 <code class=\"language-text\">NODE_DEBUG</code> 这个环境变量设置了合适的值，输出才会显示。这样，调试信息不会影响正常的使用，同时也依然保留了调试的需求。</p>\n<p>具体的使用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> debuglog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world: [%d]'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子中，如果直接运行，是不会包含 <code class=\"language-text\">hello world: 1</code> 的输出的。如果设置 <code class=\"language-text\">NODE_DEBUG</code> 为 <code class=\"language-text\">name</code>（也就是 <code class=\"language-text\">debuglog</code> 函数调用时设置的值），那么再次运行，<code class=\"language-text\">hello world: 1</code> 就会输出了。</p>\n<p>同时，可以用逗号分隔的方式一次性为 <code class=\"language-text\">NODE_DEBUG</code> 设置多个值，比如：<code class=\"language-text\">NODE_DEBUG=foo,bar</code>。</p>\n<p>在 Mac 下，一次性设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NODE_DEBUG<span class=\"token operator\">=</span>name node ./index.js</code></pre></div>\n<p>在 Windows 下（Powershell），设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:NODE_DEBUG=<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span> node <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>设置完成之后，<code class=\"language-text\">NODE_DEBUG</code> 会一直保留着，直到 powershell 被关闭。需要删掉原先设置的 <code class=\"language-text\">NODE_DEBUG</code>，可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Item</span> env:\\NODE_DEBUG</code></pre></div>","frontmatter":{"date":"2019-05-08","title":"debuglog in node.js","category":"Node.js"}}}]}},"pageContext":{}}