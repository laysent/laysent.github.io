{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"4252565c-e343-5338-8284-9d89fe806fa2","html":"<p>使用 <code class=\"language-text\">import</code> 函数引入的代码，在 Webpack 中会被编译到一个异步模块中。<code class=\"language-text\">import</code> 函数返回一个 Promise，会在异步模块\n加载完毕后 resolve。</p>\n<p>Webpack 允许在调用 <code class=\"language-text\">import</code> 的时候加入注释来对异步加载进行配置。最常见的是指定新文件的 chunk name：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackChunkName: \"name\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果在 Webpack 的配置中指定了输出的文件名格式，比如 <code class=\"language-text\">[name].js</code>，那么最终输出的结果的文件名就会是 <code class=\"language-text\">name.js</code>。</p>\n<p>当然，<code class=\"language-text\">import</code> 输入的参数字符串可以不是一个固定值。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这种情况下，Webpack 会尝试将 module-parent-path 下所有的文件都各自打包成一个异步模块。在这种情况下，显然 webpackChunkName 没法直接写死一个字符串了。Webpack 提供了 <code class=\"language-text\">index</code> 和 <code class=\"language-text\">request</code> 两个参数，可以用于动态生成的这些异步加载模块的命名。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">index</code> 表示当前引用的文件的序号，<code class=\"language-text\">request</code> 则表示当前引用的模块中动态的部分。举例俩说，上面这里如果 <code class=\"language-text\">moduleName</code> 是 <code class=\"language-text\">example</code>，且配置生成的文件名是 <code class=\"language-text\">[name].js</code>，那么最终这个模块的文件名就是 <code class=\"language-text\">name-0-example.js</code>。</p>\n<p>当然，一次性将 module-parent-path 下所有的文件都打包成独立的异步模块可能会太多了，Webpack 提供了一些裁剪的方案：</p>\n<ul>\n<li><code class=\"language-text\">webpackInclude</code>，允许配置一个正则表达式，匹配的部分才打包成异步模块，忽略其他的</li>\n<li><code class=\"language-text\">webpackExclude</code>，允许配置一个正则表达式，匹配的部分会被忽略，打包其他剩下的模块</li>\n<li><code class=\"language-text\">webpackMode</code>，默认的模式是 <code class=\"language-text\">lazy</code>，每一个文件都会打包成一个异步模块；<code class=\"language-text\">lazy-once</code> 则会要求 Webpack 将所有的文件打包到一个模块中；<code class=\"language-text\">eager</code> 会把模块打包到当前的 chunk 中，但是不执行，等到真正执行了 <code class=\"language-text\">import</code> 命令之后，才执行里面的代码（省去了网络请求），依然返回的是 promise；<code class=\"language-text\">weak</code> 不会产生网络请求，默认模块会由其他途径加载完成，如果其他途径没有事先加载过，那么此处调用就会造成 promise 的 reject。</li>\n</ul>\n<p>如果有多个配置，可以叠加写在一起。一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName\n  <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span>\n  <span class=\"token comment\">/* webpackInclude: /include\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackExclude: /exclude\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackMode: \"lazy\" */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了上述之外，Webpack 还支持一些模块加载相关的配置，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPrefetch: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 prefetch 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=prefetch /&gt;</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPreload: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 preload 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=preload /&gt;</code>。</p>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* webpackPreload: true */</span>\n  <span class=\"token comment\">/* webpackChunkName: \"name\" */</span>\n  <span class=\"token string\">'module-path-here'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到，这里配置注释写在前面还是写在后面都是不影响的。</p>\n<p><a href=\"https://wanago.io/2018/08/20/webpack-4-course-part-eight-dynamic-imports-with-prefetch-and-preload/\">参考</a></p>","frontmatter":{"date":"2019-04-06","title":"webpack dynmaic import","category":"Configuration"}}},{"node":{"id":"9ebfbed8-1960-5592-afaa-4ad983213be5","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">https://mathiasbynens.be/notes/globalthis</a></p>","frontmatter":{"date":"2019-04-19","title":"polyfill of globalThis","category":"JavaScript"}}}]}},"pageContext":{"glob":"2019-04-*","time":"2019-04","previous":null,"next":"2019-05"}}