{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"3f990a47-8a8b-53f9-a219-91181ad91d17","html":"<p>在《JavaScript: The Good Parts》里，作者并不赞成 <code class=\"language-text\">switch</code> 语句的使用（主要是因为 fall-through 的情况很容易造成错误）。然而在实际的代码里，还是有不少地方可以看到 switch 的使用。目的各不相同，有不少可以借鉴的地方。</p>\n<section><h2>默认值设置</h2><p>React 的 <a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L220\">Scheduler</a> 中，有这样一段代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ImmediatePriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> UserBlockingPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> NormalPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> LowPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> IdlePriority<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>不失为设置默认值的一种写法，看上去比使用 if 来得更明确一些：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  priorityLevel <span class=\"token operator\">!==</span> ImmediatePriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> UserBlockingPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> NormalPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> LowPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> IdlePriority\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>防止代码篡改的判定</h2><p>上面的需求，也很容易写成下面这种数组的方案：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> allowedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  ImmediatePriority<span class=\"token punctuation\">,</span>\n  UserBlockingPriority<span class=\"token punctuation\">,</span>\n  NormalPriority<span class=\"token punctuation\">,</span>\n  LowPriority<span class=\"token punctuation\">,</span>\n  IdlePriority<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNot</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> comparedTo <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> comparedTo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedValues<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>然而，这样的代码方式，可能存在被入侵的危险。不论是上面例子中的 <code class=\"language-text\">every</code> 函数，还是用 <code class=\"language-text\">Array.prototype</code> 上的任意函数，都有被篡改的可能性。如果其他地方的代码修改了 <code class=\"language-text\">Array.prototype.every</code> 的行为，让这里的返回值发生了变化，那么代码最终就会产生意料之外的行为。</p><p>在 Scheduler 中当然不需要考虑这个问题，但是在其他的应用场景下，这可能是不得不考虑的问题。举例来说，如果一个 Web 应用允许第三方脚本的运行，同时自身有对数据进行白名单检查的需求，那么就只能使用 switch 硬编码所有的情况，而不能使用数组或者对象，否则第三方的脚本有可能对最终的行为做篡改。</p><p>Microsoft Teams 的代码里，就有类似的应用场景（见 extracted/lib/renderer/preload_sandbox.js）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChannelAllowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// IMPORTANT - the allowList must be a hardcorded switch statement.</span>\n  <span class=\"token comment\">// Array and object methods can be overridden and forced to return true.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> xxx<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> zzz<span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"date":"2019-05-01","title":"use case of switch","category":"JavaScript"}}},{"node":{"id":"9ebfbed8-1960-5592-afaa-4ad983213be5","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">https://mathiasbynens.be/notes/globalthis</a></p>","frontmatter":{"date":"2019-05-03","title":"polyfill of globalThis","category":"JavaScript"}}},{"node":{"id":"4252565c-e343-5338-8284-9d89fe806fa2","html":"<p>使用 <code class=\"language-text\">import</code> 函数引入的代码，在 Webpack 中会被编译到一个异步模块中。<code class=\"language-text\">import</code> 函数返回一个 Promise，会在异步模块\n加载完毕后 resolve。</p>\n<p>Webpack 允许在调用 <code class=\"language-text\">import</code> 的时候加入注释来对异步加载进行配置。最常见的是指定新文件的 chunk name：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackChunkName: \"name\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果在 Webpack 的配置中指定了输出的文件名格式，比如 <code class=\"language-text\">[name].js</code>，那么最终输出的结果的文件名就会是 <code class=\"language-text\">name.js</code>。</p>\n<p>当然，<code class=\"language-text\">import</code> 输入的参数字符串可以不是一个固定值。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这种情况下，Webpack 会尝试将 module-parent-path 下所有的文件都各自打包成一个异步模块。在这种情况下，显然 webpackChunkName 没法直接写死一个字符串了。Webpack 提供了 <code class=\"language-text\">index</code> 和 <code class=\"language-text\">request</code> 两个参数，可以用于动态生成的这些异步加载模块的命名。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">index</code> 表示当前引用的文件的序号，<code class=\"language-text\">request</code> 则表示当前引用的模块中动态的部分。举例俩说，上面这里如果 <code class=\"language-text\">moduleName</code> 是 <code class=\"language-text\">example</code>，且配置生成的文件名是 <code class=\"language-text\">[name].js</code>，那么最终这个模块的文件名就是 <code class=\"language-text\">name-0-example.js</code>。</p>\n<p>当然，一次性将 module-parent-path 下所有的文件都打包成独立的异步模块可能会太多了，Webpack 提供了一些裁剪的方案：</p>\n<ul>\n<li><code class=\"language-text\">webpackInclude</code>，允许配置一个正则表达式，匹配的部分才打包成异步模块，忽略其他的</li>\n<li><code class=\"language-text\">webpackExclude</code>，允许配置一个正则表达式，匹配的部分会被忽略，打包其他剩下的模块</li>\n<li><code class=\"language-text\">webpackMode</code>，默认的模式是 <code class=\"language-text\">lazy</code>，每一个文件都会打包成一个异步模块；<code class=\"language-text\">lazy-once</code> 则会要求 Webpack 将所有的文件打包到一个模块中；<code class=\"language-text\">eager</code> 会把模块打包到当前的 chunk 中，但是不执行，等到真正执行了 <code class=\"language-text\">import</code> 命令之后，才执行里面的代码（省去了网络请求），依然返回的是 promise；<code class=\"language-text\">weak</code> 不会产生网络请求，默认模块会由其他途径加载完成，如果其他途径没有事先加载过，那么此处调用就会造成 promise 的 reject。</li>\n</ul>\n<p>如果有多个配置，可以叠加写在一起。一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName\n  <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span>\n  <span class=\"token comment\">/* webpackInclude: /include\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackExclude: /exclude\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackMode: \"lazy\" */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了上述之外，Webpack 还支持一些模块加载相关的配置，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPrefetch: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 prefetch 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=prefetch /&gt;</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPreload: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 preload 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=preload /&gt;</code>。</p>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* webpackPreload: true */</span>\n  <span class=\"token comment\">/* webpackChunkName: \"name\" */</span>\n  <span class=\"token string\">'module-path-here'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到，这里配置注释写在前面还是写在后面都是不影响的。</p>\n<p><a href=\"https://wanago.io/2018/08/20/webpack-4-course-part-eight-dynamic-imports-with-prefetch-and-preload/\">参考</a></p>","frontmatter":{"date":"2019-05-10","title":"webpack dynmaic import","category":"Configuration"}}},{"node":{"id":"da7a5303-aa58-5ca2-83b5-f6be73c62cc6","html":"<ol>\n<li>React isn’t just for Browser environment, thus might not have HTMLElement at all\nvirtual dom only uses JavaScript objects, which is possible to be used anywhere,\nas long as JavaScript is running.\nReact and ReactDOM are two packages, HTMLElement is only available in ReactDOM package.</li>\n</ol>\n<p>  Native React is for iOS/Android, ink is for console project.</p>\n<ol start=\"2\">\n<li>virtual dom isn’t “fast”. The fastest way of rendering will always be manipulating the DOM directly\n(and only manipulate the necessary part)\n(probably using document.createDocumentFragment if possible)</li>\n</ol>","frontmatter":{"date":"2019-05-11","title":"why virtual dom","category":"JavaScript"}}}]}},"pageContext":{"glob":"2019-05-*","time":"2019-05","previous":null,"next":null}}