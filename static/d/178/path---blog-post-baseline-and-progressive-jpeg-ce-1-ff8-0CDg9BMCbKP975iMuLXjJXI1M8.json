{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"a9eff6fb-9661-5df6-bc05-ae60279e6004","html":"<section><h2>表现区别</h2><video controls=\"controls\" height=\"100%\" poster=\"https://cloudinary-res.cloudinary.com/video/upload/non_progressive_vs_progressive_jpeg.jpg\" preload=\"none\" width=\"100%\">\n  <source src=\"https://cloudinary-res.cloudinary.com/video/upload/non_progressive_vs_progressive_jpeg.webm\" type=\"video/webm\">\n  <source src=\"https://cloudinary-res.cloudinary.com/video/upload/non_progressive_vs_progressive_jpeg.mp4\" type=\"video/mp4\">\n  <source src=\"https://cloudinary-res.cloudinary.com/video/upload/non_progressive_vs_progressive_jpeg.ogv\" type=\"video/ogg\">\n</video><p>（<a href=\"https://cloudinary.com/blog/progressive_jpegs_and_green_martians\">出处</a>）</p></section>\n<section><h2>转化方式</h2><p><code class=\"language-text\">mozjpeg</code> 提供了转化 JPEG 文件的相关功能。在 Node.js 中，可以使用 <code class=\"language-text\">imagemin-mozjpeg</code> 包对图片进行处理。</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Loop through Divs using Javascript.</span>\n<span class=\"token keyword\">var</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> divs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  divs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> imagemin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mozjpeg <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin-mozjpeg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">imagemin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'input.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'output.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">mozjpeg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> quality<span class=\"token punctuation\">:</span> <span class=\"token number\">95</span><span class=\"token punctuation\">,</span> progressive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>如无需对 JPEG 图片进行有损压缩，只希望把 Baseline JPEG 转化为 Progressive JPEG，可以使用 <code class=\"language-text\">imagemin-jpegtran</code> 工具：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> imagemin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jpegtran <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imagemin-jpegtran'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">imagemin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'input.jpg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'output.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">jpegtran</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> progressive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>MacOS/Linux 自带了 <code class=\"language-text\">libjpeg</code> 库，其中包含了 <code class=\"language-text\">jpegtran</code> 工具，可以在命令行中直接对 Baseline JPEG 图片进行转化：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">jpegtran -optimize -progressive -outfile output.jpg input.jpg</code></pre></div><p>这里，<code class=\"language-text\">-optimize</code> 参数可以优化 JPEG 文件中墒编码的参数，<code class=\"language-text\">-progressive</code> 参数可以将 Baseline JPEG 转化成 Progressive JPEG。同时，如果不需要 EXIF 信息，可以进一步加上 <code class=\"language-text\">-copy none</code> 参数，用于压缩最终的文件大小；如果使用 <code class=\"language-text\">jpegtran</code> 对图片做了变换处理（如旋转等），<code class=\"language-text\">-trim</code> 可以去掉一些用不到的边角料（当然，这会让最终的结果不再是严格意义上的无损压缩）。更多的参数及相关说明，可以参考 <code class=\"language-text\">jpegtran</code> 的<a href=\"https://linux.die.net/man/1/jpegtran\">官方网站</a>或命令行帮助。</p><p>注，如果使用 <code class=\"language-text\">Homebrew</code> 安装 <code class=\"language-text\">mozjpeg</code> ，也会得到一个 <code class=\"language-text\">jpegtran</code> 命令行工具。为了避免其他使用到的工具出现依赖上的问题，默认 <code class=\"language-text\">Homebrew</code> 不会全局安装 <code class=\"language-text\">mozjpeg</code> 中的 <code class=\"language-text\">jpegtran</code>。可以通过软连接的方式，将 <code class=\"language-text\">jpegtran</code> 重命名成不冲突的另一个命令行工具，直接使用。</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -s /usr/local/Cellar/mozjpeg/3.0/bin/cjpeg /usr/local/bin/mozcjpeg\n<span class=\"token function\">ln</span> -s /usr/local/Cellar/mozjpeg/3.0/bin/jpegtran /usr/local/bin/mozjpegtran</code></pre></div><p>（如果实际安装的不是 <code class=\"language-text\">3.0</code> 版本，可以根据实际情况修改这里目录中的版本号）</p><p>这里，<code class=\"language-text\">mozjpeg</code> 的 <code class=\"language-text\">jpegtran</code> 基本功能是一致的，但是在默认行为上略有不同，<code class=\"language-text\">mozjpeg</code> 做了更多的优化。除了 <code class=\"language-text\">jpegtran</code> 工具之外，<code class=\"language-text\">mozjpeg</code> 也提供了 <code class=\"language-text\">cjpeg</code> 工具，可以对 JPEG 图片进行有损压缩。按照<a href=\"https://github.com/mozilla/mozjpeg/blob/master/README.md\">官方</a>给出的说法，这里给出的 <code class=\"language-text\">cjpeg</code> 是一个 demo 性质的工具。但从实际使用上来说，够用了。</p></section>\n<section><h2>判断方法</h2><p>根据 <a href=\"https://en.wikipedia.org/wiki/JPEG\">Wiki</a> 中的介绍，JPEG 由一系列的 <code class=\"language-text\">segments</code> 组成，每一个 <code class=\"language-text\">segement</code> 由一个 <code class=\"language-text\">maker</code> 开头。根据规定，这里的 <code class=\"language-text\">maker</code> 第一个字节是 <code class=\"language-text\">0xFF</code>，如果是 Progressive JPEG，那么第二个紧跟着的字节是 <code class=\"language-text\">0xC2</code>；如果是 Baseline JPEG，那么第二个紧跟着的字节是 <code class=\"language-text\">0xC0</code>。<code class=\"language-text\">maker</code> 后面紧跟着的就是图片的大小等系列参数。</p><p>故，判断一张图片是否是 Progressive JPEG 的方法非常简单，只需要在字节流中查找 <code class=\"language-text\">0xFF</code> 和 <code class=\"language-text\">0xC2</code> 两个字符就可以了。</p><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isProgressiveJPEG</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">:</span> Buffer<span class=\"token operator\">&lt;</span>Byte<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> prevByte<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> byte <span class=\"token keyword\">of</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevByte <span class=\"token operator\">===</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">&amp;&amp;</span> byte <span class=\"token operator\">===</span> <span class=\"token number\">0xC2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    prevByte <span class=\"token operator\">=</span> byte<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p><code class=\"language-text\">imagemagick</code> 也提供了相应的命令行参数 <code class=\"language-text\">identify</code> 来检测 JPEG 的格式。可以用如下方法检查一个图片是否是 Progressive JPEG：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">identify -verbose input.jpg <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> Interlace</code></pre></div><p>如果输出是 <code class=\"language-text\">Interlace: None</code> 则说明不是 Progressive JPEG；否则是。</p></section>\n<section><h2>优缺点</h2><ul>\n<li>\n<p>IE8 及更低级的浏览器不支持 Progressive JPEG。</p>\n<p>这里不支持的意思是，Progressive JPEG 图片无法边加载边显示。在这些老版本浏览器中，图片需要完全加载后才能一次性显示。因为 Baseline JPEG 可以逐行从上到下显示，所以仅在这些老浏览器中，Progressive JPEG 的视觉显示效果不如 Baseline JPEG。</p>\n</li>\n<li>\n<p>使用 Progressive JPEG，用户很难清楚图片是否加载完成了。</p>\n<p>一张模糊的加载中图片，一方面可以提前告知用户大致要加载的内容从而提升用户体验，另一方面也会给不知情的用户一种图片质量非常差的第一印象，从而降低用户体验。</p>\n</li>\n<li>\n<p>Progressive JPEG 一般来说可以获得更小的体积。</p>\n<p>这是因为，相近的数据被放到一起了而不是分散在各个组里面，压缩编码的时候更容易得到较小的结果。当然，这一点并不是绝对的。经过测试，也存在一些图片（比如，小尺寸的缩略图），Baseline JPEG 的大小优于 Progressive JPEG。当然，不论哪种情况，两者的差距不会非常显著。</p>\n<blockquote>\n<p>有实验证明，在 JPEG 文件小于 10KB 的时候，使用标准型编码（Huffman 表已经被优化）的 JPEG 文件要小于使用渐变式编码的 JPEG 文件（发生概率为 75%）。当文件大于 10KB 时，渐变式编码的 JPEG 文件有 94% 的概率拥有比标准编码的文件更小的体积。</p>\n</blockquote>\n<p>（<a href=\"https://blog.csdn.net/daruisoft/article/details/19773209\">出处</a>）</p>\n</li>\n<li>\n<p>Progressive JPEG 显示需要更多 CPU 与内存。</p>\n<p>这是由于 Progressive JPEG 需要来回更新一张图片多次，因而更加耗费 CPU 资源。同时，由于图片的任意一块位置在完全加载完前都没能完成显示，这些数据都需要在内存中等待后续的处理，因此也需要更多的内存使用量。一般来说，显示图片的耗时，Progressive JPEG 是 Baseline JPEG 的 2.5 倍左右。这一点在移动设备中，可能还是需要考虑的。</p>\n<p>另外，不仅仅是显示耗时，将图片转化成 Progressive JPEG 也比较耗时（6 ～ 8 倍）。因此，照相机的默认输出格式一般都是 Baseline JPEG。</p>\n</li>\n<li>\n<p>Baseline JPEG 可以通过配合 CSS 来达到更好的显示效果。</p>\n</li>\n</ul><p>举例来说，在 Baseline JPEG 图片上加上 CSS Background，可以起到 loading 的显示效果：</p><div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.loading-cover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span>\n    <span class=\"token function\">repeating-linear-gradient</span><span class=\"token punctuation\">(</span>-45deg, #444 0, #444 80px, #333 80px, #333 160px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> gradient-move 2.5s linear 0s infinite<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 816px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 590px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> -1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 590px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 590px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> gradient-move</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">0%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-226px, 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">100%</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>0, 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loading-cover<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>src-here<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>alt<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div><p>例子：</p><div style=\"overflow:hidden;width:742px;height:500px;position:relative;\">\n  <style>\n    @keyframes gradient-move {\n      0% {\n        transform: translate(-226px, 0);\n      }\n      100% {\n        transform: translate(0, 0);\n      }\n    }\n  </style>\n  <div style=\"background:repeating-linear-gradient(-45deg,#444 0,#444 80px,#333 80px,#333 160px);animation:gradient-move 2.5s linear 0s infinite;width:967px;height:500px;position:absolute;z-index:-1;top:0\"></div>\n  <img src=\"../../baseline-jpeg-demo.jpeg\" style=\"width:742px;height:500px;margin:0\" id=\"demo\" />\n</div><p>Firework, light, dark and night HD photo by Jez Timms (<a href=\"https://unsplash.com/@jeztimms\">@jeztimms</a>) on Unsplash. (<a href=\"https://unsplash.com/photos/r4lM2v9M84Q\">Source</a>)</p><p>在 Baseline JPEG 没有加载完成的部分，后面的 loading 背景会显示出来。背景可以是一个背景色，也可以是一个简单的 SVG，一个 loading 动画或者一个极小的缩略图。可以通过 Chrome DevTool 里，disable cache 并刷新页面来查看上例加载中的效果。</p></section>\n<section><h2>How it works</h2><p>JPEG 图片的压缩原理是，使用离散余弦变换（Discrete Cosine Transform, DCT）将像素数据，按每 8x8 像素（共 64 个像素点）一组进行变换。变换后的矩阵，左上角的系数称为 DC 系数，是所有像素的平均值（不带有频率信息），其余的是 AC 系数，按低频到高频分布，保存了从全局到细节的图片信息。经过了这样的变换之后，JPEG 就可以进行有损压缩了。当压缩后的结果只保留了低频的全局信息，而去除了高频的细节信息，那么最终的图片大小就会减少。一定范围的高频信息丢失并不会在视觉上造成影响，JPEG 压缩因而被广泛使用。</p><p>传统的 Baseline JPEG 是按分组一次记录图片信息的，因而加载的过程中，也是从上到下，从左往右依次显示出每一组的像素内容。而 Progressive JPEG 的改进之处在于对这里的数据存储顺序做了调整。首先加载的是 DC 系数（也就是一组像素的平均值），然后再依次加载低频数据，最后再加载高频数据。从视觉上看，就会先出现一个较为模糊的图片（此时每一组的像素都被填充为平均值），然后再加载低频数据后，慢慢补充图片细节，最终待高频数据加载完毕形成最终的显示结果。这也意味着，一张图片的显示可能需要来回更新好几遍，每一遍称为一个 <code class=\"language-text\">scan</code>。一般来说，一张 Progressive JPEG 图片可能需要来回更新十次左右。</p><section><h3>计算 scan 的方式</h3><p>根据 <a href=\"https://en.wikipedia.org/wiki/JPEG\">WIKI</a> 的介绍，字节流中的 <code class=\"language-text\">0xFF</code> 和 <code class=\"language-text\">0xDA</code> 表示一个 <code class=\"language-text\">scan</code> 的开始。要计算一张图片中有多少 <code class=\"language-text\">scan</code>，可以参考下面的代码：</p><div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getScanOfJPEG</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">:</span> Buffer<span class=\"token operator\">&lt;</span>Byte<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> count<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> prevByte<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> byte <span class=\"token keyword\">of</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevByte <span class=\"token operator\">===</span> <span class=\"token number\">0xFF</span> <span class=\"token operator\">&amp;&amp;</span> byte <span class=\"token operator\">===</span> <span class=\"token number\">0xDA</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    prevByte <span class=\"token operator\">=</span> byte<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section></section>","frontmatter":{"title":"Baseline & Progressive JPEG","date":"2019-03-13","modified":"2019-03-13","description":"主要介绍了 Web 中使用 Baseline 和 Progressive JPEG 的特点以及图片间的转化方式"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/baseline-and-progressive-jpeg/","previous":{"fields":{"slug":"/integrity-and-fetch/","type":"blog"},"frontmatter":{"title":"integrity & fetch","category":"Web","tags":"JavaScript, Web"}},"next":{"fields":{"slug":"/html5-and-furigana/","type":"blog"},"frontmatter":{"title":"Html5 的旁注标记","category":"Web","tags":"Web"}}}}