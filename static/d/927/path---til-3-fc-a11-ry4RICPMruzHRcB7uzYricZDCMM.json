{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"4252565c-e343-5338-8284-9d89fe806fa2","html":"<p>在 HTML 中，如果一个 <code class=\"language-text\">a</code> 标签，带上了 <code class=\"language-text\">download</code> 的属性，链接地址就会被浏览器直接用于下载。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link_here<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">download</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filename.suffix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"date":"2019-05-10","title":"download third party resource","category":"JavaScript"}}},{"node":{"id":"8fd27234-ec29-5aa3-893d-0976d8cd498d","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', reason: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。</p>\n<p>和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>\n<p>需要注意的是，返回的结果是一个数组，其中的每一个元素都是一个对象。其中，每个对象都有 <code class=\"language-text\">status</code> 的字段，表示对应的 Promise 最终的结果是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code>。如果是 <code class=\"language-text\">fulfilled</code> 状态，那么对象会有 <code class=\"language-text\">value</code> 字段，值相当于 <code class=\"language-text\">.then</code> 回调中的第一个参数；如果是 <code class=\"language-text\">rejected</code> 状态，那么对象会有 <code class=\"language-text\">reason</code> 字段，值相当于 <code class=\"language-text\">.catch</code> 回调中的第一个参数。</p>","frontmatter":{"date":"2019-05-09","title":"Promise.allSettled","category":"JavaScript"}}},{"node":{"id":"4c97e58a-96d7-5693-967e-f1dcdd60ff3a","html":"<p>在 Node.js 中，<code class=\"language-text\">utils</code> 提供了 <code class=\"language-text\">debuglog</code> 模块可以用于调试信息的输出。默认情况下，<code class=\"language-text\">debuglog</code> 的内容是不会输出的，只有当 <code class=\"language-text\">NODE_DEBUG</code> 这个环境变量设置了合适的值，输出才会显示。这样，调试信息不会影响正常的使用，同时也依然保留了调试的需求。</p>\n<p>具体的使用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> debuglog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world: [%d]'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子中，如果直接运行，是不会包含 <code class=\"language-text\">hello world: 1</code> 的输出的。如果设置 <code class=\"language-text\">NODE_DEBUG</code> 为 <code class=\"language-text\">name</code>（也就是 <code class=\"language-text\">debuglog</code> 函数调用时设置的值），那么再次运行，<code class=\"language-text\">hello world: 1</code> 就会输出了。</p>\n<p>同时，可以用逗号分隔的方式一次性为 <code class=\"language-text\">NODE_DEBUG</code> 设置多个值，比如：<code class=\"language-text\">NODE_DEBUG=foo,bar</code>。</p>\n<p>在 Mac 下，一次性设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NODE_DEBUG<span class=\"token operator\">=</span>name node ./index.js</code></pre></div>\n<p>在 Windows 下（Powershell），设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:NODE_DEBUG=<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span> node <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>设置完成之后，<code class=\"language-text\">NODE_DEBUG</code> 会一直保留着，直到 powershell 被关闭。需要删掉原先设置的 <code class=\"language-text\">NODE_DEBUG</code>，可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Item</span> env:\\NODE_DEBUG</code></pre></div>","frontmatter":{"date":"2019-05-08","title":"debuglog in node.js","category":"Node.js"}}},{"node":{"id":"cb2ee3f5-4828-5952-adb7-06c9ba605143","html":"<p>浏览器显示 Notification 默认是有一个自动消失时间的。不同的浏览器，这里的消失时间并不一致，从测试来看：</p>\n<ul>\n<li>Chrome: ~6s</li>\n<li>Firefox: ~19s</li>\n<li>Edge: ~6s</li>\n</ul>\n<p>从目前浏览器公开的 API 来看，并没有一个接口可以直观的修改这里的消失时间。一个可行的解决方案是：用 <code class=\"language-text\">requireInteraction</code> 来强制要求浏览器不自动关闭 Notification，然后设置 <code class=\"language-text\">setTimeout</code> 并在合适的时机手动关闭这个显示的 Notification。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nNotification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Hi! \"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        requireInteraction<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      notification<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目前 <code class=\"language-text\">requireInteraction</code> 的浏览器支持情况并不非常理想，只有 Chrome, Edge(17+) 和 Opera 做了支持。具体的支持列表，可以看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notification/requireInteraction\">这里</a>。</p>\n<p>另外，从实际的使用上来看，Edge 浏览器中即使设置了 <code class=\"language-text\">requireInteraction</code>，notification 在一定时间之后也会消失，只是消失的时间会比原来默认的情况要长一些，大约是 25 秒。Chrome 的 Notification 如果设置了 <code class=\"language-text\">requireInteraction</code>，会多一个 Close 的按钮，展示效果和没有 <code class=\"language-text\">requireInteraction</code> 的情况有所不同。</p>","frontmatter":{"date":"2019-05-07","title":"custom display time of notification","category":"JavaScript"}}},{"node":{"id":"a00692f1-010c-5b22-8079-378695212e48","html":"<p>Electron 默认是没有右键支持的，右键点击也不会有效果。为了能够提供一些右键的行为，需要在合适的时间点，手动构造菜单并显示出来。</p>\n<p>这里对右键点击的判断，如果放在 render 层用 JavaScript 去监听 <code class=\"language-text\">contextmenu</code> 事件，虽然可以从 <code class=\"language-text\">event.target</code> 上拿到元素，但是要判断当前选择的位置、能否选择/黏贴、是否有拼写错误的单词等，都比较困难，很容易写出问题来。</p>\n<p>Electron 暴露了 Chromium 的数据，在 WebContents 中增加了 <code class=\"language-text\">context-menu</code> 的事件。在这个事件的回调函数中，提供了很多的数据，能够帮助更好的了解当前的右键点击状态，从而更好地显示右键菜单项。</p>\n<p><code class=\"language-text\">context-menu</code> 的文档见<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">这里</a>。</p>\n<p>这个功能提交的 Pull Request 见 <a href=\"https://github.com/electron/electron/pull/5379\">#5379</a>。</p>\n<p>在 <code class=\"language-text\">context-menu</code> 的回调函数中，第二个参数提供了非常多有用的数据，比如：</p>\n<ul>\n<li>selectionText - 选中的文字</li>\n<li>misspelledWord - 当前的拼写错误单词（如果没有拼写错误，这里的返回是空字符串）</li>\n<li>editFlags - 包含了 <code class=\"language-text\">canCut</code>, <code class=\"language-text\">canCopy</code>, <code class=\"language-text\">canPaste</code>, <code class=\"language-text\">canSelectAll</code> 等各式布尔值，用于表示当前右键的位置是否允许剪切/复制/黏贴/全选等操作。完整的列表可以参考<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">文档</a>。</li>\n</ul>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> remote<span class=\"token punctuation\">,</span> Menu <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webContents <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> suggestions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>suggestion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      label<span class=\"token punctuation\">:</span> suggestion<span class=\"token punctuation\">,</span>\n      click<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        webContents<span class=\"token punctuation\">.</span><span class=\"token function\">replaceMisspelling</span><span class=\"token punctuation\">(</span>suggestion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'separator'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwebContents<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'context-menu'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canCut<span class=\"token punctuation\">,</span> canCopy<span class=\"token punctuation\">,</span> canPaste<span class=\"token punctuation\">,</span> canSelectAll <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>editFlags<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> misspelledWord <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// use your own function of `getCorrections`</span>\n  <span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> <span class=\"token function\">getCorrections</span><span class=\"token punctuation\">(</span>misspelledWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> menuConfig <span class=\"token operator\">=</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Cut'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'cut'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCut <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Copy'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCopy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Paste'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'paste'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canPaste <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Select All'</span><span class=\"token punctuation\">,</span>\n        enabled<span class=\"token punctuation\">:</span> canSelectAll<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// role: 'selectAll'</span>\n        <span class=\"token comment\">// following shows an example of how to manually call the API</span>\n        click<span class=\"token punctuation\">:</span> webContents<span class=\"token punctuation\">.</span>selectAll<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span>Menu<span class=\"token punctuation\">.</span><span class=\"token function\">buildFromTemplate</span><span class=\"token punctuation\">(</span>menuConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  menu<span class=\"token punctuation\">.</span><span class=\"token function\">popup</span><span class=\"token punctuation\">(</span>remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-06","title":"context menu of electron","category":"Electron"}}},{"node":{"id":"0890d56d-67dc-5bef-bceb-d325488f640d","html":"<p><code class=\"language-text\">style</code> 本身是一个标准的 HTML 标签，在里面写的 CSS 样式，会被应用到页面上。同时，作为一个 HTML 标签，<code class=\"language-text\">style</code> 本身也可以被赋予一定的展示样式（比如将默认的 <code class=\"language-text\">style { display: none; }</code> 给覆盖掉）。加上 <code class=\"language-text\">contenteditable</code> 的属性，就会得到一个可编写的 <code class=\"language-text\">style</code> 标签。通过直接编写其中的 CSS 样式，页面会自动更新，展示应用样式后的效果。</p>\n<style>\n\n.editable-style-indicator {\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  margin-left: 3px;\n  background-color: #e65525;\n  box-shadow: 0 0 0 3px #e78267;\n}\n.editable-style-indicator:hover + style.editable-style,\nstyle.editable-style:focus,\nstyle.editable-style:hover {\n  display: block;\n  min-height: 5rem;\n  max-height: 10rem;\n  overflow: auto;\n  margin-top: -23px;\n  background-color: #ccc;\n}\n</style>\n<p></p>\n<div class=\"editable-style-indicator\"></div>\n<style contenteditable class=\"editable-style\"></style>\n<p></p>\n<p>上面展示的这个圆点，鼠标悬停之后，就会显示一个可输入的框。在里面输入一些 CSS 可以看到对页面元素的修改。比如，可以试试输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article small:nth-child(3)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #007acc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>几点注意：</p>\n<ol>\n<li>直接复制上面的 CSS 然后黏贴不会起效，因为样式也被黏贴到 <code class=\"language-text\">style</code> 里面去了，这会导致 <code class=\"language-text\">style</code> 里的内容不是合法的 CSS，无法应用样式</li>\n<li>CSS 需要写在一行里面，回车会导致插入 <code class=\"language-text\">&lt;br /&gt;</code>，同样会导致 CSS 语法错误，无法应用样式</li>\n</ol>","frontmatter":{"date":"2019-05-05","title":"contenteditable style","category":"JavaScript"}}},{"node":{"id":"5bd484fa-33b3-5f27-8937-98c787d17543","html":"<p>传统的 CSS filter，可以对当前的元素应用指定的滤镜。以模糊（blur）滤镜为例，常常会被拿来实现毛玻璃的效果。然而，因为滤镜只能应用于元素自身，所以毛玻璃的效果也是局限性很大的。一个常见的做法是，背景图片在当前元素中用 background-image 的方式再赋值一次，然后通过定位对齐，再加上 blur 的效果。这样看上去，中间一块的图片就好像有了模糊的效果。</p>\n<p>一个例子：</p>\n<style>\n.container {\n  width: 620px;\n  height: 414px;\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  position: relative;\n  margin: 0 auto;\n}\n.filter {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 310px;\n  height: 207px;\n}\n@supports (-webkit-backdrop-filter: blur(10px)) or (-webkit-backdrop-filter: sepia() hue-rotate(120deg)) {\n  span.not-supported {\n    display: none;\n  }\n}\n</style>\n<p>\n  <div class=\"filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.filter-container .filter {\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  background-position: -155px -103.5px;\n  filter: sepia() hue-rotate(120deg);\n}\n.filter-container .filter:hover {\n  filter: blur(10px);\n}\n</style>\n<p>HTML 结构是：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS 是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 620px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%, -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 310px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 207px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -155px -103.5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，显然这样的局限性是很大的。css backdrop filter 就是为了打破这种局限性。有了 css backdrop filter，当前元素的滤镜会加到当前元素下面的所有元素上，而不仅仅是自身的元素。</p>\n<p>上面例子的改写<span class=\"not-supported\">（注意：当前浏览器不支持 backdrop-filter 功能）</span>：</p>\n<p>\n  <div class=\"backdrop-filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.backdrop-filter-container .filter {\n  -webkit-backdrop-filter: sepia() hue-rotate(120deg);\n}\n.backdrop-filter-container .filter:hover {\n  -webkit-backdrop-filter: blur(10px);\n}\n</style>\n<p>HTML 保持不变，CSS 改动为：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，需要加 filter 的部分，没有做额外特殊的处理（比如背景图片的配适），就可以直接使用。简洁明了。</p>\n<p>另外，鼠标悬停之后可以看到模糊效果的展示。使用 filter 和使用 backdrop-filter 的展示效果也是略有不同的。主要是，用 filter 这种方案，背后还是有图片的，所以当前景图片模糊之后，边缘部分，后面背景的图片会显示出来，效果有折扣。（如果需要处理，简单的做法是，加大 blur 元素的宽高，然后用 <code class=\"language-text\">overflow:hidden</code> 把整体显示出来的大小限定回原来需要的大小，这样边缘部分相当于被裁剪了）</p>\n<p>当然，css backdrop filter 目前的支持还非常有限。除了 Safari 和 Edge，基本没有浏览器支持。具体可以看 <a href=\"https://caniuse.com/#feat=css-backdrop-filter\">Caniuse</a>。</p>\n<p>在 Electron 中，可以通过下面的方法让打开 backdrop-filter 的支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webPreferences<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    enableBlinkFeatures<span class=\"token punctuation\">:</span> <span class=\"token string\">'CSSBackdropFilter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chrome 对 backdrop filter 的支持进展可以看这个 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=520585\">Issue</a></p>","frontmatter":{"date":"2019-05-04","title":"css backdrop filter","category":"CSS"}}},{"node":{"id":"9ebfbed8-1960-5592-afaa-4ad983213be5","html":"<p>如果拿到了一份带有 source map 的 JavaScript 代码，那么理论上就可以通过这份 source map 去尽可能的还原出原始的文件内容。</p>\n<p>首先，source map 本质上是一个 JSON 文件。在其中，<code class=\"language-text\">sourceContent</code> 数组就记录了所有源文件的纯文本内容，而这些文件的文件路径及文件名则存放在了 <code class=\"language-text\">sources</code> 数组中。两者相互对应，理论上来说参照这两者的数据，就可以将源文件还原到原始的目录下。</p>\n<p>然而，Webpack 的打包结果，文件的路径名称都带上了 <code class=\"language-text\">webpack:///</code> 的前缀。在实际处理的过程中，可以直接使用已有的库，比如 <a href=\"https://github.com/alexkuz/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个库因为已经比较老了，对 Webpack 3/4 等新版本的支持存在问题。在原库合并 PR 之前，可以先使用改进过的版本 <a href=\"https://github.com/laysent/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个修改过的版本，除了修复对新版 Webpack 编译结果的支持外，也加入了 glob 的支持，可以更方便的进行批量 source map 还原。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">restore-source-tree -o output_folder path/to/source-maps/*.map</code></pre></div>\n<p>最终生成的文件会存放在 output_folder 下。</p>","frontmatter":{"date":"2019-05-03","title":"restore source map","category":"JavaScript"}}},{"node":{"id":"da7a5303-aa58-5ca2-83b5-f6be73c62cc6","html":"<p>React 的渲染过程中，使用了 VNode 来表示一个组件树。虽然最终 virtual DOM 会被翻译成真实的 DOM tree，但是在之前，选择了使用 VNode 而不是真实的 DOM，能想到的有几个原因：</p>\n<ol>\n<li>React 不仅仅只是为浏览器环境准备的，所以运行环境中并不一定存在真实的 DOM。virtual dom 只使用了 JavaScript 中的对象，这个在所有的 JavaScript 运行环境里都是支持且可以直接使用的。也正因为如此，React 和 ReactDOM 才是两个独立的库，DOM 相关的内容只存在于 ReactDOM 中。对于不使用 DOM 的 React 方案，在手机端有 React Native，在 Console 中有 ink。</li>\n<li>自定义组件没有办法直接用 DOM 的元素来表示。虽然最终，自定义组件肯定会表示成一颗 DOM 树，但是在渲染的过程中，shouldComponentUpdate 可能就会插手让渲染不必进行下去了。此时，只用中间的自定义组件，还没有运行到真实的 DOM 结构。此时，用 virtual dom 的抽象表示是更合适的。</li>\n<li>创建 VNode 的速度要显著的快于创建 DOM node 的速度。因为 VNode 最终不一定要转化为 DOM（比如最终发现不需要修改），如果直接生成 DOM node，可能反而浪费了。VNode 只是一个 object，创建的速度比 DOM 要快得多。</li>\n</ol>\n<p>当然，需要说明的是，VNode 只是创建的速度比 DOM 要快很多。但这不代表使用 virtual dom 的渲染方案本身比直接操纵 DOM 树来的快。事实上，如果能够根据业务需求去手动的操作每一个 DOM 的节点，达到的最终效果肯定要好于用 React 库实现的统一解决方案。</p>","frontmatter":{"date":"2019-05-03","title":"why virtual dom","category":"JavaScript"}}},{"node":{"id":"dab8bde4-4838-5442-9404-2cd65df85c0b","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">https://mathiasbynens.be/notes/globalthis</a></p>","frontmatter":{"date":"2019-05-03","title":"polyfill of globalThis","category":"JavaScript"}}}]}},"pageContext":{}}