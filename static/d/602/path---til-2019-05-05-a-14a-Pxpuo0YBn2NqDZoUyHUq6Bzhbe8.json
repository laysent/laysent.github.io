{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"d9f840d3-32b9-5328-847d-b341496425b1","html":"<p><a href=\"https://mathiasbynens.be/notes/globalthis\">check this</a></p>","frontmatter":{"date":"2019-05-28","title":"polyfill of globalThis","category":"JavaScript"}}},{"node":{"id":"512cb94e-c7d2-5e4e-9007-734f0a02e014","html":"<p><code class=\"language-text\">prefers-color-scheme</code> 这个 Media Query 可以用于检测当前的操作系统是否选择了 Dark Mode。这是一个依然处于初始草案阶段的功能（见 <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\">Draft</a>），不过 Safari (12.1) / Chrome (76) / Firefox (67) 的最新版本都已经做了支持。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-color-scheme</span><span class=\"token punctuation\">:</span> dark<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">:not(pre) > code[class*=\"language-\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255,229,100,0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是一个可编辑的 CSS 代码，可以直接试一试：</p>\n<style>\nstyle.editable-style {\n  display: block;\n}\n</style>\n<p></p>\n<div class=\"gatsby-highlight\" style=\"border:1px solid red\">\n<pre class=\"language-css\"><code class=\"language-css\"><style contenteditable class=\"editable-style\">@media (prefers-color-scheme: dark) { body { /* try here */ } }</style></code></pre>\n</div>\n<p></p>\n<p>注：上面这段代码是可改的，修改后的 CSS 会直接生效。但是由于 <code class=\"language-text\">contenteditable</code> 的限制，所有代码需要在一行内完成。</p>\n<p>除了 <code class=\"language-text\">dark</code> 之外，<code class=\"language-text\">prefers-color-scheme</code> 可以接受的属性还有 <code class=\"language-text\">light</code> 和 <code class=\"language-text\">no-preference</code> 两种。其中，<code class=\"language-text\">light</code> 表示用户选择的是 Light 模式，<code class=\"language-text\">no-preference</code> 表示用户并没有做选择。</p>\n<p>在 JavaScript 中，也可以通过下面的代码来判断当前是否是 Dark Mode：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ifDarkMode <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: dark)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注：从当前的实验结果来看，<code class=\"language-text\">matchMedia</code> 的结果用 <code class=\"language-text\">.addListener</code> 注册回调事件并不能生效（Safari 12 测试）。</p>\n<p>如果图片的展示也需要区分，<code class=\"language-text\">mediaQuery</code> 也可以帮上忙：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-night.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(prefers-color-scheme: dark)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-day.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"date":"2019-05-24","title":"CSS for Dark Mode","category":"CSS"}}},{"node":{"id":"65a57f39-897b-571a-8f12-e135c164b160","html":"<p>一直以来，<a href=\"\">rxjs</a> 和 <a href=\"\">react</a> 都不太搭，要在 React 中使用 rxjs 往往需要写并不怎么优雅的代码，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> initial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value$\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Example value$<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>LeetCode 提供的 <a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks\">rxjs-hooks</a> 提供了一个更为优雅的解决方案：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> props<span class=\"token punctuation\">.</span>value$<span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-23","title":"rxjs and hooks","category":"JavaScript"}}},{"node":{"id":"f4dcf12a-ef0f-573f-94cc-1f79b8ff30c1","html":"<p>如果需要对目录下文件的占用空间做排序，可以使用下面的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> -d 3 -k <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -h</code></pre></div>\n<p>其中，<code class=\"language-text\">du -d 3</code> 表示，最多显示三层子目录，<code class=\"language-text\">-k</code> 会让输出以 <code class=\"language-text\">KB</code> 作为单位。<code class=\"language-text\">sort -h</code> 会对结果进行排序，排序的依据是文件夹的大小。这里，排序需要带上 <code class=\"language-text\">-h</code> 的标识位，不然以字符串进行排序的话，输出没有意义（比如，100 会排在 9 的前面）。</p>","frontmatter":{"date":"2019-05-22","title":"Disk Usage of Folder","category":"Bash"}}},{"node":{"id":"9080b3e5-21eb-5560-a0f4-842f647be8cd","html":"<p>假设有一个 TypeScript 的类型是：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  str<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以下这个 TypeScript 的定义，可以用于将 <code class=\"language-text\">T</code> 中函数的部分抽离出来，形成新的类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最终，新类型的定义如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Example<span class=\"token punctuation\">,</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span>Example<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>等价于：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Equivalent</span> <span class=\"token punctuation\">{</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-05-21","title":"Extract all function properties from given type","category":"TypeScript"}}},{"node":{"id":"a01f748d-84ef-59bf-82fc-9d0c397bd1cb","html":"<p><a href=\"https://github.com/JedWatson/classnames\">classnames</a> 库提供了一个 <code class=\"language-text\">bind</code> API，用于处理 CSS Module 的情况。</p>\n<p>在 Webpack 中用 CSS Module 的方案编译 CSS 文件，后续在 JavaScript 中 <code class=\"language-text\">import style from &#39;xxx.css&#39;;</code> 后，<code class=\"language-text\">style</code> 就是一个对象。这个对象的大体结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo-abcde'</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar-12345'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，对象的 <code class=\"language-text\">key</code> 是原始的 class name，而 <code class=\"language-text\">value</code> 则是施加 CSS Module 之后得到的唯一名称。</p>\n<p>如果直接使用 <code class=\"language-text\">classnames</code> 的标准 API，那么写起来就需要大量使用 computed property name 的语法，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classnames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>而使用 <code class=\"language-text\">bind</code> API，可以事先告知 <code class=\"language-text\">classnames</code> class name 的对应关系（通过指定 <code class=\"language-text\">this</code>），后续只需要使用字符串，<code class=\"language-text\">classnames</code> 就可以自动使用合适的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames/bind'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// result in: className=\"foo-abcde\"</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-20","title":"classnames & css module","category":"JavaScript"}}},{"node":{"id":"347109b1-e38c-563c-ad5d-89dd7b26b099","html":"<p>对于有多个 Git 仓库的情况，不同的仓库可能需要配置不同的用户信息。</p>\n<p>一种麻烦的方案是，每个仓库都配置一个本地的 Git 配置，不使用全局的设置，就不会有问题。但是这样配置非常的麻烦，也容易忘。Git 提供了配置覆盖的功能，可以指定某一子目录，使用另外一个指定的 Git 配置覆盖默认的全剧配置。</p>\n<p>如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[includeIf &quot;gitdir:~/work/github/&quot;]\n    path = ~/work/github/.gitconfig</code></pre></div>\n<p>这个配置指定了在 <code class=\"language-text\">~/work/github/</code> 目录下，除了全局的 <code class=\"language-text\">.gitconfig</code> 文件之外，读取 <code class=\"language-text\">~/work/github/.gitconfig</code> 文件对配置进行覆盖改写。在 <code class=\"language-text\">~/work/github/.gitconfig</code> 的优先级高于 <code class=\"language-text\">~/.gitconfig</code> 的配置，会优先使用，没有定义的部分才会去全局中找。</p>","frontmatter":{"date":"2019-05-19","title":"Multiple Git Configuration","category":"Git"}}},{"node":{"id":"dca3a1a9-7be8-5004-b16f-40c5ea624b5c","html":"<p>下面的脚本，执行之后，可以完成 <code class=\"language-text\">git clone</code> 并 <code class=\"language-text\">cd</code> 至目标文件夹内。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  local tmp<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n  local repo_name<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">git</span> clone <span class=\"token variable\">$@</span> --progress 2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>1 <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n  repo_name<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">awk</span> -F\\<span class=\"token string\">' '</span>/Cloning into/ <span class=\"token punctuation\">{</span>print $2<span class=\"token punctuation\">}</span>' $tmp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rm</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cd</span> <span class=\"token variable\">$repo_name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nf</code></pre></div>\n<p>一些说明：</p>\n<ul>\n<li><code class=\"language-text\">mktemp</code> 可以创建一个临时文件，文件路径存放在 <code class=\"language-text\">tmp</code> 变量中</li>\n<li><code class=\"language-text\">git clone $@</code> 中的 <code class=\"language-text\">$@</code> 是执行脚本时候所有的传入参数</li>\n<li><code class=\"language-text\">---progress 2&gt;&amp;1</code> 会将 Git clone 命令的结果输出。这里，默认情况下，clone 的过程数据只有在 error stream 输出到 terminal 的时候，才会显示。因为这里的命令需要将内容通过管道输出到 <code class=\"language-text\">tmp</code> 临时文件中，所以默认情况下 Git 就不会输出过程的数据了。为了能够让 Git 输出这部分内容，需要加上 <code class=\"language-text\">--progress</code></li>\n<li><code class=\"language-text\">tee $tmp</code> 将管道的数据输出到临时文件中</li>\n<li><code class=\"language-text\">awk -F\\&#39; &#39;/Cloning into/ {print $2}&#39; $tmp</code> 的部分，会从输出的数据中，寻找 <code class=\"language-text\">Cloning into</code> 的输出，然后找到具体 clone 到了哪个文件夹中</li>\n</ul>","frontmatter":{"date":"2019-05-17","title":"Command to enter folder after git clone","category":"Git"}}},{"node":{"id":"4ee5c1e7-b1f6-51d4-97f2-c743b2309fde","html":"<p><code class=\"language-text\">Object.create</code> 可以用提供的对象做新对象的 <code class=\"language-text\">__proto__</code>。这导致了一个很有趣的现象，如果使用 <code class=\"language-text\">Object.create(null)</code> 来创建新对象，那么这个新对象上就没有任何 <code class=\"language-text\">__proto__</code>。因为 JavaScript 的对象经常被用来做字典使用，<code class=\"language-text\">Object.create(null)</code> 可以让这个功能使用更加的纯粹。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: \"undefined\"</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   constructor,</span>\n<span class=\"token comment\">//   hasOwnProperty,</span>\n<span class=\"token comment\">//   isPrototypeOf,</span>\n<span class=\"token comment\">//   propertyIsEnumerable,</span>\n<span class=\"token comment\">//   toLocaleString,</span>\n<span class=\"token comment\">//   toString,</span>\n<span class=\"token comment\">//   valueOf,</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>同样，因为没有 <code class=\"language-text\">prototype</code>，理论上来说，后续如果有人对 <code class=\"language-text\">Object.prototype</code> 做操作，也不会影响到使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\nObject<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: undefined</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> dict<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no output</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: function</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 'addSomething'</span></code></pre></div>\n<p>所以，如果判断对象有某个字段，那么一定是他自身有这个字段，而不会是因为原型链上的定义。也就是说，不需要用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">,</span> <span class=\"token string\">'addSomething'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而只需要写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这也会有一些弊端，比如默认 <code class=\"language-text\">Object.prototype</code> 的东西就没了，如果需要 <code class=\"language-text\">toString</code> 之类的函数，得自己写。</p>","frontmatter":{"date":"2019-05-16","title":"Object.create(null)","category":"JavaScript"}}},{"node":{"id":"dab8bde4-4838-5442-9404-2cd65df85c0b","html":"<p>假设发现一个文件在历史版本中存在，但是当前不存在了，那么可能就需要知道是在什么时候，因为什么原因对文件做了删除。下面的命令可以一次性找出某一个文件的所有记录：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log --full-history -- <span class=\"token punctuation\">[</span>file path<span class=\"token punctuation\">]</span></code></pre></div>\n<p>如果只需要看最后一条记录（也就是被删除的那条记录），可以用：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git log --full-history -1 -- [file path]</code></pre></div>\n<p>Further Reading: [https://www.vogella.com/tutorials/Git/article.html#retrievefiles_finddeletedfile]</p>","frontmatter":{"date":"2019-05-15","title":"Deletion of file in git","category":"Git"}}},{"node":{"id":"ee70a427-5c58-512f-975a-a2ab0b185a9a","html":"<p>在 Mac 系统里面，<code class=\"language-text\">.app</code> 程序本质上就是一个目录，里面包含了很多文件。如果直接在 Terminal 输入 <code class=\"language-text\">.app</code> 的地址，会进入这个目录，而不是运行这个 App。如果需要运行，可以使用下面的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">open</span> /Application/Example.app</code></pre></div>\n<p>如果需要指定 NODE_ENV 等信息，就可以一起配合使用</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NODE_ENV<span class=\"token operator\">=</span>development <span class=\"token function\">open</span> /Application/Example.app</code></pre></div>","frontmatter":{"date":"2019-05-14","title":"Open Application in Terminal","category":"Bash"}}},{"node":{"id":"eab4ce73-53cf-5329-9cbf-8bfb8219aa5b","html":"<p>JavaScript 的 <code class=\"language-text\">performance</code> 除了常用的 <code class=\"language-text\">now</code> / <code class=\"language-text\">mark</code> 之外，也提供了和页面加载相关的很多接口。通过调用这些接口，就可以很方便的收集页面加载的相关指标，方便了解不同用户的实际体验。</p>\n<p><code class=\"language-text\">perfomance.getEntries</code> 返回的数据，有三种类型：<code class=\"language-text\">navigation</code>，<code class=\"language-text\">resource</code>，<code class=\"language-text\">paint</code>。</p>\n<p>其中，<code class=\"language-text\">navigation</code> 包含了 <code class=\"language-text\">PerformanceNavigationTiming</code>，里面记录了和页面导航相关的时间信息，比如 connection 的起始/结束时间等。可以通过下面的代码拿到完整的数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// connectEnd: xxx</span>\n<span class=\"token comment\">// connectStart: xxx</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">resource</code> 包含了所有的 <code class=\"language-text\">PerformanceResourceTiming</code>。每一个资源的请求，对应一个 <code class=\"language-text\">PerformanceResourceTiming</code>。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> duration <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`resource: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> use </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>duration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> milliseconds to load`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// resource: https://xxxx use xxx milliseconds to load</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">paint</code> 包含了所有的 <code class=\"language-text\">PerformancePaintTiming</code>。一共有两个，分别是 first-paint 和 first-contentful-paint。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> startTime <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, startTime: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// first-paint: xxxx</span>\n  <span class=\"token comment\">// first-contentful-paint: xxx</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-13","title":"performance data via JavaScript","category":"JavaScript"}}},{"node":{"id":"24969b25-50ce-5bf5-9ae4-090677bc911e","html":"<p>React 的渲染过程中，使用了 VNode 来表示一个组件树。虽然最终 virtual DOM 会被翻译成真实的 DOM tree，但是在之前，选择了使用 VNode 而不是真实的 DOM，能想到的有几个原因：</p>\n<ol>\n<li>React 不仅仅只是为浏览器环境准备的，所以运行环境中并不一定存在真实的 DOM。virtual dom 只使用了 JavaScript 中的对象，这个在所有的 JavaScript 运行环境里都是支持且可以直接使用的。也正因为如此，React 和 ReactDOM 才是两个独立的库，DOM 相关的内容只存在于 ReactDOM 中。对于不使用 DOM 的 React 方案，在手机端有 React Native，在 Console 中有 ink。</li>\n<li>自定义组件没有办法直接用 DOM 的元素来表示。虽然最终，自定义组件肯定会表示成一颗 DOM 树，但是在渲染的过程中，shouldComponentUpdate 可能就会插手让渲染不必进行下去了。此时，只用中间的自定义组件，还没有运行到真实的 DOM 结构。此时，用 virtual dom 的抽象表示是更合适的。</li>\n<li>创建 VNode 的速度要显著的快于创建 DOM node 的速度。因为 VNode 最终不一定要转化为 DOM（比如最终发现不需要修改），如果直接生成 DOM node，可能反而浪费了。VNode 只是一个 object，创建的速度比 DOM 要快得多。</li>\n</ol>\n<p>当然，需要说明的是，VNode 只是创建的速度比 DOM 要快很多。但这不代表使用 virtual dom 的渲染方案本身比直接操纵 DOM 树来的快。事实上，如果能够根据业务需求去手动的操作每一个 DOM 的节点，达到的最终效果肯定要好于用 React 库实现的统一解决方案。</p>","frontmatter":{"date":"2019-05-11","title":"why virtual dom","category":"JavaScript"}}},{"node":{"id":"4252565c-e343-5338-8284-9d89fe806fa2","html":"<p>在 HTML 中，如果一个 <code class=\"language-text\">a</code> 标签，带上了 <code class=\"language-text\">download</code> 的属性，链接地址就会被浏览器直接用于下载。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link_here<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">download</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filename.suffix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>同样，如果需要 JavaScript 能够直接触发一个资源的下载，可以创建带 <code class=\"language-text\">download</code> 属性的 <code class=\"language-text\">a</code> 标签，然后调用这个元素的 <code class=\"language-text\">click</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'link_here'</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger download</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">download</code> 的支持情况见<a href=\"https://caniuse.com/download/embed\">这里</a>。</p>\n<p>这个方案有一个问题：如果是跨域的资源，直接这样的 <code class=\"language-text\">a</code> 标签点击是不能调用下载的（因为执行了严格的同源策略），行为上就会和一个普通的导航没有区别（比如，增加 <code class=\"language-text\">target=_blank</code> 之后就会打开一个新窗口展示资源）。</p>\n<p>解决跨域的一个前端方案是：fetch 资源，然后将结果转化成 Blob，然后将这个 Blob 生成一个 URL。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link_here'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>repsonse <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>blob <span class=\"token operator\">=></span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> link<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename.here'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-10","title":"download third party resource","category":"JavaScript"}}},{"node":{"id":"8fd27234-ec29-5aa3-893d-0976d8cd498d","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', reason: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。</p>\n<p>和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>\n<p>需要注意的是，返回的结果是一个数组，其中的每一个元素都是一个对象。其中，每个对象都有 <code class=\"language-text\">status</code> 的字段，表示对应的 Promise 最终的结果是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code>。如果是 <code class=\"language-text\">fulfilled</code> 状态，那么对象会有 <code class=\"language-text\">value</code> 字段，值相当于 <code class=\"language-text\">.then</code> 回调中的第一个参数；如果是 <code class=\"language-text\">rejected</code> 状态，那么对象会有 <code class=\"language-text\">reason</code> 字段，值相当于 <code class=\"language-text\">.catch</code> 回调中的第一个参数。</p>","frontmatter":{"date":"2019-05-09","title":"Promise.allSettled","category":"JavaScript"}}},{"node":{"id":"4c97e58a-96d7-5693-967e-f1dcdd60ff3a","html":"<p>在 Node.js 中，<code class=\"language-text\">utils</code> 提供了 <code class=\"language-text\">debuglog</code> 模块可以用于调试信息的输出。默认情况下，<code class=\"language-text\">debuglog</code> 的内容是不会输出的，只有当 <code class=\"language-text\">NODE_DEBUG</code> 这个环境变量设置了合适的值，输出才会显示。这样，调试信息不会影响正常的使用，同时也依然保留了调试的需求。</p>\n<p>具体的使用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> debuglog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world: [%d]'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子中，如果直接运行，是不会包含 <code class=\"language-text\">hello world: 1</code> 的输出的。如果设置 <code class=\"language-text\">NODE_DEBUG</code> 为 <code class=\"language-text\">name</code>（也就是 <code class=\"language-text\">debuglog</code> 函数调用时设置的值），那么再次运行，<code class=\"language-text\">hello world: 1</code> 就会输出了。</p>\n<p>同时，可以用逗号分隔的方式一次性为 <code class=\"language-text\">NODE_DEBUG</code> 设置多个值，比如：<code class=\"language-text\">NODE_DEBUG=foo,bar</code>。</p>\n<p>在 Mac 下，一次性设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NODE_DEBUG<span class=\"token operator\">=</span>name node ./index.js</code></pre></div>\n<p>在 Windows 下（Powershell），设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:NODE_DEBUG=<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span> node <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>设置完成之后，<code class=\"language-text\">NODE_DEBUG</code> 会一直保留着，直到 powershell 被关闭。需要删掉原先设置的 <code class=\"language-text\">NODE_DEBUG</code>，可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Item</span> env:\\NODE_DEBUG</code></pre></div>","frontmatter":{"date":"2019-05-08","title":"debuglog in node.js","category":"Node.js"}}},{"node":{"id":"cb2ee3f5-4828-5952-adb7-06c9ba605143","html":"<p>浏览器显示 Notification 默认是有一个自动消失时间的。不同的浏览器，这里的消失时间并不一致，从测试来看：</p>\n<ul>\n<li>Chrome: ~6s</li>\n<li>Firefox: ~19s</li>\n<li>Edge: ~6s</li>\n</ul>\n<p>从目前浏览器公开的 API 来看，并没有一个接口可以直观的修改这里的消失时间。一个可行的解决方案是：用 <code class=\"language-text\">requireInteraction</code> 来强制要求浏览器不自动关闭 Notification，然后设置 <code class=\"language-text\">setTimeout</code> 并在合适的时机手动关闭这个显示的 Notification。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nNotification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Hi! \"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        requireInteraction<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      notification<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目前 <code class=\"language-text\">requireInteraction</code> 的浏览器支持情况并不非常理想，只有 Chrome, Edge(17+) 和 Opera 做了支持。具体的支持列表，可以看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notification/requireInteraction\">这里</a>。</p>\n<p>另外，从实际的使用上来看，Edge 浏览器中即使设置了 <code class=\"language-text\">requireInteraction</code>，notification 在一定时间之后也会消失，只是消失的时间会比原来默认的情况要长一些，大约是 25 秒。Chrome 的 Notification 如果设置了 <code class=\"language-text\">requireInteraction</code>，会多一个 Close 的按钮，展示效果和没有 <code class=\"language-text\">requireInteraction</code> 的情况有所不同。</p>","frontmatter":{"date":"2019-05-07","title":"custom display time of notification","category":"JavaScript"}}},{"node":{"id":"a00692f1-010c-5b22-8079-378695212e48","html":"<p>Electron 默认是没有右键支持的，右键点击也不会有效果。为了能够提供一些右键的行为，需要在合适的时间点，手动构造菜单并显示出来。</p>\n<p>这里对右键点击的判断，如果放在 render 层用 JavaScript 去监听 <code class=\"language-text\">contextmenu</code> 事件，虽然可以从 <code class=\"language-text\">event.target</code> 上拿到元素，但是要判断当前选择的位置、能否选择/黏贴、是否有拼写错误的单词等，都比较困难，很容易写出问题来。</p>\n<p>Electron 暴露了 Chromium 的数据，在 WebContents 中增加了 <code class=\"language-text\">context-menu</code> 的事件。在这个事件的回调函数中，提供了很多的数据，能够帮助更好的了解当前的右键点击状态，从而更好地显示右键菜单项。</p>\n<p><code class=\"language-text\">context-menu</code> 的文档见<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">这里</a>。</p>\n<p>这个功能提交的 Pull Request 见 <a href=\"https://github.com/electron/electron/pull/5379\">#5379</a>。</p>\n<p>在 <code class=\"language-text\">context-menu</code> 的回调函数中，第二个参数提供了非常多有用的数据，比如：</p>\n<ul>\n<li>selectionText - 选中的文字</li>\n<li>misspelledWord - 当前的拼写错误单词（如果没有拼写错误，这里的返回是空字符串）</li>\n<li>editFlags - 包含了 <code class=\"language-text\">canCut</code>, <code class=\"language-text\">canCopy</code>, <code class=\"language-text\">canPaste</code>, <code class=\"language-text\">canSelectAll</code> 等各式布尔值，用于表示当前右键的位置是否允许剪切/复制/黏贴/全选等操作。完整的列表可以参考<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">文档</a>。</li>\n</ul>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> remote<span class=\"token punctuation\">,</span> Menu <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webContents <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> suggestions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>suggestion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      label<span class=\"token punctuation\">:</span> suggestion<span class=\"token punctuation\">,</span>\n      click<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        webContents<span class=\"token punctuation\">.</span><span class=\"token function\">replaceMisspelling</span><span class=\"token punctuation\">(</span>suggestion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'separator'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwebContents<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'context-menu'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canCut<span class=\"token punctuation\">,</span> canCopy<span class=\"token punctuation\">,</span> canPaste<span class=\"token punctuation\">,</span> canSelectAll <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>editFlags<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> misspelledWord <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// use your own function of `getCorrections`</span>\n  <span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> <span class=\"token function\">getCorrections</span><span class=\"token punctuation\">(</span>misspelledWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> menuConfig <span class=\"token operator\">=</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Cut'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'cut'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCut <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Copy'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCopy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Paste'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'paste'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canPaste <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Select All'</span><span class=\"token punctuation\">,</span>\n        enabled<span class=\"token punctuation\">:</span> canSelectAll<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// role: 'selectAll'</span>\n        <span class=\"token comment\">// following shows an example of how to manually call the API</span>\n        click<span class=\"token punctuation\">:</span> webContents<span class=\"token punctuation\">.</span>selectAll<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span>Menu<span class=\"token punctuation\">.</span><span class=\"token function\">buildFromTemplate</span><span class=\"token punctuation\">(</span>menuConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  menu<span class=\"token punctuation\">.</span><span class=\"token function\">popup</span><span class=\"token punctuation\">(</span>remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-06","title":"context menu of electron","category":"Electron"}}},{"node":{"id":"0890d56d-67dc-5bef-bceb-d325488f640d","html":"<p><code class=\"language-text\">style</code> 本身是一个标准的 HTML 标签，在里面写的 CSS 样式，会被应用到页面上。同时，作为一个 HTML 标签，<code class=\"language-text\">style</code> 本身也可以被赋予一定的展示样式（比如将默认的 <code class=\"language-text\">style { display: none; }</code> 给覆盖掉）。加上 <code class=\"language-text\">contenteditable</code> 的属性，就会得到一个可编写的 <code class=\"language-text\">style</code> 标签。通过直接编写其中的 CSS 样式，页面会自动更新，展示应用样式后的效果。</p>\n<style>\n\n.editable-style-indicator {\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  margin-left: 3px;\n  background-color: #e65525;\n  box-shadow: 0 0 0 3px #e78267;\n}\n.editable-style-indicator:hover + style.editable-style,\nstyle.editable-style:focus,\nstyle.editable-style:hover {\n  display: block;\n  min-height: 5rem;\n  max-height: 10rem;\n  overflow: auto;\n  margin-top: -23px;\n  background-color: #ccc;\n}\n</style>\n<p></p>\n<div class=\"editable-style-indicator\"></div>\n<style contenteditable class=\"editable-style\"></style>\n<p></p>\n<p>上面展示的这个圆点，鼠标悬停之后，就会显示一个可输入的框。在里面输入一些 CSS 可以看到对页面元素的修改。比如，可以试试输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article small:nth-child(3)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #007acc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>几点注意：</p>\n<ol>\n<li>直接复制上面的 CSS 然后黏贴不会起效，因为样式也被黏贴到 <code class=\"language-text\">style</code> 里面去了，这会导致 <code class=\"language-text\">style</code> 里的内容不是合法的 CSS，无法应用样式</li>\n<li>CSS 需要写在一行里面，回车会导致插入 <code class=\"language-text\">&lt;br /&gt;</code>，同样会导致 CSS 语法错误，无法应用样式</li>\n</ol>","frontmatter":{"date":"2019-05-05","title":"contenteditable style","category":"JavaScript"}}},{"node":{"id":"5bd484fa-33b3-5f27-8937-98c787d17543","html":"<p>传统的 CSS filter，可以对当前的元素应用指定的滤镜。以模糊（blur）滤镜为例，常常会被拿来实现毛玻璃的效果。然而，因为滤镜只能应用于元素自身，所以毛玻璃的效果也是局限性很大的。一个常见的做法是，背景图片在当前元素中用 background-image 的方式再赋值一次，然后通过定位对齐，再加上 blur 的效果。这样看上去，中间一块的图片就好像有了模糊的效果。</p>\n<p>一个例子：</p>\n<style>\n.container {\n  width: 620px;\n  height: 414px;\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  position: relative;\n  margin: 0 auto;\n}\n.filter {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 310px;\n  height: 207px;\n}\n@supports (-webkit-backdrop-filter: blur(10px)) or (-webkit-backdrop-filter: sepia() hue-rotate(120deg)) {\n  span.not-supported {\n    display: none;\n  }\n}\n</style>\n<p>\n  <div class=\"filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.filter-container .filter {\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  background-position: -155px -103.5px;\n  filter: sepia() hue-rotate(120deg);\n}\n.filter-container .filter:hover {\n  filter: blur(10px);\n}\n</style>\n<p>HTML 结构是：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS 是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 620px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%, -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 310px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 207px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(\"../../baseline-jpeg-demo.jpeg\")</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -155px -103.5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，显然这样的局限性是很大的。css backdrop filter 就是为了打破这种局限性。有了 css backdrop filter，当前元素的滤镜会加到当前元素下面的所有元素上，而不仅仅是自身的元素。</p>\n<p>上面例子的改写<span class=\"not-supported\">（注意：当前浏览器不支持 backdrop-filter 功能）</span>：</p>\n<p>\n  <div class=\"backdrop-filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.backdrop-filter-container .filter {\n  -webkit-backdrop-filter: sepia() hue-rotate(120deg);\n}\n.backdrop-filter-container .filter:hover {\n  -webkit-backdrop-filter: blur(10px);\n}\n</style>\n<p>HTML 保持不变，CSS 改动为：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，需要加 filter 的部分，没有做额外特殊的处理（比如背景图片的配适），就可以直接使用。简洁明了。</p>\n<p>另外，鼠标悬停之后可以看到模糊效果的展示。使用 filter 和使用 backdrop-filter 的展示效果也是略有不同的。主要是，用 filter 这种方案，背后还是有图片的，所以当前景图片模糊之后，边缘部分，后面背景的图片会显示出来，效果有折扣。（如果需要处理，简单的做法是，加大 blur 元素的宽高，然后用 <code class=\"language-text\">overflow:hidden</code> 把整体显示出来的大小限定回原来需要的大小，这样边缘部分相当于被裁剪了）</p>\n<p>当然，css backdrop filter 目前的支持还非常有限。除了 Safari 和 Edge，基本没有浏览器支持。具体可以看 <a href=\"https://caniuse.com/#feat=css-backdrop-filter\">Caniuse</a>。</p>\n<p>在 Electron 中，可以通过下面的方法让打开 backdrop-filter 的支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webPreferences<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    enableBlinkFeatures<span class=\"token punctuation\">:</span> <span class=\"token string\">'CSSBackdropFilter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chrome 对 backdrop filter 的支持进展可以看这个 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=520585\">Issue</a></p>","frontmatter":{"date":"2019-05-04","title":"css backdrop filter","category":"CSS"}}},{"node":{"id":"9ebfbed8-1960-5592-afaa-4ad983213be5","html":"<p>如果拿到了一份带有 source map 的 JavaScript 代码，那么理论上就可以通过这份 source map 去尽可能的还原出原始的文件内容。</p>\n<p>首先，source map 本质上是一个 JSON 文件。在其中，<code class=\"language-text\">sourceContent</code> 数组就记录了所有源文件的纯文本内容，而这些文件的文件路径及文件名则存放在了 <code class=\"language-text\">sources</code> 数组中。两者相互对应，理论上来说参照这两者的数据，就可以将源文件还原到原始的目录下。</p>\n<p>然而，Webpack 的打包结果，文件的路径名称都带上了 <code class=\"language-text\">webpack:///</code> 的前缀。在实际处理的过程中，可以直接使用已有的库，比如 <a href=\"https://github.com/alexkuz/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个库因为已经比较老了，对 Webpack 3/4 等新版本的支持存在问题。在原库合并 PR 之前，可以先使用改进过的版本 <a href=\"https://github.com/laysent/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个修改过的版本，除了修复对新版 Webpack 编译结果的支持外，也加入了 glob 的支持，可以更方便的进行批量 source map 还原。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">restore-source-tree -o output_folder path/to/source-maps/*.map</code></pre></div>\n<p>最终生成的文件会存放在 output_folder 下。</p>","frontmatter":{"date":"2019-05-03","title":"restore source map","category":"JavaScript"}}},{"node":{"id":"3f990a47-8a8b-53f9-a219-91181ad91d17","html":"<p>使用 <code class=\"language-text\">import</code> 函数引入的代码，在 Webpack 中会被编译到一个异步模块中。<code class=\"language-text\">import</code> 函数返回一个 Promise，会在异步模块\n加载完毕后 resolve。</p>\n<p>Webpack 允许在调用 <code class=\"language-text\">import</code> 的时候加入注释来对异步加载进行配置。最常见的是指定新文件的 chunk name：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackChunkName: \"name\" */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果在 Webpack 的配置中指定了输出的文件名格式，比如 <code class=\"language-text\">[name].js</code>，那么最终输出的结果的文件名就会是 <code class=\"language-text\">name.js</code>。</p>\n<p>当然，<code class=\"language-text\">import</code> 输入的参数字符串可以不是一个固定值。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在这种情况下，Webpack 会尝试将 module-parent-path 下所有的文件都各自打包成一个异步模块。在这种情况下，显然 webpackChunkName 没法直接写死一个字符串了。Webpack 提供了 <code class=\"language-text\">index</code> 和 <code class=\"language-text\">request</code> 两个参数，可以用于动态生成的这些异步加载模块的命名。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName\n  <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">index</code> 表示当前引用的文件的序号，<code class=\"language-text\">request</code> 则表示当前引用的模块中动态的部分。举例俩说，上面这里如果 <code class=\"language-text\">moduleName</code> 是 <code class=\"language-text\">example</code>，且配置生成的文件名是 <code class=\"language-text\">[name].js</code>，那么最终这个模块的文件名就是 <code class=\"language-text\">name-0-example.js</code>。</p>\n<p>当然，一次性将 module-parent-path 下所有的文件都打包成独立的异步模块可能会太多了，Webpack 提供了一些裁剪的方案：</p>\n<ul>\n<li><code class=\"language-text\">webpackInclude</code>，允许配置一个正则表达式，匹配的部分才打包成异步模块，忽略其他的</li>\n<li><code class=\"language-text\">webpackExclude</code>，允许配置一个正则表达式，匹配的部分会被忽略，打包其他剩下的模块</li>\n<li><code class=\"language-text\">webpackMode</code>，默认的模式是 <code class=\"language-text\">lazy</code>，每一个文件都会打包成一个异步模块；<code class=\"language-text\">lazy-once</code> 则会要求 Webpack 将所有的文件打包到一个模块中；<code class=\"language-text\">eager</code> 会把模块打包到当前的 chunk 中，但是不执行，等到真正执行了 <code class=\"language-text\">import</code> 命令之后，才执行里面的代码（省去了网络请求），依然返回的是 promise；<code class=\"language-text\">weak</code> 不会产生网络请求，默认模块会由其他途径加载完成，如果其他途径没有事先加载过，那么此处调用就会造成 promise 的 reject。</li>\n</ul>\n<p>如果有多个配置，可以叠加写在一起。一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'module-parent-path'</span> <span class=\"token operator\">+</span> moduleName\n  <span class=\"token comment\">/* webpackChunkName: \"name-[index]-[request]\" */</span>\n  <span class=\"token comment\">/* webpackInclude: /include\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackExclude: /exclude\\.js$/ */</span>\n  <span class=\"token comment\">/* webpackMode: \"lazy\" */</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了上述之外，Webpack 还支持一些模块加载相关的配置，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPrefetch: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 prefetch 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=prefetch /&gt;</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module-path-here'</span> <span class=\"token comment\">/* webpackPreload: true */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以指定当前的异步加载模块需要 preload 的支持。运行时，Webpack 会向 <code class=\"language-text\">head</code> 中插入一个 <code class=\"language-text\">&lt;link rel=preload /&gt;</code>。</p>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">/* webpackPreload: true */</span>\n  <span class=\"token comment\">/* webpackChunkName: \"name\" */</span>\n  <span class=\"token string\">'module-path-here'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意到，这里配置注释写在前面还是写在后面都是不影响的。</p>\n<p><a href=\"https://wanago.io/2018/08/20/webpack-4-course-part-eight-dynamic-imports-with-prefetch-and-preload/\">参考</a></p>","frontmatter":{"date":"2019-05-02","title":"webpack dynmaic import","category":"Configuration"}}},{"node":{"id":"7e71e4e9-1eae-5084-8ae0-1818630b9f96","html":"<p>在《JavaScript: The Good Parts》里，作者并不赞成 <code class=\"language-text\">switch</code> 语句的使用（主要是因为 fall-through 的情况很容易造成错误）。然而在实际的代码里，还是有不少地方可以看到 switch 的使用。目的各不相同，有不少可以借鉴的地方。</p>\n<section><h2>默认值设置</h2><p>React 的 <a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L220\">Scheduler</a> 中，有这样一段代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ImmediatePriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> UserBlockingPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> NormalPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> LowPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> IdlePriority<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>不失为设置默认值的一种写法，看上去比使用 if 来得更明确一些：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  priorityLevel <span class=\"token operator\">!==</span> ImmediatePriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> UserBlockingPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> NormalPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> LowPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> IdlePriority\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>防止代码篡改的判定</h2><p>上面的需求，也很容易写成下面这种数组的方案：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> allowedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  ImmediatePriority<span class=\"token punctuation\">,</span>\n  UserBlockingPriority<span class=\"token punctuation\">,</span>\n  NormalPriority<span class=\"token punctuation\">,</span>\n  LowPriority<span class=\"token punctuation\">,</span>\n  IdlePriority<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNot</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">=></span> comparedTo <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> comparedTo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedValues<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>然而，这样的代码方式，可能存在被入侵的危险。不论是上面例子中的 <code class=\"language-text\">every</code> 函数，还是用 <code class=\"language-text\">Array.prototype</code> 上的任意函数，都有被篡改的可能性。如果其他地方的代码修改了 <code class=\"language-text\">Array.prototype.every</code> 的行为，让这里的返回值发生了变化，那么代码最终就会产生意料之外的行为。</p><p>在 Scheduler 中当然不需要考虑这个问题，但是在其他的应用场景下，这可能是不得不考虑的问题。举例来说，如果一个 Web 应用允许第三方脚本的运行，同时自身有对数据进行白名单检查的需求，那么就只能使用 switch 硬编码所有的情况，而不能使用数组或者对象，否则第三方的脚本有可能对最终的行为做篡改。</p><p>Microsoft Teams 的代码里，就有类似的应用场景（见 extracted/lib/renderer/preload_sandbox.js）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChannelAllowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// IMPORTANT - the allowList must be a hardcorded switch statement.</span>\n  <span class=\"token comment\">// Array and object methods can be overridden and forced to return true.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> xxx<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> zzz<span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"date":"2019-05-01","title":"use case of switch","category":"JavaScript"}}}]}},"pageContext":{"glob":"2019-05-*","time":"2019-05","previous":null,"next":null}}