{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"c0b5447f-d343-51a7-994f-13a85fc088ca","html":"<section><h2>什么是 alias</h2><p>在一个大型 web 项目中，往往目录结构非常深。如果一个文件需要引用另一个不相邻的文件，很可能需要写非常多的 <code class=\"language-text\">../</code> 来完成相对引用。这样的引用并不雅观，也很难从直观上看出来具体引用的位置在哪里。同时，一旦当前的文件位置发生了变化，很可能会破坏原来的相对引用路径。</p><p>相较于相对路径，绝对路径可以很好的解决上述问题。一方面文件目录的改动不会破坏引用（因为被引用的目录位置不变），另一方面代码也更加的直观，一看就知道被引用的文件在什么位置。</p><p>当然，真正意义上的绝对路径也是没有必要的。毕竟项目创建的位置多种多样，程序不应该关心项目本身的路径。这里的“绝对路径”只需要从项目的根目录，或者从项目源文件 src 的路径为止开始算起就可以了。</p><p>这就轮到 <code class=\"language-text\">alias</code> 出场了。项目中可以为项目的根目录定义 <code class=\"language-text\">alias</code>，这样在引用的时候就可以直接写绝对路径，而不需要再写各种 <code class=\"language-text\">../</code> 的代码了。举例来说，可以定义 src 目录的 <code class=\"language-text\">alias</code> 就是 <code class=\"language-text\">src/</code>，这样只需要写 <code class=\"language-text\">src/xxx/yyy/zzz</code> 就可以直接引用 <code class=\"language-text\">src</code> 目录下 <code class=\"language-text\">xxx/yyy/zzz</code> 的文件了。当然，<code class=\"language-text\">alias</code> 的定义多种多样，比如也可以用 <code class=\"language-text\">@/</code> 来作为 <code class=\"language-text\">src</code> 文件夹的 <code class=\"language-text\">alias</code>。</p></section>\n<section><h2>如何配置</h2><p><code class=\"language-text\">alias</code> 是需要配置的，不同的工具需要的配置位置与方式各不相同。下面简单总结了 JavaScript 与 TypeScript 项目可能用到的各种 <code class=\"language-text\">alias</code> 配置。</p><section><h3>Webpack</h3><p>在 Webpack 的配置文件中，可以写：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  resolve<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    alias<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      src<span class=\"token punctuation\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// path of src folder</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section><section><h3>TypeScript</h3><p>在 <code class=\"language-text\">tsconfig.json</code> 中，可以写</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里 <code class=\"language-text\">baseUrl</code> 设置了一个基准的起始位置。在 TypeScript 的项目中，如果一个引用不是相对路径，那么 TypeScript 就会以这个 <code class=\"language-text\">baseUrl</code> 为起始位置来计算路径。<code class=\"language-text\">paths</code> 定义了一些路径的映射关系。上面这个例子里的 <code class=\"language-text\">paths</code> 定义其实是多余的。因为根据 TypeScript 的行为定义，<code class=\"language-text\">src/xxx</code> 的引用路径本来就会从项目根目录开始查找文件。一个更有意义的例子可能是：</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section><section><h3>Jest</h3><p>在 <code class=\"language-text\">jest.config.js</code> 中，可以写</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  moduleNameMapper<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'^src/(.*)$'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;rootDir>/src/$1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section><section><h3>Eslint</h3><p>在 <code class=\"language-text\">.eslintrc</code> 中，可以写</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"import/resolver\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"webpack\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"path-to-webpack-config-file\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里需要用到一个库，<a href=\"https://www.npmjs.com/package/eslint-import-resolver-webpack\"><code class=\"language-text\">eslint-import-resolver-webpack</code></a>。该库会读取指定的 Webpack config 文件，根据其中的配置来同步 Webpack 和 ESLint 中对 alias 的设置。</p><p>对于没有使用 Webpack 的工程，也可以使用 <a href=\"https://www.npmjs.com/package/eslint-import-resolver-custom-alias\"><code class=\"language-text\">eslint-import-resolver-custom-alias</code></a> 来达到类似的效果：</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"import/resolver\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint-import-resolver-custom-alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"alias\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./css\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section></section>","frontmatter":{"title":"Web 应用的 Alias 配置","date":"2019-04-16","modified":"2019-04-17","description":"本文主要介绍一个 JavaScript / TypeScript 项目中，可以用到的各种 alias 配置"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/alias-for-web-project/","previous":{"fields":{"slug":"/subresource-integrity-and-error-handling/","type":"blog"},"frontmatter":{"title":"Subresource Integrity 出错时的处理方案","category":"Web","tags":"Web, JavaScript"}},"next":{"fields":{"slug":"/cicada-principle/","type":"blog"},"frontmatter":{"title":"蝉原则（Cicada Principle）","category":"Web","tags":"Web, CSS"}}}}