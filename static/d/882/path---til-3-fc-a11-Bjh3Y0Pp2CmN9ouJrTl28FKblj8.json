{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"f1c4a2d9-aae9-57d0-af24-7bff463bc690","html":"","frontmatter":{"date":null,"title":"","category":null}}},{"node":{"id":"fc5319b0-0f0a-5ebf-9e57-069b0cbf41a4","html":"<p>以下 Bash 代码可以递归删除指定的 <code class=\"language-text\">.map</code> 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -type f -name <span class=\"token string\">'*.map'</span> -delete</code></pre></div>\n<p>如果同时希望删除 <code class=\"language-text\">.map</code> 和 <code class=\"language-text\">.xxx</code> 文件，可以加上 <code class=\"language-text\">-o</code> flag</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token keyword\">.</span> -type f -name <span class=\"token string\">'*.map'</span> -o -name <span class=\"token string\">'.*'</span> -delete</code></pre></div>\n<p>一些参数说明：</p>\n<ul>\n<li><code class=\"language-text\">-type f</code> 表示需要查找的是文件</li>\n<li><code class=\"language-text\">-name &#39;xxx&#39;</code> 定义需要匹配的文件名</li>\n<li><code class=\"language-text\">-o</code> 表示 or，后面可以跟新的匹配规则</li>\n<li><code class=\"language-text\">-delete</code> 表示匹配到的文件需要被删除</li>\n</ul>","frontmatter":{"date":"2019-05-27","title":"Recursively delete files by type","category":"Bash"}}},{"node":{"id":"2e9caaef-2c20-5c1c-91b9-6bc4f57f84bc","html":"<p><code class=\"language-text\">prefers-color-scheme</code> 这个 Media Query 可以用于检测当前的操作系统是否选择了 Dark Mode。这是一个依然处于初始草案阶段的功能（见 <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\">Draft</a>），不过 Safari (12.1) / Chrome (76) / Firefox (67) 的最新版本都已经做了支持。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-color-scheme</span><span class=\"token punctuation\">:</span> dark<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">:not(pre) > code[class*=\"language-\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255,229,100,0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是一个可编辑的 CSS 代码，可以直接试一试：</p>\n<style>\nstyle.editable-style {\n  display: block;\n}\n</style>\n<p></p>\n<div class=\"gatsby-highlight\" style=\"border:1px solid red\">\n<pre class=\"language-css\"><code class=\"language-css\"><style contenteditable class=\"editable-style\">@media (prefers-color-scheme: dark) { body { /* try here */ } }</style></code></pre>\n</div>\n<p></p>\n<p>注：上面这段代码是可改的，修改后的 CSS 会直接生效。但是由于 <code class=\"language-text\">contenteditable</code> 的限制，所有代码需要在一行内完成。</p>\n<p>除了 <code class=\"language-text\">dark</code> 之外，<code class=\"language-text\">prefers-color-scheme</code> 可以接受的属性还有 <code class=\"language-text\">light</code> 和 <code class=\"language-text\">no-preference</code> 两种。其中，<code class=\"language-text\">light</code> 表示用户选择的是 Light 模式，<code class=\"language-text\">no-preference</code> 表示用户并没有做选择。</p>\n<p>在 JavaScript 中，也可以通过下面的代码来判断当前是否是 Dark Mode：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ifDarkMode <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: dark)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注：从当前的实验结果来看，<code class=\"language-text\">matchMedia</code> 的结果用 <code class=\"language-text\">.addListener</code> 注册回调事件并不能生效（Safari 12 测试）。</p>\n<p>如果图片的展示也需要区分，<code class=\"language-text\">mediaQuery</code> 也可以帮上忙：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-night.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(prefers-color-scheme: dark)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-day.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"date":"2019-05-24","title":"CSS for Dark Mode","category":"CSS"}}},{"node":{"id":"d88994f9-affc-55c4-9900-4567e4d96605","html":"<p>一直以来，<a href=\"https://github.com/ReactiveX/rxjs\">rxjs</a> 和 <a href=\"https://github.com/facebook/react\">react</a> 都不太搭，要在 React 中使用 rxjs 往往需要写并不怎么优雅的代码，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> initial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>value$ <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value$\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Example value$<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面这段代码，会根据 <code class=\"language-text\">value$</code> 这个 Observable 的数据，通过 React State 这个桥梁，去更新 UI。并且，代码考虑到了给定的 <code class=\"language-text\">value$</code> 可能后续变化的情况。如果不考虑后续 <code class=\"language-text\">props</code> 的修改，上面的代码依然需要在 <code class=\"language-text\">componentDidMount</code> 的时候注册回调并更新，然后在 <code class=\"language-text\">componentWillUnmount</code> 的时候注销，显得非常的啰嗦。</p>\n<p>LeetCode 提供的 <a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks\">rxjs-hooks</a> 提供了一个更为优雅的解决方案：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useObservable</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>inputs$<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> inputs$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>value$<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    initial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>value$<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Example value$<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>rxjs-hooks 另外提供了 <code class=\"language-text\">useEventCallback</code> 来更好的处理事件流，具体可以查看官方的<a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks#useeventcallback\">文档</a>。</p>","frontmatter":{"date":"2019-05-23","title":"rxjs and hooks","category":"JavaScript"}}},{"node":{"id":"d56792bb-55db-5cb1-9c6b-2eb3542f617a","html":"<p>如果需要对目录下文件的占用空间做排序，可以使用下面的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">du</span> -d 3 -k <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> -h</code></pre></div>\n<p>其中，<code class=\"language-text\">du -d 3</code> 表示，最多显示三层子目录，<code class=\"language-text\">-k</code> 会让输出以 <code class=\"language-text\">KB</code> 作为单位。<code class=\"language-text\">sort -h</code> 会对结果进行排序，排序的依据是文件夹的大小。这里，排序需要带上 <code class=\"language-text\">-h</code> 的标识位，不然以字符串进行排序的话，输出没有意义（比如，100 会排在 9 的前面）。</p>","frontmatter":{"date":"2019-05-22","title":"Disk Usage of Folder","category":"Bash"}}},{"node":{"id":"1fb93b09-bdfc-53b8-9493-0716267f233a","html":"<p>假设有一个 TypeScript 的类型是：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span>\n  str<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以下这个 TypeScript 的定义，可以用于将 <code class=\"language-text\">T</code> 中函数的部分抽离出来，形成新的类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span> <span class=\"token operator\">?</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最终，新类型的定义如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Result <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span>Example<span class=\"token punctuation\">,</span> FunctionPropertyNames<span class=\"token operator\">&lt;</span>Example<span class=\"token operator\">>></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>等价于：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Equivalent</span> <span class=\"token punctuation\">{</span>\n  func1<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  func2<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-05-21","title":"Extract all function properties from given type","category":"TypeScript"}}},{"node":{"id":"cc5644bb-1b5c-59d4-b7f8-1b835b81f163","html":"<p><a href=\"https://github.com/JedWatson/classnames\">classnames</a> 库提供了一个 <code class=\"language-text\">bind</code> API，用于处理 CSS Module 的情况。</p>\n<p>在 Webpack 中用 CSS Module 的方案编译 CSS 文件，后续在 JavaScript 中 <code class=\"language-text\">import style from &#39;xxx.css&#39;;</code> 后，<code class=\"language-text\">style</code> 就是一个对象。这个对象的大体结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo-abcde'</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar-12345'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，对象的 <code class=\"language-text\">key</code> 是原始的 class name，而 <code class=\"language-text\">value</code> 则是施加 CSS Module 之后得到的唯一名称。</p>\n<p>如果直接使用 <code class=\"language-text\">classnames</code> 的标准 API，那么写起来就需要大量使用 computed property name 的语法，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classnames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>而使用 <code class=\"language-text\">bind</code> API，可以事先告知 <code class=\"language-text\">classnames</code> class name 的对应关系（通过指定 <code class=\"language-text\">this</code>），后续只需要使用字符串，<code class=\"language-text\">classnames</code> 就可以自动使用合适的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames/bind'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> classNames<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// result in: className=\"foo-abcde\"</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-20","title":"classnames & css module","category":"JavaScript"}}},{"node":{"id":"1dba56eb-eb2f-5017-a43e-968f67b390f0","html":"<p>对于有多个 Git 仓库的情况，不同的仓库可能需要配置不同的用户信息。</p>\n<p>一种麻烦的方案是，每个仓库都配置一个本地的 Git 配置，不使用全局的设置，就不会有问题。但是这样配置非常的麻烦，也容易忘。Git 提供了配置覆盖的功能，可以指定某一子目录，使用另外一个指定的 Git 配置覆盖默认的全剧配置。</p>\n<p>如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[includeIf &quot;gitdir:~/work/github/&quot;]\n    path = ~/work/github/.gitconfig</code></pre></div>\n<p>这个配置指定了在 <code class=\"language-text\">~/work/github/</code> 目录下，除了全局的 <code class=\"language-text\">.gitconfig</code> 文件之外，读取 <code class=\"language-text\">~/work/github/.gitconfig</code> 文件对配置进行覆盖改写。在 <code class=\"language-text\">~/work/github/.gitconfig</code> 的优先级高于 <code class=\"language-text\">~/.gitconfig</code> 的配置，会优先使用，没有定义的部分才会去全局中找。</p>","frontmatter":{"date":"2019-05-19","title":"Multiple Git Configuration","category":"Git"}}},{"node":{"id":"d12d4671-c616-5525-890c-61c4b9903aec","html":"<p>下面的脚本，执行之后，可以完成 <code class=\"language-text\">git clone</code> 并 <code class=\"language-text\">cd</code> 至目标文件夹内。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span>f<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  local tmp<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n  local repo_name<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">git</span> clone <span class=\"token variable\">$@</span> --progress 2<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>1 <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n  repo_name<span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">awk</span> -F\\<span class=\"token string\">' '</span>/Cloning into/ <span class=\"token punctuation\">{</span>print $2<span class=\"token punctuation\">}</span>' $tmp<span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rm</span> <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cd</span> <span class=\"token variable\">$repo_name</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nf</code></pre></div>\n<p>一些说明：</p>\n<ul>\n<li><code class=\"language-text\">mktemp</code> 可以创建一个临时文件，文件路径存放在 <code class=\"language-text\">tmp</code> 变量中</li>\n<li><code class=\"language-text\">git clone $@</code> 中的 <code class=\"language-text\">$@</code> 是执行脚本时候所有的传入参数</li>\n<li><code class=\"language-text\">---progress 2&gt;&amp;1</code> 会将 Git clone 命令的结果输出。这里，默认情况下，clone 的过程数据只有在 error stream 输出到 terminal 的时候，才会显示。因为这里的命令需要将内容通过管道输出到 <code class=\"language-text\">tmp</code> 临时文件中，所以默认情况下 Git 就不会输出过程的数据了。为了能够让 Git 输出这部分内容，需要加上 <code class=\"language-text\">--progress</code></li>\n<li><code class=\"language-text\">tee $tmp</code> 将管道的数据输出到临时文件中</li>\n<li><code class=\"language-text\">awk -F\\&#39; &#39;/Cloning into/ {print $2}&#39; $tmp</code> 的部分，会从输出的数据中，寻找 <code class=\"language-text\">Cloning into</code> 的输出，然后找到具体 clone 到了哪个文件夹中</li>\n</ul>","frontmatter":{"date":"2019-05-17","title":"Command to enter folder after git clone","category":"Git"}}},{"node":{"id":"9525900f-a0d7-5eb2-9725-6d903a979969","html":"<p><code class=\"language-text\">Object.create</code> 可以用提供的对象做新对象的 <code class=\"language-text\">__proto__</code>。这导致了一个很有趣的现象，如果使用 <code class=\"language-text\">Object.create(null)</code> 来创建新对象，那么这个新对象上就没有任何 <code class=\"language-text\">__proto__</code>。因为 JavaScript 的对象经常被用来做字典使用，<code class=\"language-text\">Object.create(null)</code> 可以让这个功能使用更加的纯粹。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: \"undefined\"</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   constructor,</span>\n<span class=\"token comment\">//   hasOwnProperty,</span>\n<span class=\"token comment\">//   isPrototypeOf,</span>\n<span class=\"token comment\">//   propertyIsEnumerable,</span>\n<span class=\"token comment\">//   toLocaleString,</span>\n<span class=\"token comment\">//   toString,</span>\n<span class=\"token comment\">//   valueOf,</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>同样，因为没有 <code class=\"language-text\">prototype</code>，理论上来说，后续如果有人对 <code class=\"language-text\">Object.prototype</code> 做操作，也不会影响到使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\nObject<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: undefined</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> dict<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no output</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: function</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 'addSomething'</span></code></pre></div>\n<p>所以，如果判断对象有某个字段，那么一定是他自身有这个字段，而不会是因为原型链上的定义。也就是说，不需要用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">,</span> <span class=\"token string\">'addSomething'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而只需要写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这也会有一些弊端，比如默认 <code class=\"language-text\">Object.prototype</code> 的东西就没了，如果需要 <code class=\"language-text\">toString</code> 之类的函数，得自己写。</p>","frontmatter":{"date":"2019-05-16","title":"Object.create(null)","category":"JavaScript"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}