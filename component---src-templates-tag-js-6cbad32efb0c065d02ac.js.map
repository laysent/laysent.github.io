{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/posts.js"],"names":["TagTemplate","render","this","props","title","pageContext","tag","subtitle","React","Component","pageQuery","urlTransform","text","trim","replace","toLowerCase","Posts","data","isRoot","site","siteMetadata","blogTitle","siteTitle","posts","allMarkdownRemark","edges","location","to","keywords","map","node","frontmatter","fields","slug","date","hasTags","tags","length","hasCategory","category","key","style","marginBottom","rhythm","boxShadow","dateTime","lang","timeToRead","split","i","Fragment","color","dangerouslySetInnerHTML","__html","description"],"mappings":"gMAKMA,E,gLACJC,OAAA,WACE,OACE,kBAAC,IAAD,iBACMC,KAAKC,MADX,CAEEC,MAAK,IAAMF,KAAKC,MAAME,YAAYC,IAClCC,SAAQ,IAAML,KAAKC,MAAME,YAAYC,Q,GANnBE,IAAMC,WAYjBT,YAER,IAAMU,EAAS,c,+HCZtB,SAASC,EAAaC,GACpB,OAAOA,EAAKC,OAAOC,QAAQ,KAAM,KAAKA,QAAQ,MAAO,IAAIC,c,IAGrDC,E,gLACJf,OAAA,WAAU,IAAD,EACmCC,KAAKC,MAAvCc,EADD,EACCA,KAAMb,EADP,EACOA,MAAOG,EADd,EACcA,SAAUW,EADxB,EACwBA,OADxB,EAEiChB,KAAKC,MAAMc,KAAKE,KAAKC,aAArDC,EAFD,EAECA,UAAkBC,EAFnB,EAEYlB,MACbmB,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CACEC,SAAUxB,KAAKC,MAAMuB,SACrBtB,MAAOc,EAASI,EAAYD,EAC5BH,OAAQA,EACRX,SAAUA,EACVoB,GAAIT,EAAS,IAAM,UAEnB,kBAAC,IAAD,CACEd,MAAOA,EACPwB,SAAU,CAAC,aAAc,MAAO,OAAQ,WACxCF,SAAUxB,KAAKC,MAAMuB,WAEtBH,EAAMM,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACN1B,EAAQ0B,EAAKC,YAAY3B,OAAS0B,EAAKE,OAAOC,KAC9CC,EAAOJ,EAAKC,YAAYG,KACxBC,EAAUL,EAAKC,YAAYK,MAAQN,EAAKC,YAAYK,KAAKC,OAAS,EAClEC,IAAgBR,EAAKC,YAAYQ,SAEvC,OACE,6BAASC,IAAKV,EAAKE,OAAOC,MACxB,wBACEQ,MAAO,CACLC,aAAcC,YAAO,OAGvB,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAU,QAAWjB,GAAE,YAAcG,EAAKE,OAAOC,MAC7D7B,IAGL,+BAAO,0BAAMyC,SAAUX,GAAOA,IAC9B,2BAAOY,KAAK,MAAZ,MAAqBhB,EAAKiB,WAA1B,eACCT,GACC,qCAEE,kBAAC,OAAD,CAAMG,MAAO,CAAEG,UAAU,QAAWjB,GAAE,kBAAoBhB,EAAamB,EAAKC,YAAYQ,UAAlD,KACnCT,EAAKC,YAAYQ,WAIvBJ,GACC,qCAECL,EAAKC,YAAYK,KAAKY,MAAM,KAAKnB,KAAI,SAACvB,EAAK2C,EAAGb,GAAT,OACpC,kBAAC,IAAMc,SAAP,CAAgBV,IAAKlC,GACnB,kBAAC,OAAD,CAAMmC,MAAO,CAAEG,UAAU,OAASO,MAAO,WAAaxB,GAAE,aAAehB,EAAaL,GAA5B,KAAxD,IACIA,EAAIO,QAEPoC,IAAMb,EAAKC,OAAS,GAApB,WAKP,uBAAGe,wBAAyB,CAAEC,OAAQvB,EAAKC,YAAYuB,qB,GA3DjD9C,IAAMC,WAoEXO","file":"component---src-templates-tag-js-6cbad32efb0c065d02ac.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Posts from '../components/posts';\n\nclass TagTemplate extends React.Component {\n  render() {\n    return (\n      <Posts\n        {...this.props}\n        title={`#${this.props.pageContext.tag}`}\n        subtitle={`#${this.props.pageContext.tag}`}\n      />\n    )\n  }\n}\n\nexport default TagTemplate;\n\nexport const pageQuery = graphql`\n  query Tag($tagPattern: String!) {\n    site {\n      siteMetadata {\n        title\n        blogTitle\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter:  { tags: { regex: $tagPattern } }, fields: { type: { ne: \"til\" } } }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport Layout from './layout'\nimport SEO from './seo'\nimport { rhythm } from '../utils/typography'\n\nfunction urlTransform(text) {\n  return text.trim().replace(/ /g, '-').replace(/\\./g, '').toLowerCase();\n}\n\nclass Posts extends React.Component {\n  render() {\n    const { data, title, subtitle, isRoot } = this.props\n    const { blogTitle, title: siteTitle } = this.props.data.site.siteMetadata\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n      <Layout\n        location={this.props.location}\n        title={isRoot ? siteTitle : blogTitle}\n        isRoot={isRoot}\n        subtitle={subtitle}\n        to={isRoot ? '/' : '/blog/'}\n      >\n        <SEO\n          title={title}\n          keywords={['JavaScript', 'Web', 'Blog', 'LaySent']}\n          location={this.props.location}\n        />\n        {posts.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug\n          const date = node.frontmatter.date;\n          const hasTags = node.frontmatter.tags && node.frontmatter.tags.length > 0;\n          const hasCategory = !!node.frontmatter.category;\n\n          return (\n            <article key={node.fields.slug}>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={`blog/post${node.fields.slug}`}>\n                  {title}\n                </Link>\n              </h3>\n              <small><time dateTime={date}>{date}</time></small>\n              <small lang=\"en\"> • {node.timeToRead}min to read</small>\n              {hasCategory && (\n                <small>\n                  {` • `}\n                  <Link style={{ boxShadow: `none` }} to={`/blog/category/${urlTransform(node.frontmatter.category)}/`}>\n                    {node.frontmatter.category}\n                  </Link>\n                </small>\n              )}\n              {hasTags && (\n                <small>\n                {` • `}\n                {node.frontmatter.tags.split(',').map((tag, i, tags) => (\n                  <React.Fragment key={tag}>\n                    <Link style={{ boxShadow: `none`, color: '#ffb600' }} to={`/blog/tag/${urlTransform(tag)}/`}>\n                      #{tag.trim()}\n                    </Link>\n                    {i !== tags.length - 1 && ` / `}\n                  </React.Fragment>\n                ))}\n                </small>\n              )}\n              <p dangerouslySetInnerHTML={{ __html: node.frontmatter.description }} />\n            </article>\n          )\n        })}\n      </Layout>\n    )\n  }\n}\n\nexport default Posts\n"],"sourceRoot":""}