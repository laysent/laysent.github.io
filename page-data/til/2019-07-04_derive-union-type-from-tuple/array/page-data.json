{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-07-04_derive-union-type-from-tuple/array","result":{"data":{"markdownRemark":{"id":"270c29d9-1949-5a76-a5f3-0aa46f71ce1a","html":"<p>在 TypeScript 中，如果希望一个变量只能取某几个固定值中的一个，可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> a<span class=\"token punctuation\">:</span> Type <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✔</span>\n<span class=\"token keyword\">const</span> c<span class=\"token punctuation\">:</span> Type <span class=\"token operator\">=</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✖</span></code></pre></div>\n<p>然而，在实际的开发过程中，可能会遇到这样的需求：希望 TypeScript 可以限定某一个类型只能取某几个固定的值，同时这几个值又可以组成一个数组，方便 JavaScript 在运行时动态的执行匹配功能（如 <code class=\"language-text\">Array.prototype.some</code>）。</p>\n<p>如果直接尝试在 TypeScript 中写数组，实际无法达到预想的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type = string</span></code></pre></div>\n<p>这是因为，TypeScript 默认 <code class=\"language-text\">list</code> 的类型是 <code class=\"language-text\">string[]</code>，而不是 <code class=\"language-text\">(&#39;a&#39; | &#39;b&#39;)[]</code>。因此，在转化成 <code class=\"language-text\">Type</code> 的时候，得到的结果是更宽泛的字符串类型，而不是限定死的两个固定值。这其中，一个很重要的原因是 JavaScript 语言的动态性。数组随时可以被加入/删除元素，因而默认只能假设这是一个字符串类型的数组，而不能过多约束。</p>\n<p>为了达到目的，有以下几个变通的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type = 'a' | 'b';</span></code></pre></div>\n<p>这种写法比较啰嗦，重新写了一遍完整的数组用于定死类型的选择范围。</p>\n<p>也可以通过写一个辅助函数来达到类似的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> tupleStr<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token function\">tupleStr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type = 'a' | 'b';</span></code></pre></div>\n<p>在 Ant Design 中可以找到<a href=\"https://github.com/ant-design/ant-design/blob/65eb713fe897f65bbf187e215c664e5f9b468252/components/_util/type.ts#L5\">类似的写法</a>。这里也有一个类似的 <a href=\"https://gist.github.com/jcalz/381562d282ebaa9b41217d1b31e2c211\">gist</a>。</p>\n<p>注：上述这种写法需要 TypeScript 3.0 的<a href=\"https://github.com/Microsoft/TypeScript/pull/24897\">支持</a>。</p>\n<p>当然，上述的方案或多或少都需要额外写一些东西，有些麻烦。在 TypeScript 3.4 中，可以通过 <code class=\"language-text\">as const</code> 这个语法来告知 TypeScript 数组是静态的、并不会增加或者减少内容。有了这样的前提假设，TypeScript 就可以更好的进行类型推导，把实际的类型结果限制到已知的几个有限的值范围内。例子如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> list2 <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Type1 <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> Type2 <span class=\"token operator\">=</span> list2<span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述两种写法是等价的（参考<a href=\"https://github.com/Microsoft/TypeScript/pull/29510\">这里</a>），都可以达到目的。另外，由于在 TypeScript 中限制了数组，之后想要在数组中做改动都是会导致编译器报错的。</p>\n<p><a href=\"https://stackoverflow.com/questions/45251664/typescript-derive-union-type-from-tuple-array-values\">参考</a></p>","frontmatter":{"title":"Derive Union Type from Tuple/Array","category":"TypeScript","date":"2019-07-04"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-07-04","title":"Derive Union Type from Tuple/Array","previous":{"time":"2019-07-03","title":"Command `tldr`"},"next":{"time":"2019-07-08","title":"git rev-parse"}}}}