{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-11-18_ant-design-style-overwrite","result":{"data":{"markdownRemark":{"id":"96f3c780-0e41-571e-abef-50a625e53a84","html":"<section><h2>现状</h2><p>当前的 Ant Design，常见的样式覆盖方案，大体上有两种：</p><ol>\n<li>使用 Ant Design 提供的 LESS 变量来覆盖原有的样式（详情可以参考官方的<a href=\"https://ant.design/docs/react/customize-theme-cn\">文档</a>）；</li>\n<li>先一次性载入完整的 Ant Design CSS/LESS 文件，然后再载入新的覆盖样式（一些文章提到了这样的处理方法，比如<a href=\"https://www.jianshu.com/p/a2e7728d8717\">这里</a>）。</li>\n</ol><p>第一种方案的主要缺点是写法不太直观，优点是替换非常彻底，而且是官方推荐的方案；第二种方案，优点是覆盖的写法非常的直观，直接写 CSS/LESS 覆盖原有样式就可以了，但是缺点是需要一次性加载所有的样式，再覆盖。</p></section>\n<section><h2>按需加载的困难点</h2><p>如果使用了 <code class=\"language-text\">babel-plugin-import</code> 对样式进行按需加载，再想要进行样式的覆盖，就很容易出现问题。</p><p>在了解具体可能存在的问题前，先来看一下 <code class=\"language-text\">babel-plugin-import</code> 的按需加载是如何运作的：在 JavaScript / TypeScript 文件遇到任何 Ant Design 组件的引用，就会同时将该组件的样式也插入到引用的位置。也就是说，如果有下面的 JavaScript 代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Select <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span></code></pre></div><p>那么，编译转化后的代码大体如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'antd/lib/select/style'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Select <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/select'</span><span class=\"token punctuation\">;</span></code></pre></div><p>这里实际载入的样式文件来自 <code class=\"language-text\">antd/lib/select/style</code> 目录下的 <code class=\"language-text\">index.js</code> 文件。在这个文件中，具体引用了需要用到的各个 LESS 文件。对 Select 来说，这个样式引用的代码是：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../style/index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../empty/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，除了 Select 自身的 <code class=\"language-text\">index.less</code> 文件外，先后还引用了 <code class=\"language-text\">../../style/index.less</code> 文件和 <code class=\"language-text\">../../empty/style</code> 文件。换句话说，<code class=\"language-text\">babel-plugin-import</code> 在处理按需加载的时候，并不是仅加载了当前使用组件的样式，还包含了一些组件需要的隐含依赖样式。这一点，在 AutoComplete 这样的复杂组件中更为明显。在使用 AutoComplete 的时候，其 <code class=\"language-text\">style/index.js</code> 内容如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../style/index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../select/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../input/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，除了自身的样式之外，Select 和 Input 的样式代码也被加载了一遍。换句话说，如果希望做按需加载的样式覆盖，在加载 AutoComplete 组件的时候，除了需要加载样式覆盖 AutoComplete 的部分，还需要额外加载样式将 Select 和 Input 的样式也覆盖一遍。而这些隐含的样式依赖，在代码上是不容易被察觉的。一旦漏了 Select 和 Input 的样式覆盖，就容易出现问题：明明 Select 的样式在加载的时候已经覆盖过了，但是在加载了 AutoComplete 组件之后，原先已经被覆盖的样式，又被新载入的 Select 原始样式给覆盖回去了。</p><p>因为 Ant Design 的样式没有采用 CSS Module，因此 CSS/LESS 的样式覆盖就强依赖于正确的加载顺序。覆盖的样式必须在原始样式的后面加载，否则结果就会出现错乱。</p></section>\n<section><h2>解决方案</h2><p>为了确保按需加载的情况下，样式的覆盖顺序也是正确的，一个可行的思路是使用 Webpack 中的 loader 功能。根据 Webpack 打包的原理，任何的非 JavaScript 代码，都需要通过合适的 loader 转化成 JavaScript 文件，最终被打包到 bundle 中。而不管 <code class=\"language-text\">babel-plugin-import</code> 插件如何处理 Ant Design 的样式加载，这些最终被引用的 LESS 文件，都需要经过一些 loader 最终处理成可执行的文件（一般需要用到的 loader 包括 <code class=\"language-text\">less-loader</code>，<code class=\"language-text\">css-loader</code> 和 <code class=\"language-text\">style-loader</code>）。</p><p>既然 Webpack 的打包已经保证了统一的处理入口，那么就可以考虑在 loader 这一层，将样式的覆盖处理掉。</p><p>示例代码如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\">/antd\\/lib\\/([^\\/]+)\\/style\\/index.less/</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>content<span class=\"token comment\">/*, map, meta */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 这里的 resourcePath 就是具体被使用的 LESS 文件的目录，详情可以参考 Webpack 文档：\n   * https://webpack.js.org/api/loaders/#thisresourcepath\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> resourcePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>resourcePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 1. 如果不是 Antd 相关的 LESS 文件，直接忽略不处理\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 2. 根据使用的 Component 组件，找到对应的覆盖样式文件，赋值给 customizedLessPath\n   */</span>\n  <span class=\"token keyword\">const</span> customizedLessPath <span class=\"token operator\">=</span> <span class=\"token function\">getCustomizedLessFile</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customizedLessPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 3. 如果找到了覆盖文件，就将覆盖文件插入到 LESS 的最后面，保证调用顺序\n   */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    content<span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@import \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>customizedLessPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\";</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>接下来，在 Webpack 中配置对应的 LESS 文件处理 loader，确保这个自定义的 loader 在 less-loader 的前面：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.less$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path-to-custom-loader'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div><p>这样，假设 <code class=\"language-text\">babel-plugin-import</code> 插件插入了一段 Select 的 LESS 文件：</p><div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token atrule\">@select-prefix-cls<span class=\"token punctuation\">:</span> ~'@</span><span class=\"token punctuation\">{</span>ant<span class=\"token operator\">-</span>prefix<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>select'<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div><p>经过上面的自定义 loader 处理之后，就会变成：</p><div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token atrule\">@select-prefix-cls<span class=\"token punctuation\">:</span> ~'@</span><span class=\"token punctuation\">{</span>ant<span class=\"token operator\">-</span>prefix<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>select'<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token variable\">@import</span> <span class=\"token string\">\"customized-less-path\"</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，自定义的 LESS 文件一定会在原始 LESS 文件的后面，从顺序上可以保证样式一定可以正确的被覆盖。剩下的事情，就交给 less-loader 及后续 loader 去处理就可以了。</p></section>\n<section><h2>延伸阅读</h2><p>关于 Webpack loader 的写法，可以参考 Webpack 官方的<a href=\"https://webpack.js.org/contribute/writing-a-loader/\">教学文档</a>。</p></section>","frontmatter":{"title":"Ant Design Style Overwrite","category":"JavaScript","date":"2019-11-18"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-11-18","title":"Ant Design Style Overwrite","previous":{"time":"2019-11-17","title":"stopImmediatePropagation"},"next":{"time":"2019-11-19","title":"Clone SD Card"}}}}