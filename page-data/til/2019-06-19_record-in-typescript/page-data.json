{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-06-19_record-in-typescript","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"markdownRemark":{"id":"f8816c31-98ea-573f-a38e-fbaac6df6966","html":"<p><code class=\"language-text\">Record</code> 是 TypeScript 中一个很实用的范型类型。它需要两个具体的参数类型，<code class=\"language-text\">Record&lt;K, V&gt;</code>，用于指定一个对象的类型。其中，对象的所有 key 都是 <code class=\"language-text\">K</code> 类型的，而这些 key 对应的值则都是 <code class=\"language-text\">V</code> 类型的。如果不使用 <code class=\"language-text\">Record</code> 类型，可能需要用如下的方法来达到同等的效果：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> RecordExample <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">EquivalentExample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>显然，等价的写法更为的复杂，看起来也不那么清晰。</p>\n<p>当然，对于 JavaScript 来说，对象的属性其实只能是 <code class=\"language-text\">string</code> 类型的。虽然有时候也会直接使用 <code class=\"language-text\">number</code> 作为值（TypeScript 里面也可以专门这么来做类型强制），但是其实在用作 key 的时候，会经过一步 toString 的转化。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: value</span></code></pre></div>\n<p>这么看起来，<code class=\"language-text\">Record</code> 的应用场景似乎非常有限，只有 <code class=\"language-text\">Record&lt;string, xxx&gt;</code> 或者 <code class=\"language-text\">Record&lt;number, xxx&gt;</code> 两种可能性。然而，TypeScript 中除了可以使用一些泛用的类型之外，也可以对类型做更进一步的限定。比如，指定类型只能是 <code class=\"language-text\">&#39;apple&#39; | &#39;banana&#39; | &#39;orange&#39;</code>。如此一来，<code class=\"language-text\">Record</code> 就有了更多的应用场景。</p>\n<p>举例来说，如果希望写一个函数，可以将参数对象中所有的值都转化成对应的数字，就可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Input <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">function</span> transform<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Input</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keys<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    acc<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>input<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> Record<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样，就可以保证输入和输出的对象，有相同的 key。</p>","frontmatter":{"title":"Record in TypeScript","category":"TypeScript","date":"2019-06-19"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-06-19","title":"Record in TypeScript","previous":{"time":"2019-06-18","title":"SSH ProxyJump"},"next":{"time":"2019-06-20","title":"TypeScript Non-null Assertion"}}}}