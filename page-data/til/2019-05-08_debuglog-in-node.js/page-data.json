{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-05-08_debuglog-in-node.js","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"markdownRemark":{"id":"734ea8a8-a015-503a-b7bb-cf9c28d3bda4","html":"<p>在 Node.js 中，<code class=\"language-text\">utils</code> 提供了 <code class=\"language-text\">debuglog</code> 模块可以用于调试信息的输出。默认情况下，<code class=\"language-text\">debuglog</code> 的内容是不会输出的，只有当 <code class=\"language-text\">NODE_DEBUG</code> 这个环境变量设置了合适的值，输出才会显示。这样，调试信息不会影响正常的使用，同时也依然保留了调试的需求。</p>\n<p>具体的使用如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> debuglog <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">debuglog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world: [%d]'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面的例子中，如果直接运行，是不会包含 <code class=\"language-text\">hello world: 1</code> 的输出的。如果设置 <code class=\"language-text\">NODE_DEBUG</code> 为 <code class=\"language-text\">name</code>（也就是 <code class=\"language-text\">debuglog</code> 函数调用时设置的值），那么再次运行，<code class=\"language-text\">hello world: 1</code> 就会输出了。</p>\n<p>同时，可以用逗号分隔的方式一次性为 <code class=\"language-text\">NODE_DEBUG</code> 设置多个值，比如：<code class=\"language-text\">NODE_DEBUG=foo,bar</code>。</p>\n<p>在 Mac 下，一次性设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">NODE_DEBUG<span class=\"token operator\">=</span>name node ./index.js</code></pre></div>\n<p>在 Windows 下（Powershell），设置 <code class=\"language-text\">NODE_DEBUG</code> 可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$env</span>:NODE_DEBUG=<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span> node <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>js</code></pre></div>\n<p>设置完成之后，<code class=\"language-text\">NODE_DEBUG</code> 会一直保留着，直到 powershell 被关闭。需要删掉原先设置的 <code class=\"language-text\">NODE_DEBUG</code>，可以输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"powershell\"><pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">Remove-Item</span> env:\\NODE_DEBUG</code></pre></div>","frontmatter":{"title":"debuglog in node.js","category":"Node.js","date":"2019-05-08"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-05-08","title":"debuglog in node.js","previous":{"time":"2019-05-07","title":"custom display time of notification"},"next":{"time":"2019-05-09","title":"Promise.allSettled"}}}}