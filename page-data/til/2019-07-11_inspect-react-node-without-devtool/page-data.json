{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-07-11_inspect-react-node-without-devtool","result":{"data":{"markdownRemark":{"id":"e6335664-44bc-5877-bfde-94b17431ddb4","html":"<p>在 React 开发过程中，使用 Facebook 提供的官方 Chrome DevTool Extension 可以很方便的查看，修改页面上的 React 组件。然而，有时候也需要在没有 DevTool 的情况下，对 React 组件进行 Debug。比如：在测试电脑上查看一个即时出现的问题，或是在 Internet Explorer / Safari 上调试一个出现的问题等。</p>\n<p>以下介绍如何在不借助 Chrome DevTool Extension 的情况下，完成对当前 React 组件的检查。</p>\n<p>首先，需要获取到某个需要查看的 DOM 元素。可以用 <code class=\"language-text\">querySelector</code> 或是在 Chrome DevTool 中选中某个元素，然后在 Console 中使用 <code class=\"language-text\">$0</code> 获得该元素。</p>\n<p>React 会在元素上添加额外的属性，用于记录当前这个 React 节点的相关数据。可以通过下面的代码来获取这个属性数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> key<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__reactInternalInstance$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React 在添加属性的时候，属性名称会增加一个随机字符串作为后缀（各个 React Node 使用的随机字符串是一致的）。所以需要通过检查 <code class=\"language-text\">startsWith</code> 来判断当前属性是否是 React 使用的属性。</p>\n<p>拿到的这个对象，有一些有用的数据，包括：</p>\n<ul>\n<li>child - 当前元素子元素的头个元素</li>\n<li>elementType/type - 该 React 节点对应的类型。如果是 HTML Element，那么就是一个字符串，比如 <code class=\"language-text\">&quot;div&quot;</code>；如果是一个自定义的 React 元素，则是一个函数（class 或 function）。也就是 <code class=\"language-text\">React.createElement</code> 函数的第一个参数。</li>\n<li>memoizedProps - 当前元素使用的 props。对于任何一个 React 生成的 HTML 元素，对会有对应的 Props。（写 JSX 的时候，每一个属性，包括 children，都是一个 Props 的属性值）</li>\n<li>memoizedState - 当前元素使用的 state</li>\n<li>return - 当前元素所在双向链表的上一个元素</li>\n<li>sibling - 当前元素下一个兄弟元素</li>\n<li>stateNode - 当前元素在组件内可以用的 <code class=\"language-text\">this</code>，包含了 <code class=\"language-text\">props</code>，<code class=\"language-text\">refs</code>，<code class=\"language-text\">state</code>，<code class=\"language-text\">context</code> 以及其他 React Component 的方法。在这个对象的原型链上，还有 React Component 组件的各个方法（比如生命周期函数如 <code class=\"language-text\">componentDidMount</code>）以及 <code class=\"language-text\">setState</code> 等可用方法。换句话说，这里的对象就是一个 React Component Class 生成的实例。如果组件是一个 Functional Component，那么这里就是 <code class=\"language-text\">null</code> 了。</li>\n</ul>\n<p>根据 React 16 中 Fiber 的设计，元素之间是一个双向链表的关系，每一个节点会连结其上一个元素（<code class=\"language-text\">return</code>），子元素的首个元素（<code class=\"language-text\">child</code>），下一个兄弟元素（<code class=\"language-text\">sibling</code>），因而从任意一个中间的 HTML 元素开始，都可以遍历整个 React 树。</p>\n<p>注：从一个元素 A 的 <code class=\"language-text\">sibling</code> 抵达下一个元素 B 后，该元素 B 的 <code class=\"language-text\">return</code> 是他的上一个兄弟元素，也就是 A，而不是真正意义上 React / HTML 树的父元素。只有当 B 是 A 的第一个子元素的时候，B 的 <code class=\"language-text\">return</code> 才是它在树上的父元素。</p>","frontmatter":{"title":"Inspect React Node without DevTool","category":"JavaScript","date":"2019-07-11"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-07-11","title":"Inspect React Node without DevTool","previous":{"time":"2019-07-10","title":"Trigger onChange for React Input"},"next":{"time":"2019-07-14","title":"Abort Git Rebase Process"}}}}