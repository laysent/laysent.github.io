{"componentChunkName":"component---src-pages-til-js","path":"/til/","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"c53d17b5-4c70-5421-bcc4-1ee6a0e8cffc","html":"<p>要获取一个 NPM 包所有的版本信息，可以使用 <code class=\"language-text\">npm view</code> 这个命令。比如，检查 React 这个包的所有版本，并输出成 JSON 格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> view react versions --json</code></pre></div>\n<p>当然，以上只是 CLI 的操作方式，如果希望可以通过编程的方式去了解一个 NPM 包的相关信息，需要换一个方式。注意到 NPM 本身也是一个 <a href=\"https://www.npmjs.com/package/npm\">NPM 包</a>，对应的源码可以在 <a href=\"https://github.com/npm/cli\">GitHub</a> 上找到。其中，<code class=\"language-text\">npm view</code> 这个命令，对应的代码是 <a href=\"https://github.com/npm/cli/blob/c1522be2406a0ea4f14c85753edd42ddd8d7e180/lib/view.js\">lib/view.js</a>。</p>\n<p>通过观察这个文件，不难发现，NPM 底层依赖的其实是 <a href=\"https://www.npmjs.com/package/libnpm\">libnpm</a> 这个库。其中，获取包信息的部分，使用的是 <code class=\"language-text\">libnpm/packument</code> 这个部分。而根据文档，这里 <code class=\"language-text\">libnpm/packument</code> 本质上就是将 <a href=\"https://www.npmjs.com/package/pacote\">pacote</a> 中的 <code class=\"language-text\">packument</code> 接口开放了出来。</p>\n<p>实际的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> packument <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libnpm/packument'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getVersions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">package</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> versions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">packument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to use custom registry</span>\n    registry<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://registry.npm.taobao.org'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// get all meta data</span>\n    fullMetadata<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// prefer to get latest online data</span>\n    <span class=\"token string\">'prefer-online'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> versions<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">packument</code> 这个 API 的返回数据格式，可以参考 <code class=\"language-text\">@types/pacote</code> 中的相关<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/25fe77861d42ff01903fe2e2d1014b3ed354bfde/types/pacote/index.d.ts#L98\">定义</a>。</p>\n<p>需要额外注意的一点是：npm 和一些 registry 服务使用的数据格式可能略有区别。举例来说，npm 的返回数据里，每个版本的 <code class=\"language-text\">dist</code> 中可能包含 <code class=\"language-text\">unpackedSize</code> 数据（optional），表示该版本文件实际的大小；而 <a href=\"https://github.com/npm/cli\">cnpm</a> 返回的数据中，<code class=\"language-text\">dist</code> 内包含的是 <code class=\"language-text\">size</code> 数据（<a href=\"https://github.com/cnpm/cnpmjs.org/blob/26d7147562a1ae21db8bfec26983daf311353d96/models/module.js#L74\">源代码</a>），表示该版本的压缩文件 tar 的大小。</p>","frontmatter":{"date":"2019-10-21","title":"Get Npm Package Info","category":"JavaScript"}}},{"node":{"id":"b5fcadf5-c222-517c-b058-073a0dd96eb8","html":"<p>在 Bash 中，可以通过以下的命令跳转回上一个访问的目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> -</code></pre></div>\n<p>换句话说，<code class=\"language-text\">cd -</code> 可以在最后访问的两个目录间来回跳转。</p>","frontmatter":{"date":"2019-10-20","title":"back to previous folder","category":"Bash"}}},{"node":{"id":"9fb9628c-3773-588d-a419-ec8b93547acf","html":"<p><code class=\"language-text\">-webkit-app-region</code> 是一个 Electron 中的 CSS 属性，可以用于指明用户是否可以通过拖拽当前的 HTML 元素来完成对整个窗体的拖拽。这种情况主要是针对 <a href=\"https://electronjs.org/docs/api/frameless-window\">frameless</a> 窗口的。因为对于 frameless 窗口来说，由于没有了顶部 toolbar，所以默认是无法让用户直接拖拽的。<code class=\"language-text\">-webkit-app-region</code> 相当于提供了一个编程可指明的自定义拖拽区域，用于实现类似窗口顶部 toolbar 的效果。</p>\n<p>具体的使用方法非常简单，只需要针对特定的 HTML 元素，应用如下的 CSS 就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.draggable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这里需要注意到的一点是，如果一个区域因为某个 HTML 元素的存在变成了 <code class=\"language-text\">-webkit-app-region: drag</code>，那么对于 Windows 系统来说（Mac 经测试不会有这个问题），这个区域上的其他元素（不论是否在 drag 元素的“上方”）都无法收到鼠标的事件（如 click / hover 等）。如果希望可以继续保留某些元素（比如按钮）的鼠标事件，需要在这些元素上通过如下的方式显示声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> no-drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Electron 相关的<a href=\"https://electronjs.org/docs/api/frameless-window#draggable-region\">文档说明</a>。</p>\n<p>关于使用 <code class=\"language-text\">-webkit-app-region: drag</code> 后其他区域内元素就无法收获鼠标事件的讨论，可以参考 Electron 的<a href=\"https://github.com/electron/electron/issues/1354#issuecomment-90315551\">这个 issue</a>。</p>","frontmatter":{"date":"2019-10-17","title":"webkit-app-region","category":"Electron"}}},{"node":{"id":"79325fcf-6c20-50a0-9a24-d1a5178dedb0","html":"<p>因为 Electron 项目天然的集成了 Node.js，可以直接使用 <code class=\"language-text\">require</code> 命令来加载其他的模块。因此，很多项目中就不再使用 Webpack 或 Rollup 来对项目进行打包操作。简单的使用 TypeScript 或 Babel 进行转化，保证 <code class=\"language-text\">import</code> 转化成了 <code class=\"language-text\">require</code> 命令，就能顺利的跑起来了。</p>\n<p>然而，如果细究下去，直接使用 <code class=\"language-text\">require</code> 依次加载各个文件和通过打包将所有需要加载的部分一次性载入，两者之间还是存在这性能上的差距。具体的数据差异，可以通过这个<a href=\"https://github.com/laysent/electron-require-test\">测试项目</a>来实际了解。</p>\n<p>实测中，大约 1000 个文件，打包和不打包的版本，载入的时间差距在 200ms 以上。对于用户来说，这个已经是可感知的延迟了（参考<a href=\"https://www.humanbenchmark.com/tests/reactiontime\">数据</a>）。</p>\n<p>一次 Electron require 涉及的步骤包括：</p>\n<ol>\n<li>根据请求的地址，寻找文件（Electron 的 <a href=\"https://github.com/electron/electron/blob/24b3d66767d89c0b119d1fcc738db4b7f456d913/lib/common/reset-search-paths.ts#L36\">_resolveFilename</a> 方法 > Node.js 中的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L787\">_resolveFilename</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L495\">_findPath</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L118\">stat</a> 方法）</li>\n<li>根据实际地址读取文件（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L822\">Module.prototype.load</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L980\">Module._extensions[‘.js’]</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L1010\">fs.readFileSync</a> 方法）</li>\n<li>编译加载文件内容（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L931\">Module.prototype._compile</a> 方法）</li>\n</ol>\n<p>其中，第一步和第二步的 IO 都是比较耗时的操作。特别是对于第一步来说，寻找文件是一个过程。对于非相对路径的文件来说，如果不能在当前的 node_modules 下找到，Node.js 就会逐级往上寻找，直到成功或最终失败。第三步编译和运行的过程，耗时将和内容具体的长短以及具体执行的内容相关。</p>\n<p>由于不论是直接 require 的方法还是打包的操作，最终需要执行的程序都是基本相同的（对于 Webpack 来说，有一些 runtime 代码的消耗），也就是第三步的时间两个方案都是大体相同的。因而总体上来说，两种方案的差异主要体现在第一步和第二步的耗时上。由于单个打包文件加载的方案可以节省多次 IO 的查找和读取操作，因而最终会节省不少的时间。</p>","frontmatter":{"date":"2019-10-16","title":"Require Strategy in Electron","category":"Electron"}}},{"node":{"id":"cd182026-2d57-5a6b-83b4-a7f384ce0957","html":"<p>在日常的开发过程中，对于一个按钮或者链接，一般会附上一个 <code class=\"language-text\">onClick</code> 事件，以响应用户的点击操作。当用户实际按下按钮或链接之后，再通过 <code class=\"language-text\">onClick</code> 事件去触发之后要进行的流程（比如网络请求或是链接跳转等）。</p>\n<p>如果对于用户操作后的反馈速度有一定的要求，这里的行为就需要进行优化。以链接为例，一个常见的操作方法是（比如 <a href=\"https://github.com/GoogleChromeLabs/quicklink\">quicklink</a>），用程序对可视范围内的链接地址进行预加载（使用 <code class=\"language-text\">prefetch</code>）。这样，当用户真正点击的时候，资源很可能已经得到了加载，打开速度就会显著提升。</p>\n<p>当然，这样的行为是没有预判的，纯粹暴力的进行可能的预备操作。如果预备操作损耗较多，这样的操作就显得不方便了。</p>\n<p>一个更加“智能”的操作是，仅当用户“点击”了之后才进行预加载。实际上，即使是一个点击的的操作，也会分成好几个不同的事件，包括 <code class=\"language-text\">MouseDown</code>，<code class=\"language-text\">MouseUp</code> 和 <code class=\"language-text\">Click</code>。在 <code class=\"language-text\">MouseDown</code> 和 <code class=\"language-text\">Click</code> 之间，差着大约 100ms 的时间。</p>\n<p>换句话说，如果在 <code class=\"language-text\">MouseDown</code> 的时候就开始预处理，等到 <code class=\"language-text\">Click</code> 时才真正进行加载，那么整体的加载时间会减少 100ms 左右。在某些情况下，这也是个不小的提升了。</p>\n<p>可以用下面的这段代码实际测试一下，<code class=\"language-text\">MouseDown</code> 事件和 <code class=\"language-text\">Click</code> 事件之间的时间差（具体时间差因人而异）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Click Me'</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmousedown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Mousedown: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Click: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也可以直接点击下面这个按钮尝试：</p>\n<button onmousedown=\"window.__down=Date.now()\" onclick=\"this.textContent='Took:'+(Date.now() - window.__down)+' ms'\">\n  Click Me\n</button>\n<p></p>\n<p>当然，比这个略激进的操作，可以将 <code class=\"language-text\">MouseDown</code> 事件换成 <code class=\"language-text\">MouseEnter</code> 事件，这样在 Hover 的时候就会开始预加载。大概能提前 300ms 左右开始操作，当然存在一定的误判风险（比如用户只是划过了鼠标，并没有想要点击的意愿）。</p>\n<p>可以参考 <a href=\"http://instantclick.io/\">InstantClick</a> 了解更多实现的细节。</p>","frontmatter":{"date":"2019-10-15","title":"MouseDown to Click","category":"JavaScript"}}},{"node":{"id":"d7262571-a581-5b2f-8938-103fb637b4ce","html":"<p>使用 Node 解析当前的 Git Config 文件，有两个可以辅助的 npm 库：</p>\n<ol>\n<li><code class=\"language-text\">git-config-path</code>：可以用于判断当前的 Git Config 地址</li>\n</ol>\n<p>例如，需要获取全局 Git Config 地址，可以运行：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> configPath <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git-config-path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>更多可以参考<a href=\"https://github.com/jonschlinkert/git-config-path\">文档</a>。</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">ini</code>：可以用于解析和处理 ini 类型的配置文件，<a href=\"https://github.com/jonschlinkert/parse-git-config\">parse-git-config</a> 也使用了这个来解析 Git Config 文件。</li>\n</ol>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> configPath <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git-config-path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ini <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ini'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> ini<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> ini<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">,</span> stringify<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更多内容，可以参考<a href=\"https://github.com/npm/ini#readme\">文档</a>。</p>","frontmatter":{"date":"2019-10-14","title":"Parse GitConfig via Node","category":"Tool"}}},{"node":{"id":"9018df9c-3116-5212-8829-3e63b77ba5cd","html":"<p>在浏览器渲染 SVG 的时候，可以通过 <code class=\"language-text\">shape-rendering</code> 这一属性，来控制浏览器对 SVG 抗锯齿效果的展示。<code class=\"language-text\">shape-rendering</code> 支持从三个纬度来权衡 SVG 的渲染效果，这三个纬度分别是：速度、曲线精细度以及曲线的锐利程度。</p>\n<ul>\n<li><code class=\"language-text\">auto</code>，这个是默认值，表示由浏览器来决定改如何显示</li>\n<li><code class=\"language-text\">optimizeSpeed</code>，顾名思义，这个要求浏览器以渲染的速度优先，抗锯齿可能会被浏览器关闭</li>\n<li><code class=\"language-text\">crispEdges</code>，这个选项要求浏览器以曲线的锐利程度为第一优先级。这种情况下，速度和精细度的优先级会被降低。浏览器可能会关闭抗锯齿，或者只针对接近垂直和水平的线才开启抗锯齿的功能。同时，浏览器可能会微调线的位置和宽度，以适应显示器的物理像素点</li>\n<li><code class=\"language-text\">geometricPrecision</code>，这个选项要求浏览器以更好的精度来渲染图像，为此可能会牺牲渲染的性能（速度）和边界的清晰度</li>\n</ul>\n<p>下图从左到右分别展示了 <code class=\"language-text\">geometricPrecision</code>，<code class=\"language-text\">crispEdges</code> 和 <code class=\"language-text\">optimizeSpeed</code> 三种情况下，同一个圆的显示效果。</p>\n<svg viewBox=\"0 0 640 200\" xmlns=\"http://www.w3.org/2000/svg\" width=\"740\">\n  <circle cx=\"100\" cy=\"100\" r=\"100\" shape-rendering=\"geometricPrecision\" fill=\"#ff8787\" />\n  <circle cx=\"320\" cy=\"100\" r=\"100\" shape-rendering=\"crispEdges\" fill=\"#da77f2\" />\n  <circle cx=\"540\" cy=\"100\" r=\"100\" shape-rendering=\"optimizeSpeed\" fill=\"#748ffc\" />\n</svg>\n<p>不难看出，<code class=\"language-text\">geometricPrecision</code> 的效果是最平滑的，但是边缘清晰度不足；<code class=\"language-text\">crispEdges</code> 边缘很锐利，但是有一些毛边（越是低分辨率的屏幕，效果越明显）；<code class=\"language-text\">optimizeSpeed</code> 的显示效果也明显有毛边，不过效果和 <code class=\"language-text\">crispEdges</code> 略微不同，可以看得出底层使用的算法是不太一样的。</p>\n<p>上图的 HTML 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0 0 640 200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>740<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>geometricPrecision<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ff8787<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>crispEdges<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#da77f2<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>optimizeSpeed<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#748ffc<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>另外，除了在 SVG 中直接写属性之外，也可以通过 CSS 来给 SVG 加上相关的 <code class=\"language-text\">shape-rendering</code> 值：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">svg</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">shape-rendering</span><span class=\"token punctuation\">:</span> geometricPrecision<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>MDN 的相关介绍见<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering\">这里</a>。</p>","frontmatter":{"date":"2019-10-11","title":"shape-rendering","category":"CSS"}}},{"node":{"id":"63fe13ef-a8b4-5225-8fe5-8e402f4609f3","html":"<p>图标的使用，之前的技术方案，一般都是使用特殊的字体文件进行的。而现在随着浏览器支持的变化，越来越多的技术方案开始迁移到直接使用 SVG 图标了。</p>\n<p>当然，为了迁移的平滑进行，最好是可以尽可能的避免改动。在 CSS 层面上，一般针对图标有两个需要设置的部分，一个是颜色，一个是大小。</p>\n<p>对于颜色，字体文件使用 <code class=\"language-text\">color</code> 属性进行着色。SVG 中可以用 <code class=\"language-text\">fill</code> 着色，用 <code class=\"language-text\">stroke</code> 描边。不过，由于 SVG 图标一般都是一个或多个 <code class=\"language-text\">path</code> 组成的，实际一般使用 <code class=\"language-text\">fill</code> 属性就可以了。这里，可以通过 CSS 中的 <code class=\"language-text\">currentColor</code> 来完成从 <code class=\"language-text\">color</code> 到 <code class=\"language-text\">fill</code> 的映射关系：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.icon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> currentColor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">currentColor</code> 的支持浏览器可以参考 <a href=\"https://caniuse.com/#feat=currentcolor\">caniuse</a>。总体上来说，IE 9+ 都是支持的，是一个不需要有太多顾虑就可以使用的功能。</p>\n<p>对于大小，字体文件使用 <code class=\"language-text\">font-size</code> 属性控制大小。SVG 中则使用 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 进行控制。这里可以取巧的对所有 SVG 图标统一设置一个如下的 CSS 样式，一步将大小的设置迁移过来：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.icon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的方案可以解决大部分的大小问题，但是要警惕部分字体图标也设置了 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 的情况。这种时候，图标占的空间由 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 确定，但是实际图标的大小由 <code class=\"language-text\">font-size</code> 确定。相当于 SVG 图标外面加上了一圈 <code class=\"language-text\">pending</code>。实际在迁移的时候，也可以用这个方案，将 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 改成和原先 <code class=\"language-text\">font-size</code> 一样的值，其中变化的差值部分用 <code class=\"language-text\">pending</code> 补上。</p>","frontmatter":{"date":"2019-10-10","title":"iconfont to svg","category":"CSS"}}},{"node":{"id":"448f8053-cdef-5e30-bca1-6db31d71d267","html":"<p>在 HTTP 协议中，301 Moved Permanently 和 308 Permanent Redirect 在语意上是一致的，都表示一个资源已经被永久性地转移到了一个新的地址（这一点和 302 / 307 对应，后者只是资源的地址被临时修改了）。在这种情况下，浏览器会跳转到新的资源地址，SEO 也会更新资源对应的数据信息。</p>\n<p>虽然 301 和 308 的语意是一致的，但是在实际的浏览器行为上，会有少许差别。根据 <a href=\"https://tools.ietf.org/html/rfc7231#section-6.4.2\">RFC7231</a> 中的表述，因为一些历史原因，客户端有可能会将 301 重定向的请求方法从 POST 修改为 GET。而根据 <a href=\"https://tools.ietf.org/html/rfc7538#section-3\">RFC7238</a> 中的定义，308 重定向是不允许客户端对请求方法进行修改的。</p>\n<p>这里 302 和 307 的区别也是同理。整体的区别见下表：</p>\n<table>\n<thead>\n<tr>\n<th>是否允许改变请求方法</th>\n<th>永久重定向</th>\n<th>临时重定向</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>允许</td>\n<td>301</td>\n<td>302</td>\n</tr>\n<tr>\n<td>不允许</td>\n<td>308</td>\n<td>307</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"date":"2019-10-09","title":"HTTP Status 301 & 308","category":"HTTP"}}},{"node":{"id":"dd5f1e33-ac72-5dc8-a677-eabec28b82f9","html":"<p>在 JavaScript 中，对模块的引用声明一般写在文件的顶部，而实际引用的 API，可能在运行时的非常晚才会被真正的使用到。看上去，这些 <code class=\"language-text\">import</code> 语句并没有什么问题。但实际上，由于引用模块自身的初始化工作以及可能的副作用，<code class=\"language-text\">import</code> 带来的性能损耗有时候也是不容忽视的。</p>\n<p>首先来看下面这个 JavaScript 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defaults <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → { 'a': 1, 'b': 2 }</span></code></pre></div>\n<p>看上去是一段非常简单的 JavaScript 代码，只是执行了一个很简单的操作。基本等价于下面这段代码（Lodash 的 API 可以参考<a href=\"https://lodash.com/docs/4.17.15#defaults\">文档</a>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然而两者有一个很重要的区别，就是前者引用了 Lodash 的 API。这个看上去是一个非常简单的操作，但实际上也有不小的消耗。在程序执行 <code class=\"language-text\">import</code> 语句的时候，会加载 Lodash 完整的初始化代码，并给 <code class=\"language-text\">defaults</code> 变量赋值 Lodash 的 defaults API。其中，Lodash 的初始化代码完整执行完成，需要大概 15ms 左右的时间。实际上，如果改成只引用 <code class=\"language-text\">defaults</code> 这一个 API，最终的效果就会好很多：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> defaults <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/defaults'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">defaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果累计了很多这样小的初始化成本，最终就会导致在应用实际启动的过程中，产生几百毫秒的延迟。这一点在 Web 应用中相对还好，毕竟体积和初始化速度多少存在着一些关系，而 Web 应用对体积非常的敏感；但是同样的问题，到了 Electron 项目中，就有可能变得不容小觑起来。作为 PC 级别的应用，Electron 的打包往往对体积没有那么严苛的要求。很多时候多一个库，少一个库，都没有太大的差别。然而，各个库初始化的速度累计起来，却有可能拖累本就不快的 App 启动速度。</p>\n<p>再举一个小例子。下面的这段代码看上去似乎没有什么问题：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，实际加载 crypto 模块可能需要 5ms 的时间。这个时间在初始化的时候就用掉了，但实际用到 crypto 模块的时间却可能还早（或者压根最终没触发）。考虑到 require 本身就有缓存的机制，将这一步骤放到第一次执行的时候再做，就可以省下这 5ms 的加载时间：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，上面只是一些例子。真正在实际的项目中需要解决这一问题，第一步，就是知道有哪些代码在初始阶段被加载了，分别花了多长的时间。这看上去是一个挺麻烦的工作，但如果应用是使用 Webpack 进行打包的，那么问题就变得不那么麻烦了。</p>\n<p>Webpack 由于需要支持 HMR 以及 Dynamic Import，在编译的时候需要打包一个运行时进去，用于管理各个 Chunk 之间的引用（正因如此，Webpack 的打包体积往往会大于用 Rollup 打包的体积）。而正因为有了这个统一的运行时，使得模块间引用的耗时变得非常容易统计了。只需要在下面这行代码的前和后，分别用 Performance 进行一次打点计时，就可以很容易的知道每一个模块实际的加载耗时了。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">modules<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n  module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>\n  __webpack_require__\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>修改后的代码大概如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> performance <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span>moduleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodules<span class=\"token punctuation\">[</span>moduleId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n  module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">,</span>\n  module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">,</span>\n  __webpack_require__\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> performance <span class=\"token operator\">!==</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">measure</span><span class=\"token punctuation\">(</span>moduleId<span class=\"token punctuation\">,</span> moduleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">clearMarks</span><span class=\"token punctuation\">(</span>moduleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">clearMeasures</span><span class=\"token punctuation\">(</span>moduleId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里需要加上 <code class=\"language-text\">typeof performance !== &#39;undefined&#39;</code> 的主要原因是，一些 loader（如 css-loader）可能会在 Node 环境执行运行时的代码，这种情况下不可以直接调用 Performance 相关的 API，会报错。</p>\n<p>由于 Webpack 基于 Tapable 架构的关系，要编写一个插件来修改 Webpack 原本的运行时代码也非常的容易。观察 Webpack 的<a href=\"https://github.com/webpack/webpack/blob/758269e81456c946a96b521ee936dbec99d07132/lib/MainTemplate.js#L196\">源码</a> 不难发现，只需要针对 <code class=\"language-text\">mainTemplate</code> 的 <code class=\"language-text\">require</code> 进行一些改动就可以了。同时，从 Webpack 的代码历史来看，上面这句代码前后的 Comment 一直都没有变过。于是，只需要找到模块引用前后的注释，用字符串替换的方式，插入这些新的性能打点语句就可以了。</p>\n<p>最终的代码可以参考 NPM 的库 <a href=\"http://npmjs.com/package/webpack-require-performance-plugin\">webpack-require-performance-plugin</a>，源码在<a href=\"https://github.com/laysent/webpack-require-performance-plugin\">这里</a>。</p>","frontmatter":{"date":"2019-10-08","title":"Webpack Require Performance","category":"Build"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}