{"componentChunkName":"component---src-pages-til-js","path":"/til/","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"8851beea-d663-5eca-a70d-daacfb58475f","html":"<p>在 Houdini 实现的过程中（<a href=\"https://developers.google.com/web/updates/2016/05/houdini\">什么是 Houdini？</a>），Chrome 已经在 66 中已经实现了一部分 CSS 样式的 Typed Object Modal 支持（支持的列表可以参考<a href=\"https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/css/cssom/README.md\">这里</a>）。</p>\n<p>实现之后，在 JavaScript 中就可以通过 <code class=\"language-text\">window.CSS</code> 对象上的各类属性 API，生成指定类型的 CSS 属性值。看一个简单的例子：</p>\n<p>在以前的实现中，往往需要这么写代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'px'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样写，会存在几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，需要在字符串和数字之间进行转化；</li>\n<li>CSS 的属性名称是用 <code class=\"language-text\">-</code> 连接的，但是在 <code class=\"language-text\">CSSStyleDeclaration</code> 中却需要写成小驼峰的形式（<code class=\"language-text\">font-size</code> 变成 <code class=\"language-text\">fontSize</code>）；</li>\n<li>如果设置违法的值，代码会默默失败，没有任何错误提示；</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no error! not success!</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>即使设置的属性值是数字，但是实际拿到的时候，值又变成了字符串</li>\n</ol>\n<p>如，上例中的 <code class=\"language-text\">element.style.opacity</code>，虽然设置的值是 <code class=\"language-text\">1</code>，但如果运行 <code class=\"language-text\">typeof element.style.opacity</code> 结果却是 <code class=\"language-text\">string</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果试图直接进行运算，则可能得不到预料中的结果。比如，下面的输出依然是 <code class=\"language-text\">0.1</code> 而不是 <code class=\"language-text\">0.6</code>，因为 <code class=\"language-text\">element.style.opacity += 0.5</code> 的结果是 <code class=\"language-text\">0.10.5</code>（字符串拼接），作为一个非法值，直接被浏览器抛弃了（见第三点）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">+=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 CSS Typed Object Model 之后，代码可以改写成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">px</span><span class=\"token punctuation\">(</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不难看出，这样的写法，基本解决了上面提到的几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，不再需要手动进行字符串和数值的转化。<code class=\"language-text\">CSS.px</code> 这个函数可以将数值转化成一个带单位的对象，用于给 <code class=\"language-text\">attributeStyleMap</code> 赋值。另外，由于这个值 <code class=\"language-text\">toString</code> 之后就是类似 <code class=\"language-text\">16px</code> 的字符串，因此也可以直接给 <code class=\"language-text\">element.style.fontSize</code> 进行赋值。同时，从 <code class=\"language-text\">attributeStyleMap</code> 中拿到的数据，也是带单位的对象，对象中的 <code class=\"language-text\">value</code> 就是数值，<code class=\"language-text\">unit</code> 是字符串，表示单位，不再需要手动解析；</li>\n<li><code class=\"language-text\">attributeStyleMap</code> 的属性名称和 CSS 的属性名称是一致的，不需要像以前一样在 JavaScript 中手动改成小驼峰的写法；</li>\n<li>如果设置了违法的值，代码会报错：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上代码会输出报错：<code class=\"language-text\">TypeError: Failed to execute &#39;set&#39; on &#39;StylePropertyMap&#39;: Invalid type for property</code>。</p>\n<ol start=\"4\">\n<li>应该是数值的结果，拿到的时候也是数值，而不是字符串（因此数值计算也不会出错）：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，这里如果这么些，结果依然是数字：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>另外，使用 CSS Typed OM 还有一些其他额外的好处，比如，浏览器不需要序列化和反序列化结果，因此性能更好（一个简单的性能检测可以查看<a href=\"https://github.com/w3c/css-houdini-drafts/issues/634#issuecomment-366358609\">这里</a>，大概有 30% 左右的提升）。</p>\n<p>更多更详细关于 CSS Typed OM 的介绍，可以参考 Google 的这篇 <a href=\"https://developers.google.com/web/updates/2018/03/cssom\">Blog</a>。</p>\n<p>P.S. 目前，其他的浏览器支持情况依然不理想，可以参考 <a href=\"https://ishoudinireadyyet.com/\">Is Houdini ready yet?</a> 网站上最新的支持情况了解详情。就实际情况来看，可以在 Electron 3 （基于 Chrome 66，见<a href=\"https://electronjs.org/releases/stable?version=3&#x26;page=7\">这里</a>）或以上版本使用，但暂时不建议在 Web 项目中引入。</p>","frontmatter":{"date":"2019-10-30","title":"CSS Typed Object Model","category":"CSS"}}},{"node":{"id":"332fb33c-4a96-53f4-bc6b-152610186b51","html":"<p>Mobx 中，可以直接通过 <code class=\"language-text\">observable</code> 的方式来控制内部的 state，而不再使用 React 自带的 state 功能。一般的写法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n\n@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样写的优势在于，可以将何时渲染的判断交给了 Mobx 去处理，不用手动去处理。</p>\n<p>对于需要用到 <code class=\"language-text\">observable</code> 组合数据的情况，可以使用 <code class=\"language-text\">computed</code> 来生成一个新的 <code class=\"language-text\">observable</code> 值，也可以直接使用 getter 函数。以下的两个方案在效果上是等价的：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMany <span class=\"token operator\">?</span> <span class=\"token string\">'many'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'few'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n\n@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  @computed\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMany <span class=\"token operator\">?</span> <span class=\"token string\">'many'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'few'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之所以两者是等价的，理由很简单。在执行 render 函数的时候，Mobx 注意到 <code class=\"language-text\">this.isMany</code> 被使用了，而在调用这个 getter 函数的时候，实际使用到了 <code class=\"language-text\">this.num</code> 这个 observable。因此，当 <code class=\"language-text\">this.num</code> 发生了变化之后，Mobx 知道需要重新调用 render 函数进行绘制。而对于使用了 computed 的情况来说，情况会更简单一些，<code class=\"language-text\">this.num</code> 这个 observable 的变化触发了 <code class=\"language-text\">this.isMany</code> 的重新计算，最终在 <code class=\"language-text\">this.isMany</code> 值变化之后触发了 render 函数的重新计算。</p>\n<p>然而需要注意的一点是，两者只是在效果上等价。在实际运算过程中，computed 的方案有两个优势：</p>\n<ol>\n<li>代码看上去更清晰。render 是因为 computed 的数据触发的，这一点在代码上可以很容易的看出来；而第一种方案，是否触发 getter 函数，其实需要多思考一下才能确定；</li>\n<li>实际执行效率更高。使用 getter 的方案，由于 render 函数实际上是和 <code class=\"language-text\">this.num</code> 这个 observable 进行关联的，因此哪怕 <code class=\"language-text\">this.isMany</code> 这个 getter 函数没有发生值的变化，只要 <code class=\"language-text\">this.num</code> 变了，render 函数都需要被执行；而对于使用 computed 的情况，因为 render 是和 <code class=\"language-text\">this.isMany</code> 进行关联的，实际 <code class=\"language-text\">this.isMany</code> 没有变化的时候，是不需要触发重绘的。换句话说，前者 getter 的方案，在 <code class=\"language-text\">this.num</code> 从 1 涨到 6 的过程中，一共触发了五次重新渲染；而后者 <code class=\"language-text\">computed</code> 的方案，只触发了一次重新渲染（当 <code class=\"language-text\">this.num = 6</code> 的时候）</li>\n</ol>\n<p>针对第二点，Mobx 的 GitHub issue 中作者也有相关的说明，见<a href=\"https://github.com/mobxjs/mobx/issues/161#issuecomment-196744152\">这里</a>。</p>","frontmatter":{"date":"2019-10-29","title":"computed and getter in Mobx","category":"JavaScript"}}},{"node":{"id":"15786218-7294-5212-8a5c-878f74283838","html":"<p>在 Node.js 中，可以通过 <code class=\"language-text\">os</code> 模块的 <code class=\"language-text\">networkInterfaces</code> API 来获取当前机器的 IP 数据。返回的结果类似于 <code class=\"language-text\">ifconfig</code> 或 <code class=\"language-text\">ipconfig</code> 命令。</p>\n<p>以获取当前主机的 IPv4 地址为例，可以写类似如下的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIPAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> interfaces <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">networkInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">interface</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">.</span>family <span class=\"token operator\">===</span> <span class=\"token string\">'IPv4'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">interface</span></span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>简单的说明如下：</p>\n<ul>\n<li><code class=\"language-text\">internal</code> 用于表示当前的地址是否是本地回环地址或是其他外部无法访问的地址（例：127.0.0.1）；</li>\n<li><code class=\"language-text\">family</code> 用于表示当前地址的类型，将会是 <code class=\"language-text\">IPv4</code> 或 <code class=\"language-text\">IPv6</code> 中的一种；</li>\n<li><code class=\"language-text\">address</code> 用于表示当前的 IP 地址；</li>\n<li><code class=\"language-text\">os.networkInterfaces</code> 的返回是一个对象，key 用于表示 network interface，比如常见的 <code class=\"language-text\">lo</code> 或者 <code class=\"language-text\">eth0</code> 等。</li>\n</ul>\n<p>更多的返回数据及解释，可以参考<a href=\"https://nodejs.org/api/os.html#os_os_networkinterfaces\">官方文档</a>。</p>","frontmatter":{"date":"2019-10-28","title":"Get Current IP Address","category":"JavaScript"}}},{"node":{"id":"9476da5c-4afa-59a0-8cca-d1690d1b4bc0","html":"<p>在一个网站中，并不是所有的页面都希望被搜索引擎的爬虫收录。为此，可以通过一些特殊的 meta 信息，来调节搜索引擎爬虫的行为。</p>\n<section><h2>nofollow</h2><p>使用方法如下：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nofollow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div><p>或者，针对页面上某一个具体的链接，也可以加上 <code class=\"language-text\">nofollow</code> 的标记：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>some-link-to-backend-login-page<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>nofollow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div><p>有了 <code class=\"language-text\">nofollow</code> 的标记，搜索引擎的爬虫就不会做进一步的爬取操作了。对于第一种写法，当前页面内所有的链接地址爬虫都不会再去访问了；对于第二种写法，则是这个指定的链接在本次爬取中不会被访问（如果其他地方有引用，且没有加上 <code class=\"language-text\">nofollow</code> 的标记，搜索引擎依然可能会去访问这个页面）。</p><p>一些常见的使用场景：付费访问的页面、不被信任的页面（比如一些留言板快）等。</p></section>\n<section><h2>noindex</h2><p>如果希望爬虫不要将当前页面的访问结果存储到数据库中用于未来搜索结果的展示，可以使用 <code class=\"language-text\">noindex</code> 标记。用法如下：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>noindex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div><p>一些常见的使用场景：后台登陆页面、感谢页面（SEO 的价值不大）或是一些内容动态的页面。</p></section>\n<section><h2>noindex nofollow</h2><p>对于既不希望爬虫进一步访问，也不希望结果被收录的页面，可以将两者都加上：</p><div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>noindex nofollow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div></section>","frontmatter":{"date":"2019-10-24","title":"noindex & nofollow","category":"SEO"}}},{"node":{"id":"6e82ef91-2e1a-58b0-879c-7e2818cfb8fd","html":"<p>在 Webpack 的配置中，有一个 <code class=\"language-text\">performance</code> 选项。根据 <code class=\"language-text\">performance</code> 中的配置，Webpack 可以针对打包后的结果的实际大小，进行警告或报错。</p>\n<p>具体的配置参数如下：</p>\n<ul>\n<li><code class=\"language-text\">performance.hints</code></li>\n</ul>\n<p>这个参数用于告诉 Webpack 最终产生的报告需要以什么样的方式呈现出来。可能的配置包括 <code class=\"language-text\">false</code>，<code class=\"language-text\">&#39;warning&#39;</code> 和 <code class=\"language-text\">&#39;error&#39;</code>。建议在 CI 中将这部分配置成 <code class=\"language-text\">&#39;error&#39;</code>，保证过大体积的文件无法被发布到线上。</p>\n<p>而具体多大的文件算“过大”，则需要用到下面提到的两个参数：</p>\n<ul>\n<li><code class=\"language-text\">performance.maxEntrypointSize</code></li>\n<li><code class=\"language-text\">performance.maxAssetSize</code></li>\n</ul>\n<p>前者表示入口文件能接受的最大文件尺寸（单位是 byte），后者表示其他生成的文件所能接受的最大尺寸（默认情况下包括了所有的 CSS，非入口 JS 文件，以及字体、图片等文件）。</p>\n<p>比如，入口 JavaScript 文件不能超过 250kb，而其余文件不能超过 100kb：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  performance<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    maxEntrypointSize<span class=\"token punctuation\">:</span> <span class=\"token number\">250_000</span><span class=\"token punctuation\">,</span>\n    maxAssetSize<span class=\"token punctuation\">:</span> <span class=\"token number\">100_000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>默认情况下，除了 <code class=\"language-text\">.map</code> 文件外，所有其他产生的文件都会被考虑在内。如果希望改变这个默认的行为，可以使用下面的这个参数：</p>\n<ul>\n<li><code class=\"language-text\">performance.assetFilter</code></li>\n</ul>\n<p>比如，只考虑 JavaScript 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  performance<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">assetFilter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">assetFilename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> assetFilename<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>官方文档在<a href=\"https://webpack.js.org/configuration/performance/\">这里</a>。</p>","frontmatter":{"date":"2019-10-23","title":"Webpack File Limit Error","category":"Build"}}},{"node":{"id":"9c56df61-73a4-5eb4-a4eb-4158947a5a66","html":"<p><code class=\"language-text\">document.designMode</code> 这个属性，可以用于控制当前的整个页面是否可以直接被编辑。可以设置的属性值包括 <code class=\"language-text\">on</code> 和 <code class=\"language-text\">off</code> 两种。如果设置为 <code class=\"language-text\">on</code>，那么相当于开启了全页面范围的 <code class=\"language-text\">contenteditable=true</code>。默认情况下，这个值是 <code class=\"language-text\">off</code>。</p>\n<p>通过开关这个值，非程序员也可以轻松的对当前页面进行简单的修改（主要是文案的部分）。一些简单的需求，PM 和 UX 就可以直接进行尝试，而不需要再借助程序员的帮忙了。当然，对页面“造假”的门槛也变低了。</p>\n<p>可以通过下面的按钮来实际体验一下这个功能。</p>\n<p>\n  <button onclick=\"document.designMode=(document.designMode==='off'?'on':'off')\">\n    Toggle Design Mode\n  </button>\n</p>\n<p>更多的说明及浏览器支持情况（基本可以认为全支持），可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode\">MDN</a>。</p>","frontmatter":{"date":"2019-10-22","title":"Document DesignMode","category":"JavaScript"}}},{"node":{"id":"c53d17b5-4c70-5421-bcc4-1ee6a0e8cffc","html":"<p>要获取一个 NPM 包所有的版本信息，可以使用 <code class=\"language-text\">npm view</code> 这个命令。比如，检查 React 这个包的所有版本，并输出成 JSON 格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> view react versions --json</code></pre></div>\n<p>当然，以上只是 CLI 的操作方式，如果希望可以通过编程的方式去了解一个 NPM 包的相关信息，需要换一个方式。注意到 NPM 本身也是一个 <a href=\"https://www.npmjs.com/package/npm\">NPM 包</a>，对应的源码可以在 <a href=\"https://github.com/npm/cli\">GitHub</a> 上找到。其中，<code class=\"language-text\">npm view</code> 这个命令，对应的代码是 <a href=\"https://github.com/npm/cli/blob/c1522be2406a0ea4f14c85753edd42ddd8d7e180/lib/view.js\">lib/view.js</a>。</p>\n<p>通过观察这个文件，不难发现，NPM 底层依赖的其实是 <a href=\"https://www.npmjs.com/package/libnpm\">libnpm</a> 这个库。其中，获取包信息的部分，使用的是 <code class=\"language-text\">libnpm/packument</code> 这个部分。而根据文档，这里 <code class=\"language-text\">libnpm/packument</code> 本质上就是将 <a href=\"https://www.npmjs.com/package/pacote\">pacote</a> 中的 <code class=\"language-text\">packument</code> 接口开放了出来。</p>\n<p>实际的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> packument <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libnpm/packument'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getVersions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">package</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> versions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">packument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to use custom registry</span>\n    registry<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://registry.npm.taobao.org'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// get all meta data</span>\n    fullMetadata<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// prefer to get latest online data</span>\n    <span class=\"token string\">'prefer-online'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> versions<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">packument</code> 这个 API 的返回数据格式，可以参考 <code class=\"language-text\">@types/pacote</code> 中的相关<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/25fe77861d42ff01903fe2e2d1014b3ed354bfde/types/pacote/index.d.ts#L98\">定义</a>。</p>\n<p>需要额外注意的一点是：npm 和一些 registry 服务使用的数据格式可能略有区别。举例来说，npm 的返回数据里，每个版本的 <code class=\"language-text\">dist</code> 中可能包含 <code class=\"language-text\">unpackedSize</code> 数据（optional），表示该版本文件实际的大小；而 <a href=\"https://github.com/npm/cli\">cnpm</a> 返回的数据中，<code class=\"language-text\">dist</code> 内包含的是 <code class=\"language-text\">size</code> 数据（<a href=\"https://github.com/cnpm/cnpmjs.org/blob/26d7147562a1ae21db8bfec26983daf311353d96/models/module.js#L74\">源代码</a>），表示该版本的压缩文件 tar 的大小。</p>","frontmatter":{"date":"2019-10-21","title":"Get Npm Package Info","category":"JavaScript"}}},{"node":{"id":"b5fcadf5-c222-517c-b058-073a0dd96eb8","html":"<p>在 Bash 中，可以通过以下的命令跳转回上一个访问的目录：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> -</code></pre></div>\n<p>换句话说，<code class=\"language-text\">cd -</code> 可以在最后访问的两个目录间来回跳转。</p>","frontmatter":{"date":"2019-10-20","title":"back to previous folder","category":"Bash"}}},{"node":{"id":"9fb9628c-3773-588d-a419-ec8b93547acf","html":"<p><code class=\"language-text\">-webkit-app-region</code> 是一个 Electron 中的 CSS 属性，可以用于指明用户是否可以通过拖拽当前的 HTML 元素来完成对整个窗体的拖拽。这种情况主要是针对 <a href=\"https://electronjs.org/docs/api/frameless-window\">frameless</a> 窗口的。因为对于 frameless 窗口来说，由于没有了顶部 toolbar，所以默认是无法让用户直接拖拽的。<code class=\"language-text\">-webkit-app-region</code> 相当于提供了一个编程可指明的自定义拖拽区域，用于实现类似窗口顶部 toolbar 的效果。</p>\n<p>具体的使用方法非常简单，只需要针对特定的 HTML 元素，应用如下的 CSS 就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.draggable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这里需要注意到的一点是，如果一个区域因为某个 HTML 元素的存在变成了 <code class=\"language-text\">-webkit-app-region: drag</code>，那么对于 Windows 系统来说（Mac 经测试不会有这个问题），这个区域上的其他元素（不论是否在 drag 元素的“上方”）都无法收到鼠标的事件（如 click / hover 等）。如果希望可以继续保留某些元素（比如按钮）的鼠标事件，需要在这些元素上通过如下的方式显示声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> no-drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Electron 相关的<a href=\"https://electronjs.org/docs/api/frameless-window#draggable-region\">文档说明</a>。</p>\n<p>关于使用 <code class=\"language-text\">-webkit-app-region: drag</code> 后其他区域内元素就无法收获鼠标事件的讨论，可以参考 Electron 的<a href=\"https://github.com/electron/electron/issues/1354#issuecomment-90315551\">这个 issue</a>。</p>","frontmatter":{"date":"2019-10-17","title":"webkit-app-region","category":"Electron"}}},{"node":{"id":"79325fcf-6c20-50a0-9a24-d1a5178dedb0","html":"<p>因为 Electron 项目天然的集成了 Node.js，可以直接使用 <code class=\"language-text\">require</code> 命令来加载其他的模块。因此，很多项目中就不再使用 Webpack 或 Rollup 来对项目进行打包操作。简单的使用 TypeScript 或 Babel 进行转化，保证 <code class=\"language-text\">import</code> 转化成了 <code class=\"language-text\">require</code> 命令，就能顺利的跑起来了。</p>\n<p>然而，如果细究下去，直接使用 <code class=\"language-text\">require</code> 依次加载各个文件和通过打包将所有需要加载的部分一次性载入，两者之间还是存在这性能上的差距。具体的数据差异，可以通过这个<a href=\"https://github.com/laysent/electron-require-test\">测试项目</a>来实际了解。</p>\n<p>实测中，大约 1000 个文件，打包和不打包的版本，载入的时间差距在 200ms 以上。对于用户来说，这个已经是可感知的延迟了（参考<a href=\"https://www.humanbenchmark.com/tests/reactiontime\">数据</a>）。</p>\n<p>一次 Electron require 涉及的步骤包括：</p>\n<ol>\n<li>根据请求的地址，寻找文件（Electron 的 <a href=\"https://github.com/electron/electron/blob/24b3d66767d89c0b119d1fcc738db4b7f456d913/lib/common/reset-search-paths.ts#L36\">_resolveFilename</a> 方法 > Node.js 中的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L787\">_resolveFilename</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L495\">_findPath</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L118\">stat</a> 方法）</li>\n<li>根据实际地址读取文件（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L822\">Module.prototype.load</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L980\">Module._extensions[‘.js’]</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L1010\">fs.readFileSync</a> 方法）</li>\n<li>编译加载文件内容（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L931\">Module.prototype._compile</a> 方法）</li>\n</ol>\n<p>其中，第一步和第二步的 IO 都是比较耗时的操作。特别是对于第一步来说，寻找文件是一个过程。对于非相对路径的文件来说，如果不能在当前的 node_modules 下找到，Node.js 就会逐级往上寻找，直到成功或最终失败。第三步编译和运行的过程，耗时将和内容具体的长短以及具体执行的内容相关。</p>\n<p>由于不论是直接 require 的方法还是打包的操作，最终需要执行的程序都是基本相同的（对于 Webpack 来说，有一些 runtime 代码的消耗），也就是第三步的时间两个方案都是大体相同的。因而总体上来说，两种方案的差异主要体现在第一步和第二步的耗时上。由于单个打包文件加载的方案可以节省多次 IO 的查找和读取操作，因而最终会节省不少的时间。</p>","frontmatter":{"date":"2019-10-16","title":"Require Strategy in Electron","category":"Electron"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}