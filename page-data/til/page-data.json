{"componentChunkName":"component---src-pages-til-js","path":"/til/","webpackCompilationHash":"687e338135c47159cd63","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"6c27cfd3-d03c-5034-a29f-9ac99e7f51bf","html":"<p>当 Ant Design 和 Jest 一起使用的时候，在某些情况下会导致单元测试运行失败。一个可能造成问题的 Ant Design 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> TextArea <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jest 会报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">ReferenceError: Input is not defined\n\n  1 | import { Input } from &#39;ant-design&#39;;\n  2 |\n&gt; 3 | const { TextArea } = Input;</code></pre></div>\n<p>报错的直接原因，是使用了 Ant Design 推荐的 <code class=\"language-text\">babel-plugin-import</code> 造成的。在<a href=\"https://github.com/ant-design/babel-plugin-import/issues/172\">这里</a>、<a href=\"https://github.com/ant-design/babel-plugin-import/issues/189#issuecomment-445139343\">这里</a>等 GitHub Issue 中都有相应的讨论。</p>\n<p>要修复这个问题，只需要在 Jest 或者单元测试环境中，不使用 <code class=\"language-text\">babel-plugin-import</code> 这个转换插件就可以了。参考代码如下，在 <code class=\"language-text\">.babelrc</code> 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"development\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// same as above</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// rest of plugins...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此一来，只有在 <code class=\"language-text\">NODE_ENV</code> 为 <code class=\"language-text\">production</code> 或 <code class=\"language-text\">development</code> 的情况下，Babel 才会启用 <code class=\"language-text\">babel-plugin-import</code> 这个转换插件。对于 Jest 来说，因为默认设置了环境变量 <code class=\"language-text\">NODE_ENV</code> 为 <code class=\"language-text\">test</code>，所以 Plugin 不会起效。</p>\n<p>这样造成的问题是 Jest 的运行速度会有所降低。</p>","frontmatter":{"date":"2019-07-29","title":"Jest with Ant Design","category":"JavaScript"}}},{"node":{"id":"111b032a-a1fc-57f1-8eed-7a908e9ee7e3","html":"<p>如果手上有多台设备在管理，SSH 的时候需要记住各个设备的 IP 地址、输入，总是很麻烦的。SSH 提供了配置文件的功能，可以为不同的 IP 设置别名，同时配置登陆需要用到的用户名和 RSA 私钥等。</p>\n<section><h2>配置方法</h2><p>修改 <code class=\"language-text\">~/.ssh/config</code> 文件，增加每个设备对应的配置数据。举例如下：</p><div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">Host pi\n    Hostname 192.168.xx.xx\n    User pi\n    IdentityFile ~/.ssh/id_pi_rsa</code></pre></div><p>这样就配置好了一个 Raspberry Pi 的别名。接下来，可以直接使用如下的命令来访问设备：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> pi</code></pre></div><p>除了 SSH 之外，SCP 也可以使用同样的配置。比如：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> -r /local/path pi:/remote/path</code></pre></div></section>","frontmatter":{"date":"2019-07-28","title":"SSH Host Config","category":"Bash"}}},{"node":{"id":"4aa86de8-f5ef-545f-82b2-a0200ca867de","html":"<p>默认情况下，Webapck 会用 Chunk ID 为 <code class=\"language-text\">import()</code> 产生的独立文件命名，最终的结果就是类似于 <code class=\"language-text\">0.bundle.js</code> 这样的文件。这样的文件并不方便理解和管理，所以一般会使用 <code class=\"language-text\">webpackChunkName</code> 这个注释来让 Webapck 使用更加有意义的命名。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"module-name\" */</span> <span class=\"token string\">'path-to-bundle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最终产生的文件为 <code class=\"language-text\">module-name.bundle.js</code>（这里假设在 Webpack 中配置了 <code class=\"language-text\">output.filename</code> 为 <code class=\"language-text\">[name].bundle.js</code>）。</p>\n<p>然而，每次要手写这样的注释有些麻烦。如果动态加载的模块本身存放位置有规律可循（比如是在 pages 目录下，每个目录有一个入口文件），那么也可以考虑使用 Babel 插件的方式，自动为每个 <code class=\"language-text\">import()</code> 增加合适的 bundle name。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addComments</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// only add leading comment when not found</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>leadingComments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  arg<span class=\"token punctuation\">.</span>leadingComments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CommentBlock'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">` webpackChunkName: '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' `</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getChunkNameFromImportPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">importPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// find a way to transform from import path to chunk name</span>\n  <span class=\"token comment\">// example: from 'path/to/file' to 'path.to.file' as chunk name</span>\n  <span class=\"token keyword\">return</span> importPath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\//g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token punctuation\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'add-bundle-name'</span><span class=\"token punctuation\">,</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">CallExpression</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isImport</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstArg<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> importPath <span class=\"token operator\">=</span> firstArg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addComments</span><span class=\"token punctuation\">(</span>firstArg<span class=\"token punctuation\">,</span> <span class=\"token function\">getChunkNameFromImportPath</span><span class=\"token punctuation\">(</span>importPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-07-26","title":"Import Chunkname with Babel Plugin","category":"JavaScript"}}},{"node":{"id":"e021306b-55f0-5457-9892-4bc9c1e12835","html":"<p>在 Docker 开发的过程中，有时会有脚本出错，导致执行结果不及预期的情况。这种错误有时是环境导致的，在非 Docker 环境下无法重现。如果需要通过构建 Docker 添加诸如日志之类的信息来了解具体可能出错的原因，不免有些曲折。可以考虑直接在 Docker 环境下运行 Bash 命令，通过执行脚本中的语句，来查找可能出现问题的原因。</p>\n<p>要在 Docker 环境下执行 Bash 脚本，可以遵循以下的步骤：</p>\n<ol>\n<li>首先，需要知道当前运行 Docker 的容器 ID</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker container <span class=\"token function\">ls</span></code></pre></div>\n<p>上述命令会列出所有的容器，找到需要调试的那一个即可。</p>\n<ol start=\"2\">\n<li>在该容器环境内执行 Bash 命令</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">exec</span> -ti xxx /bin/bash</code></pre></div>\n<p>这里，<code class=\"language-text\">xxx</code> 就是第一步找到的 Container ID。上述命令用到了两个参数，<code class=\"language-text\">-t</code> 和 <code class=\"language-text\">-i</code>。<code class=\"language-text\">-t</code> 是 <code class=\"language-text\">--tty</code> 的缩写，用于让 Docker 将用户的终端和 stdin/stdout 关联起来；<code class=\"language-text\">-i</code> 是 <code class=\"language-text\">--interactive</code> 的缩写，用于让 Docker 在执行命令的时候允许用户进行交互式的输入输出。</p>\n<p>如果只是希望执行一个语句并输出结果（比如 <code class=\"language-text\">echo</code> 一个字符串），那么 <code class=\"language-text\">-t</code> 就足够了，不需要 <code class=\"language-text\">-i</code>。但是对于需要在 Docker 环境下输入 Bash 命令并检查执行结果的情况来说，<code class=\"language-text\">-i</code> 就是必须的。</p>\n<p>一个输出 Hello World 的简单例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">exec</span> -t <span class=\"token keyword\">echo</span> <span class=\"token string\">\"hello world\"</span></code></pre></div>\n<p>另外，可以通过如下的命令知道，<code class=\"language-text\">docker exec</code> 运行的默认环境是在 <code class=\"language-text\">/</code> 下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">exec</span> -t <span class=\"token function\">pwd</span> <span class=\"token comment\"># output: /</span></code></pre></div>\n<p>如需修改这一默认行为，可以通过 <code class=\"language-text\">-w</code> 参数（或 <code class=\"language-text\">--workdir</code>）来执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker <span class=\"token function\">exec</span> -w /root -t xxx <span class=\"token function\">pwd</span> <span class=\"token comment\"># output: /root</span></code></pre></div>","frontmatter":{"date":"2019-07-25","title":"Execute Bash in Docker","category":"Docker"}}},{"node":{"id":"32799a20-826d-5a55-8cdc-d47c46c6d61d","html":"<p>Alpine 是 Docker 中非常流行的镜像，因为它体积小（5 MB 左右），且包管理机制友善。然而即使体积小，一旦网络条件受到限制，使用 Alpine 安装依赖依然十分费劲。这让 Docker 镜像的安装变得非常缓慢且容易失败。</p>\n<p>假设原先的 Dockerfile 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>edge\n\n<span class=\"token keyword\">RUN</span> apk update &amp;&amp; \\\n  <span class=\"token comment\"># ...</span></code></pre></div>\n<p>那么可以考虑改用国内的镜像源来加速网络下载过程：</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>edge\n\n<span class=\"token keyword\">RUN</span> echo <span class=\"token string\">'http://mirrors.aliyun.com/alpine/edge/community/'</span> <span class=\"token punctuation\">></span> \\\n    /etc/apk/repositories &amp;&amp; \\\n  echo <span class=\"token string\">'http://mirrors.aliyun.com/alpine/edge/main/'</span> <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> \\\n    /etc/apk/repositories &amp;&amp; \\\n  apk update &amp;&amp; \\\n  <span class=\"token comment\"># ...</span></code></pre></div>\n<p>除了上面提到的<a href=\"https://mirrors.aliyun.com/alpine/\">阿里镜像</a>之外，<a href=\"https://mirrors.tuna.tsinghua.edu.cn/alpine/\">清华</a>、<a href=\"https://mirrors.nju.edu.cn/alpine/\">南大</a>、<a href=\"https://mirrors.ustc.edu.cn/alpine/\">中科大</a>等镜像也可以考虑。更多镜像及其对应的网络状态可以在<a href=\"https://mirrors.alpinelinux.org/\">这里</a>找到。</p>\n<p>注意使用的镜像版本必须与 Docker 需要使用的版本保持一致。如上例中，Docker 需要基于 <code class=\"language-text\">alpine:edge</code>，那么在设置镜像的使用，也应该使用 <code class=\"language-text\">edge</code> 的版本（在 URL 中可以找到 <code class=\"language-text\">/alpine/edge/</code>）。</p>","frontmatter":{"date":"2019-07-24","title":"Alpine Mirror","category":"Docker"}}},{"node":{"id":"352b533c-1fcc-5f3a-b42e-91d6ebd88751","html":"<p>以下介绍一些系统上安装 Docker 的步骤。</p>\n<section><h2>Raspberry Pi</h2><ol>\n<li>安装一些前置依赖</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> \\\n  apt-transport-https ca-certificates software-properties-common -y</code></pre></div><ol start=\"2\">\n<li>安装 Docker</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL get.docker.com -o get-docker.sh <span class=\"token operator\">&amp;&amp;</span> sh get-docker.sh</code></pre></div><p>这里直接使用了 <a href=\"http://get-docker.sh\">get-docker.sh</a> 提供的安装脚本。</p><ol start=\"3\">\n<li>让当前用户可以使用 Docker</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG docker pi</code></pre></div><ol start=\"4\">\n<li>导入 Docker CPG key</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> https://download.docker.com/linux/raspbian/gpg</code></pre></div><ol start=\"5\">\n<li>设置 Docker Repo 地址</li>\n</ol><p>在 <code class=\"language-text\">/etc/apt/sources.list</code> 中增加如下行：</p><div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">deb https://download.docker.com/linux/raspbian/ stretch stable</code></pre></div><ol start=\"6\">\n<li>更新系统</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade</code></pre></div><ol start=\"7\">\n<li>启动 Docker 服务</li>\n</ol><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">systemctl start docker.service</code></pre></div></section>\n<section><h2>MacOS</h2><p>可以直接使用 Homebrew 进行安装：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew cask <span class=\"token function\">install</span> docker</code></pre></div><p>安装完成后，在 Application 中找到 Docker 并启动，按提示信息一步步走就可以了。</p></section>\n<section><h2>运行</h2><p>完成后，可以试试如下的 Docker 命令，如果可以正常输出内容，安装本身就没有问题了：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker info</code></pre></div></section>\n<section><h2>参考</h2><ul>\n<li><a href=\"https://blog.docker.com/2019/03/happy-pi-day-docker-raspberry-pi/\">https://blog.docker.com/2019/03/happy-pi-day-docker-raspberry-pi/</a></li>\n</ul></section>","frontmatter":{"date":"2019-07-23","title":"Docker Installation","category":"Docker"}}},{"node":{"id":"8c6005a3-3513-5d50-9b6a-4d3bacfd6b81","html":"<p>可以使用 Git 命令行工具获取到当前使用的分支名称，最新的 Git Commit ID 等信息。然而，在不借助 Git 命令的情况下，依然可以通过 .git 文件，找到这些信息。</p>\n<p>在 .git 文件夹中，<code class=\"language-text\">HEAD</code> 文件记录了当前分支的指向。文件内容 <code class=\"language-text\">refs</code> 后面跟着的就是分支名。这个分支名亦是一个路径，在 .git 目录下使用这个相对路径可以得到当前分支指向的头部 Commit ID。</p>\n<p>举个例子：</p>\n<p>发现 <code class=\"language-text\">./.git/HEAD</code> 中的内容是：<code class=\"language-text\">ref: refs/heads/master</code>，通过查看 <code class=\"language-text\">./.git/refs/heads/master</code> 文件中的内容，就可以知道当前的头部 Commit ID。同样，去除 <code class=\"language-text\">refs/heads</code> 之后，就可以得到当前的分支名称，即 <code class=\"language-text\">master</code>。</p>\n<p>对应的 Node.js 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> git <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.git'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> head <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>git<span class=\"token punctuation\">,</span> <span class=\"token string\">'HEAD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ref: '</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> commit <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>git<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> branch <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'refs/heads/'</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>branch<span class=\"token punctuation\">,</span> commit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-07-22","title":"Get Branch Name & Commit ID without Git","category":"Git"}}},{"node":{"id":"933770d1-f4e7-5ab2-b4d5-bcc903ddd048","html":"<p>在 Node.js 中，可以通过 <code class=\"language-text\">os.cpus()</code> 这个函数，来了解当前状态下，计算机 CPU 的一些状态。以 MacBookPro 2019 款为例，以下是一份输出的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    model<span class=\"token punctuation\">:</span> <span class=\"token string\">'Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz'</span><span class=\"token punctuation\">,</span>\n    speed<span class=\"token punctuation\">:</span> <span class=\"token number\">2200</span><span class=\"token punctuation\">,</span>\n    times<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      user<span class=\"token punctuation\">:</span> <span class=\"token number\">239572260</span><span class=\"token punctuation\">,</span>\n      nice<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      sys<span class=\"token punctuation\">:</span> <span class=\"token number\">133555650</span><span class=\"token punctuation\">,</span>\n      idle<span class=\"token punctuation\">:</span> <span class=\"token number\">644681690</span><span class=\"token punctuation\">,</span>\n      irq<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 省略类似的其他十一个...</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>在这个返回的数组中，每一个元素代表一个 CPU 的线程。这台 MacBookPro 是六核（core）十二线程（processor），所以返回的数组长度是十二。具体来看每一个元素：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">model</code>，表示了当前 CPU 的型号</p>\n</li>\n<li>\n<p><code class=\"language-text\">speed</code>，表示 CPU 的运算速度，单位是 MHz</p>\n</li>\n<li>\n<p><code class=\"language-text\">times</code> 表示 CPU 的使用情况，分别记录了一些时间（单位是毫秒）：</p>\n<ul>\n<li><code class=\"language-text\">user</code> 表示进程在用户模式（user mode）下使用的时间；</li>\n<li><code class=\"language-text\">nice</code> 表示被调整优先级（nice）的进程在用户模式下使用的时间。这里，nice 用于表示执行的优先级，从 -20（最高优先级）到 19（最低优先级）。默认的程序，优先级是 0；（注：这是一个 Unix 特有的功能，对于 Windows 用户来说，这个值永远是 0）</li>\n<li><code class=\"language-text\">sys</code> 表示进程在内核模式下使用的时间；</li>\n<li><code class=\"language-text\">idle</code> 表示空闲的时间；</li>\n<li><code class=\"language-text\">irq</code> 表示硬中断请求花费的时间。硬中断也叫外部中断，由外部硬件产生，如鼠标、键盘等。</li>\n</ul>\n</li>\n</ul>\n<p>有了以上的数据，就可以在 Node / Electron 程序中查看 CPU 的使用，从而对当前程序的执行情况有一个客观的了解。</p>","frontmatter":{"date":"2019-07-19","title":"CPU Usage via Nodejs","category":"Node.js"}}},{"node":{"id":"cab35168-e827-5863-bde2-8bc6e260c818","html":"<p><code class=\"language-text\">navigator.platform</code> 可以获取到当前浏览器所在的操作系统信息。一般来说会得到一个字符串用以表示操作系统，但某些情况下也可能会拿到空字符串（浏览器拒绝或不能给出操作系统信息）。</p>\n<p>需要注意的一点是，即使是 64 位的 Windows 操作系统，得到的结果很可能是 <code class=\"language-text\">Win32</code> 而不是 <code class=\"language-text\">Win64</code>。根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform\">MDN</a> 的数据，Internet Explorer 和 v63 前的 Firefox 会使用 <code class=\"language-text\">Win64</code>，其他的一般返回 <code class=\"language-text\">Win32</code>。</p>\n<p>综上，可以使用如下的方法检测当前是否是 Windows 系统：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> isWindows <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Win'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">navigator.platform</code> 基本没有浏览器兼容性问题，可以放心使用。</p>","frontmatter":{"date":"2019-07-18","title":"navigator.platform","category":"JavaScript"}}},{"node":{"id":"900daf81-1953-57db-a53b-e4d1a9eee083","html":"<p>console 中可以通过 <code class=\"language-text\">console.count</code> 来进行记数。</p>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callMe func'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">countReset</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callMe func'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 1</span>\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 2</span>\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 3</span></code></pre></div>\n<p>几点说明：</p>\n<ul>\n<li><code class=\"language-text\">console.countReset</code> 函数可以用于清空记数</li>\n<li>传递的参数可以用于标记 <code class=\"language-text\">count</code> 的类别，如果不传就是默认的 default</li>\n<li>不同类别之间的 <code class=\"language-text\">count</code> 不会共享数据</li>\n</ul>","frontmatter":{"date":"2019-07-17","title":"console.count","category":"JavaScript"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}