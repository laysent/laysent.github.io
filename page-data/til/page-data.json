{"componentChunkName":"component---src-pages-til-js","path":"/til/","webpackCompilationHash":"e6ece375915cc981625d","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"09d8bc9f-9e58-54de-9b47-3f8838554b24","html":"<p>在 SQLite 中，如果需要对列表的字符串数据做一些简单的变化，可以直接通过 SQLite 内建的函数来完成，而不需要借助外部的程序语言（如 Node.js）。使用内建的操作，转化的效率会远高于使用外部的语言来进行操作。下面通过一些例子来简单介绍一些和字符串相关的操作方法：</p>\n<section><h2>字符串截取</h2><p>可以使用 SQLite 自带的 <code class=\"language-text\">substr</code> 的函数来截取字符串。函数的签名是 <code class=\"language-text\">substr(string, start, length)</code>，其中 <code class=\"language-text\">start</code> 和 <code class=\"language-text\">length</code> 可以是负数，具体的行为可以参考<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-substr/\">这里</a>的介绍。</p><p>假设有一列图像文件相关的数据：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">xxx.jpg\nyyy.gif\nzzz.png</code></pre></div><p>想要统计文件的格式，一个简单的写法如下（不考虑 <code class=\"language-text\">.jpeg</code> 之类的情况）：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span>image_column_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> suffix <span class=\"token keyword\">from</span> table_name <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> suffix<span class=\"token punctuation\">;</span></code></pre></div><p>需要注意的一点是，SQLite 中的 <code class=\"language-text\">substr</code> 函数，记录的 start 下标，是从 1 而不是 0 开始的。</p></section>\n<section><h2>查找字符</h2><p>在上例中，如果需要考虑 <code class=\"language-text\">.jpeg</code> 之类的情况，直接写死起始数字的下标就显得不太合适了。这时候，可以使用 <code class=\"language-text\">instr</code> 来配合查找：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> instr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> suffix <span class=\"token keyword\">from</span> table_name<span class=\"token punctuation\">;</span></code></pre></div><p><code class=\"language-text\">instr</code> 的文档可以看<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-instr/\">这里</a>。</p></section>\n<section><h2>字符串长度</h2><p>如果需要删除字符串的最后几位，光有 <code class=\"language-text\">substr</code> 函数就不够用了，还需要知道一个字符串具体的长度，才能确定需要截取的字符串长度是多少（定长字符串除外）。这就需要 SQLite 自带的 <code class=\"language-text\">length</code> 函数了。细节可以参见<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-length/\">文档</a>，以下举一个实际的例子。</p><p>假设有一列身高相关的数据：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">170cm\n168cm\n182cm</code></pre></div><p>想要截取其中数字的部分，可以使用 <code class=\"language-text\">substr</code> 和 <code class=\"language-text\">length</code> 配合着这么写：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span><span class=\"token punctuation\">;</span></code></pre></div><section><h3>字符串转数字</h3><p>接着上文的例子，如果希望进一步把字符串转化成数字，可以使用 <code class=\"language-text\">cast</code> 函数：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> cast<span class=\"token punctuation\">(</span><span class=\"token string\">'170'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>结合起来：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> cast<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span><span class=\"token punctuation\">;</span></code></pre></div><p>注意，这里 <code class=\"language-text\">substr</code> 和 <code class=\"language-text\">cask</code> 函数在处理 <code class=\"language-text\">NULL</code> 的时候，都是不会做任何操作，直接返回 <code class=\"language-text\">NULL</code> 的。因此，如果上述的列中有数据是 <code class=\"language-text\">NULL</code> 而不是字符串，使用 <code class=\"language-text\">cask</code> + <code class=\"language-text\">substr</code> 的操作也会得到 <code class=\"language-text\">NULL</code> 的结果，不会有报错或其他问题。</p></section><section><h3>转化成 NULL</h3><p>然而在上例中，如果 <code class=\"language-text\">cask</code> 收到的参数是空字符串，那么转换的结果就是 0。这就不一定符合需求了。可以使用 <code class=\"language-text\">nullif</code> 这个操作符，将这种情况强制转化成 <code class=\"language-text\">NULL</code>：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></section><section><h3>获取 ASCII 码</h3><p>使用字符串存储的成本会比使用整数来的大一些。除了上面提到的将字符串直接转化成数字的例子，对于一些单个字符类型的值，转化成数字存储也不失为一个好方案。比如，将某组 <code class=\"language-text\">A</code> 到 <code class=\"language-text\">Z</code> 的字母转化成 <code class=\"language-text\">0</code> 到 <code class=\"language-text\">25</code> 的数字。这时候，就可以使用 <code class=\"language-text\">unicode</code> 函数了：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> unicode<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">65</span> <span class=\"token keyword\">from</span> table_name<span class=\"token punctuation\">;</span></code></pre></div><p>这里 <code class=\"language-text\">65</code> 是 <code class=\"language-text\">A</code> 的 ASCII 码。</p></section></section>","frontmatter":{"date":"2019-08-11","title":"String Manipulation in SQLite","category":"SQLite"}}},{"node":{"id":"d8da12e2-c818-5675-975f-a855ec4bc841","html":"<p>JavaScript 中可以很方便在字符串和数字之间进行转换，比如：<code class=\"language-text\">+&#39;123&#39;</code> => <code class=\"language-text\">123</code>，<code class=\"language-text\">(123).toString()</code> => <code class=\"language-text\">&#39;123&#39;</code>。</p>\n<p>然而，需要注意的一点是，JavaScript 中的数字并不是整数，而是浮点数。更确切的说，数字使用的是 64 bit 双精度浮点数来表示的。这意味着，如果服务器存储的数字是一个 Int64，那么在给到前端的时候，很有可能会出现转化上的问题。对于双精度浮点数来说，能够表示的最大的数是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，超过的部分就会被截断，无法精确表示。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'9223372036854775808'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output: 9223372036854776000</span></code></pre></div>\n<p>JavaScript 提供了 <code class=\"language-text\">Number.isSafeInteger</code> 这个 API 来判断一个数字是否是在可表示的安全范围内。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">9223372036854776000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">53</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: true</span></code></pre></div>\n<p>这里，<code class=\"language-text\">2 ** 53 - 1</code> 就是 JavaScript 中可以表示的最大整数，<code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> 这个常量也等于这个值。超过这个数值的所有值都会被认为是不安全的，哪怕该值实际表示的结果“凑巧”是正确的。上例中，<code class=\"language-text\">9223372036854776000</code> 这个数字的表示结果“刚好”就是 <code class=\"language-text\">9223372036854776000</code> 本身，但是因为这个数已经超过了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，所以依然被判定为是不安全的。</p>\n<p>虽然 JavaScript 本身的数字不支持大数，但是 Chrome 已经集成了 <code class=\"language-text\">BigInt</code> 数据类型，它可以被用于表示任意大的整形数字，可以用于这样的使用场景。（注：<code class=\"language-text\">BigInt</code> 本身还在 staging 3，并不是标准的一部分）</p>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or:</span>\n<span class=\"token comment\">// const num = BigInt('9223372036854776000');</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 9223372036854775808n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: bigint</span></code></pre></div>\n<p>需要注意的是，<code class=\"language-text\">BigInt</code> 不可以使用 <code class=\"language-text\">new</code> 运算符，否则会报错。直接像函数一样传递参数调用就可以了。</p>\n<p><code class=\"language-text\">BigInt</code> 也是支持数字运算的，运算的结果依然是 <code class=\"language-text\">BigInt</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 3n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3n</span> <span class=\"token operator\">-</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2n</span> <span class=\"token operator\">*</span> <span class=\"token number\">3n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 6n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span></code></pre></div>\n<p>特别需要注意的是，因为是整型数字之间的转换，所以在做除法的时候，不会出现小数。在上面的例子中，<code class=\"language-text\">5n</code> 和 <code class=\"language-text\">2n</code> 的除法，结果是 <code class=\"language-text\">2n</code> 而不是 <code class=\"language-text\">2.5</code>，这一个行为和 C 中两个 Integer 之间除法的行为是一致的。</p>\n<p>另外，<code class=\"language-text\">BigInt</code> 不支持和其他的数据类型进行混合计算。比如：<code class=\"language-text\">1n + 2</code> 这样的计算是会报错的，需要显式的进行类型转换后，才可以进行运算。这一点，和 JavaScript 中其他数据类型之间随意混乱的运算行为是不同的（比如，<code class=\"language-text\">1 + &#39;2&#39;</code> 这样的计算 JavaScript 就不会报错，还会得到 <code class=\"language-text\">&#39;12&#39;</code> 这样怪异的结果）。</p>\n<p>虽然 <code class=\"language-text\">BigInt</code> 不允许和一般的 <code class=\"language-text\">Number</code> 进行混合计算，但是比较运算符是可以在两者之间进行比较的。比如：<code class=\"language-text\">1n &lt; 2</code> 或 <code class=\"language-text\">2n &gt; 1</code> 这些都是成立的。<code class=\"language-text\">BigInt</code> 和 <code class=\"language-text\">Number</code> 之间无法取得 <code class=\"language-text\">===</code> 的严格等价关系，但是 <code class=\"language-text\">==</code> 的比较是可能成立的。换句话说：<code class=\"language-text\">1n == 1</code> 是成立的，但是 <code class=\"language-text\">1n === 1</code> 是不成立的。</p>\n<p>更多关于 <code class=\"language-text\">BigInt</code> 的行为，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">MDN</a>。</p>","frontmatter":{"date":"2019-08-08","title":"Big Number in JavaScript","category":"JavaScript"}}},{"node":{"id":"e0dd7268-fba7-523c-bdcd-ec5a9895590e","html":"<p>OSX 自带的 QuickTime Player 支持屏幕的录制功能。具体的操作步骤如下：</p>\n<ol>\n<li>打开 QuickTime Player</li>\n<li>点击菜单中的 File => New Screen Recording</li>\n<li>拖拽选择需要录制的区域，并点击开始录制，点击右上角可以结束录制</li>\n<li>录屏结束后，可以选择菜单中的 File => Export => As Movie 来保存视频</li>\n</ol>\n<section><h2>转化为 Gif 格式</h2><p>假设上述步骤保存了一个名为 <code class=\"language-text\">in.mov</code> 的视频，通过以下步骤可以将视频转化为 Gif 格式：</p><ol>\n<li>\n<p>右键点击 <code class=\"language-text\">in.mov</code> 文件，选择 <code class=\"language-text\">Get Info</code>，在 <code class=\"language-text\">More Info</code> 中找到视频的大小信息，这里假设大小为 60x40</p>\n</li>\n<li>\n<p>运行如下命令，将 <code class=\"language-text\">in.mov</code> 转化为 <code class=\"language-text\">out.gif</code> 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ffmpeg -i in.mov -s 60x40 -pix_fmt rgb24 -r 10 -f gif out.gif</code></pre></div>\n<p>这里参数的具体含义如下：</p>\n<ul>\n<li><code class=\"language-text\">-s 60x40</code> 指定了最大宽度和最大高度。这里可以不指定，输出将按照原始大小来。如果指定较小的长宽值，输出将变小。</li>\n<li><code class=\"language-text\">-r 10</code> 将帧数从 25 调整为 10。</li>\n</ul>\n</li>\n</ol><p>如果 <code class=\"language-text\">ffmpeg</code> 命令找不到，可以使用 <code class=\"language-text\">Homebrew</code> 进行安装：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> ffmpeg</code></pre></div></section>\n<section><h2>优化 Gif 文件</h2><p>可以使用 <code class=\"language-text\">gifsicle</code> 命令对产生的 gif 文件进行压缩：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gifsicle out.gif --optimize<span class=\"token operator\">=</span>3 -o optimized.gif</code></pre></div><p>这里，<code class=\"language-text\">--optimize=3</code> 参数要求 <code class=\"language-text\">gifsicle</code> 使用最高等级优化图片。这会需要更多的时间和 CPU 来计算，但是压缩效果相对也是最好的。</p><p>如果找不到 <code class=\"language-text\">gifsicle</code> 命令，可以使用 <code class=\"language-text\">Homebrew</code> 进行安装：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> gifsicle</code></pre></div><p>经测试，一个 <code class=\"language-text\">463 KB</code> 的文件，压缩后的大小为 <code class=\"language-text\">417 KB</code>，压缩了 10%。</p><p>以上生成 Gif 和优化 Gif 的命令可以放到一起执行：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ffmpeg -i in.mov -s 60x40 -pix_fmt rgb24 - <span class=\"token operator\">|</span> gifsicle --optimize<span class=\"token operator\">=</span>3 <span class=\"token operator\">></span> out.gif</code></pre></div></section>\n<section><h2>参考</h2><ul>\n<li><a href=\"https://gist.github.com/dergachev/4627207\">https://gist.github.com/dergachev/4627207</a></li>\n<li>该文作者针对 mov 到 gif 的转换写了一个 Ruby 脚本，可以显著提高转化后的质量，脚本见 <a href=\"https://github.com/dergachev/screengif\">https://github.com/dergachev/screengif</a></li>\n</ul></section>","frontmatter":{"date":"2019-08-07","title":"Screen Recording in MacOS","category":"Tool"}}},{"node":{"id":"5493d287-9fbc-54bc-ac13-cfaca63332c9","html":"<p>安装 <code class=\"language-text\">etherwake</code> 用于 WOL (wake on LAN) 操作</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> etherwake</code></pre></div>\n<p>接下来，可以通过命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> etherwake -i eth0 AA:BB:CC:DD:EE:FF</code></pre></div>\n<p>来唤醒 AA:BB:CC:DD:EE:FF 这个 MAC 地址的设备。几点注意：</p>\n<ol>\n<li><code class=\"language-text\">etherwake</code> 需要 <code class=\"language-text\">sudo</code> 运行，否则会报错：<code class=\"language-text\">etherwake: This program must be run as root.</code></li>\n<li><code class=\"language-text\">-i eth0</code> 不是必须的。如果同时有有线和无线网卡，<code class=\"language-text\">-i</code> 可以强制要求 <code class=\"language-text\">etherwake</code> 走有线的路径</li>\n</ol>\n<p><a href=\"https://notenoughtech.com/featured/use-raspberry-pi-wol/\">参考文献</a></p>","frontmatter":{"date":"2019-08-06","title":"Raspberry Pi as WOL","category":"Bash"}}},{"node":{"id":"f6b6d594-d2fb-5935-874c-7f6b24cea873","html":"<p>相比于 <code class=\"language-text\">scp</code>，<code class=\"language-text\">rsync</code> 命令可以在 SSH 拷贝的时候提供更多的灵活性，比如只拷贝新修改的或未存在的文件。</p>\n<p>一个简单的拷贝命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -auv /local/folder host:/remote/folder</code></pre></div>\n<p>这里，<code class=\"language-text\">-a</code> 表示拷贝所有的文件（包括子文件夹中的），<code class=\"language-text\">-u</code> 表示只拷贝修改时间更新的部分，<code class=\"language-text\">-v</code> 则会将结果输出到 stdin 中方便查看。类似的，还可以使用 <code class=\"language-text\">--ignore-existing</code> 来要求 <code class=\"language-text\">rsync</code> 只拷贝新的文件，忽略已经存在的部分。</p>\n<p>然而在实际使用的过程中，<code class=\"language-text\">rsync</code> 有如下报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Permission denied, please try again.\nrsync: connection unexpectedly closed (0 bytes received so far) [sender]\nrsync error: error in rsync protocol data stream (code 12) at io.c(235) [sender=3.1.2]</code></pre></div>\n<p>如果换同样的 SSH 配置，使用 <code class=\"language-text\">scp</code> 就不会有类似的报错，可见本身并不是 SSH 登陆账户权限的问题。这里的 Permission denied 报错非常的具有误导性。实际上，更可能的情况是 <code class=\"language-text\">rsync</code> 无法在远程主机上找到，需要通过 <code class=\"language-text\">--rsync-path</code> 参数手动指定。</p>\n<p>首先，可以先 SSH 到远程主机上，确认 <code class=\"language-text\">rsync</code> 本身是存在的：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> --help</code></pre></div>\n<p>接着，可以通过 <code class=\"language-text\">type</code> 命令确认 <code class=\"language-text\">rsync</code> 的实际位置：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">type</span> -a <span class=\"token function\">rsync</span></code></pre></div>\n<p>这里，假设输出的结果是 <code class=\"language-text\">/bin/rsync</code>，那么，可以将原先的 <code class=\"language-text\">rsync</code> 命令改写为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rsync</span> -auv /local/folder host:/remote/folder --rsync-path<span class=\"token operator\">=</span>/bin/rsync</code></pre></div>\n<p>再次运行就不会报错了。</p>\n<p><a href=\"https://superuser.com/questions/1017697/how-can-rsync-fail-due-to-missing-permissions-if-remote-login-occurs-with-root\">参考文档</a></p>","frontmatter":{"date":"2019-08-05","title":"Permission Denied for Rsync","category":"Bash"}}},{"node":{"id":"bb00bd56-438b-5e03-926d-cb9348da2b4d","html":"<p>在 C 编程中，经常会用到 <code class=\"language-text\">Makefile</code> 来对源代码进行编译。一个简单的 <code class=\"language-text\">Makefile</code> 如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">out</span><span class=\"token punctuation\">:</span> input.c\n  <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>CC<span class=\"token punctuation\">)</span> input.c -o out -Wall -Wextra -std<span class=\"token operator\">=</span>c99</code></pre></div>\n<p>这里，第一行的 <code class=\"language-text\">out: input.c</code> 表示 <code class=\"language-text\">make</code> 应该根据输入 <code class=\"language-text\">input.c</code> 来产出 <code class=\"language-text\">out</code> 这个文件。</p>\n<p>第二行的 <code class=\"language-text\">$(CC)</code> 会由 <code class=\"language-text\">make</code> 替换成本机的 cc 程序（即 <strong>c</strong> <strong>c</strong>ompiler）；后面跟着的是 <code class=\"language-text\">cc</code> 编译会用到的参数，包括输入源文件 <code class=\"language-text\">input.c</code>，输出文件 <code class=\"language-text\">out</code>，编译输出所有的 Warning（<code class=\"language-text\">-Wall</code> 即 <strong>W</strong>arning <strong>all</strong>，<code class=\"language-text\">-Wextra</code> 即 <strong>W</strong>arning <strong>extra</strong>），同时指定使用 <a href=\"https://en.wikipedia.org/wiki/C99\">C99</a> 标准来编译 C 代码（和 <a href=\"https://en.wikipedia.org/wiki/ANSI_C\">ANSI C</a> 相比，C99 允许在函数的任意位置定义变量，而不是必须在顶部）。</p>\n<p>运行 <code class=\"language-text\">make</code> 命令，程序会查找当前目录下的 <code class=\"language-text\">Makefile</code> 函数，读取其中的配置，根据输入输出的要求，查找文件，然后再选择编译。</p>\n<p>第一次编译，程序会用 <code class=\"language-text\">input.c</code> 编译出一个 <code class=\"language-text\">out</code> 文件来。</p>\n<p>在 <code class=\"language-text\">input.c</code> 没有修改的情况下，如果再运行一次 <code class=\"language-text\">make</code> 命令，会得到如下的输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">make: `out` is update to date.</code></pre></div>\n<p>这里，<code class=\"language-text\">make</code> 程序并没有通过任何外部文件的方式记录编译的情况。判断是否需要编译完全依赖于系统默认的文件功能，即简单的比较 <code class=\"language-text\">input.c</code> 和 <code class=\"language-text\">out</code> 两个文件的最后修改时间。如果 <code class=\"language-text\">out</code> 的最后修改时间比 <code class=\"language-text\">input.c</code> 要晚，就认为 <code class=\"language-text\">out</code> 是最新的，不再重复编译；如果 <code class=\"language-text\">input.c</code> 的最后修改时间晚于 <code class=\"language-text\">out</code> 的时间，或是 <code class=\"language-text\">out</code> 压根就不存在，那么 <code class=\"language-text\">make</code> 就会执行 <code class=\"language-text\">Makefile</code> 中配置的编译命令。</p>\n<p>可以通过以下方式欺骗 <code class=\"language-text\">Makefile</code> 来检查这一行为：</p>\n<ol>\n<li>修改一下 <code class=\"language-text\">input.c</code> 并保存</li>\n<li>删除 <code class=\"language-text\">out</code> 文件，然后用 <code class=\"language-text\">touch</code> 命令创建一个空的 <code class=\"language-text\">out</code> 文件。因为是先修改，再创建，所以 <code class=\"language-text\">out</code> 的创建时间会晚于 <code class=\"language-text\">input.c</code></li>\n<li>尝试执行 <code class=\"language-text\">make</code> 命令，会发现提示 <code class=\"language-text\">out</code> 已经是最新的，并没有执行真正的编译命令（尽管这里 <code class=\"language-text\">out</code> 并不是通过 <code class=\"language-text\">make</code> 编译出来的）</li>\n</ol>","frontmatter":{"date":"2019-08-04","title":"How Makefile works","category":"Bash"}}},{"node":{"id":"5017cac8-c3ff-523d-bee3-2831eaad1c50","html":"<p>在命令行中，一个命令会有一个返回数值，<code class=\"language-text\">0</code> 代表正确运行；如果命令返回了非 <code class=\"language-text\">0</code> 数据，则代表命令运行出现了错误。</p>\n<p>比如，如果 <code class=\"language-text\">Jest</code> 命令跑单元测试出现了错误，那么就会返回一个非 <code class=\"language-text\">0</code> 的值。运用 <code class=\"language-text\">set -e</code> 可以让 Bash 在遇到非零返回的命令行之后即停止，不再运行接下去的命令。</p>\n<p>那么，该如何确定之前的命令是否返回了 <code class=\"language-text\">0</code> 呢？</p>\n<p>可以简单的使用如下的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token variable\">$?</span></code></pre></div>\n<p>这里的 <code class=\"language-text\">$?</code> 就是上一个命令返回的数值。如果上一条命令执行成功，那么这里应该输出 <code class=\"language-text\">0</code>。</p>","frontmatter":{"date":"2019-08-02","title":"Check Exit Code of Command","category":"Bash"}}},{"node":{"id":"cd1eb582-4609-5413-b31d-1454b20b7d96","html":"<p>在写 CI 脚本的时候，希望可以在脚本执行失败之后终止后续的所有操作。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token string\">\"start\"</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">test</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"end\"</span></code></pre></div>\n<p>如果 <code class=\"language-text\">yarn test</code> 这个命令失败了，希望不执行 <code class=\"language-text\">echo &quot;end&quot;</code> 语句。然而通过执行上面的代码，会发现默认是执行的。如果希望不执行这个操作，有几种思路：</p>\n<p>第一种，是用 <code class=\"language-text\">&amp;&amp;</code> 将语句串联起来，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">echo</span> <span class=\"token string\">\"start\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">test</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">echo</span> <span class=\"token string\">\"end\"</span></code></pre></div>\n<p>这样的方案，缺点是比较的麻烦。一旦东西比较多，就很难保证代码的可读性了。</p>\n<p>第二种方案，是使用 <code class=\"language-text\">set -e</code>，脚本改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">set</span> -e\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"start\"</span>\n<span class=\"token function\">yarn</span> <span class=\"token function\">test</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string\">\"end\"</span></code></pre></div>\n<p>如此一来，脚本在语句执行失败（Exit Code 不是 0）之后就会退出，不会执行接下去的脚本。</p>\n<p><a href=\"http://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#The-Set-Builtin\">参考文档</a></p>","frontmatter":{"date":"2019-08-01","title":"Exit when Command Fail","category":"Bash"}}},{"node":{"id":"95e9a909-b17d-5d27-a0f1-f9ae9e02b984","html":"<p>在进行网络请求的时候，有可能会遇上服务器指定链接跳转的情况。此时，无论是 301（永久转移）还是 302（暂时转移），在请求页面的时候都需要根据服务器的指示，去访问下一个链接。当然，这里下一个链接依然有可能是跳转链接，需要继续执行跳转操作。</p>\n<p>一段可用的 Node.js 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> https <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> https <span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">>=</span> <span class=\"token number\">300</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">&lt;</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> location <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'set-cookie'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，Node.js 处理 HTTP 和 HTTPs 请求使用的模块是不相同的，因而需要根据链接地址的 protocol 进行按需索取。同时，如果是 3xx 的 HTTP 结果，则需要进行链接跳转。可以直接读取 headers 中的 <code class=\"language-text\">location</code> 数据，找到下一步需要跳转到的位置。</p>","frontmatter":{"date":"2019-07-31","title":"Follow Redirection","category":"Node.js"}}},{"node":{"id":"bce782dd-1013-548b-a42e-8b7020a9a3c2","html":"<p>在 Docker 中使用 SSH 的功能时，发现 SSH 报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Bad owner or permissions on ~/.ssh/config</code></pre></div>\n<p>通过 <code class=\"language-text\">ls -l</code> 查看 <code class=\"language-text\">~/.ssh/config</code>，得到如下结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-rw------- 1 1000  1000   557 Jul 29 20:32 config</code></pre></div>\n<p>注意到给出的 User 和 Group 的值不是一个名字（如 <code class=\"language-text\">root</code>），而是一个数字。这说明，文件所属的 User / Group 无法找到。</p>\n<p>可以通过如下的命令查看当前 <code class=\"language-text\">root</code> 用户的 ID：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">id</span> -u root <span class=\"token comment\"># output => 0</span></code></pre></div>\n<p>可以看到和 <code class=\"language-text\">ls</code> 列出的 ID 是不匹配的。这说明，导致 SSH 无法正常工作的主要原因，是 <code class=\"language-text\">~/.ssh/config</code> 文件权限的设置有问题。可以通过如下的命令将权限分配给当前的 <code class=\"language-text\">root</code> 用户：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">chown</span> -R root:root /root/.ssh</code></pre></div>\n<p>再次运行 SSH 就可以正常工作了。</p>","frontmatter":{"date":"2019-07-30","title":"Bad owner or permissions","category":"Bash"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":true}}}