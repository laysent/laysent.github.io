{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/electron","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9fb9628c-3773-588d-a419-ec8b93547acf","html":"<p><code class=\"language-text\">-webkit-app-region</code> 是一个 Electron 中的 CSS 属性，可以用于指明用户是否可以通过拖拽当前的 HTML 元素来完成对整个窗体的拖拽。这种情况主要是针对 <a href=\"https://electronjs.org/docs/api/frameless-window\">frameless</a> 窗口的。因为对于 frameless 窗口来说，由于没有了顶部 toolbar，所以默认是无法让用户直接拖拽的。<code class=\"language-text\">-webkit-app-region</code> 相当于提供了一个编程可指明的自定义拖拽区域，用于实现类似窗口顶部 toolbar 的效果。</p>\n<p>具体的使用方法非常简单，只需要针对特定的 HTML 元素，应用如下的 CSS 就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.draggable</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这里需要注意到的一点是，如果一个区域因为某个 HTML 元素的存在变成了 <code class=\"language-text\">-webkit-app-region: drag</code>，那么对于 Windows 系统来说（Mac 经测试不会有这个问题），这个区域上的其他元素（不论是否在 drag 元素的“上方”）都无法收到鼠标的事件（如 click / hover 等）。如果希望可以继续保留某些元素（比如按钮）的鼠标事件，需要在这些元素上通过如下的方式显示声明：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-app-region</span><span class=\"token punctuation\">:</span> no-drag<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Electron 相关的<a href=\"https://electronjs.org/docs/api/frameless-window#draggable-region\">文档说明</a>。</p>\n<p>关于使用 <code class=\"language-text\">-webkit-app-region: drag</code> 后其他区域内元素就无法收获鼠标事件的讨论，可以参考 Electron 的<a href=\"https://github.com/electron/electron/issues/1354#issuecomment-90315551\">这个 issue</a>。</p>","frontmatter":{"date":"2019-10-17","title":"webkit-app-region","category":"Electron"}}},{"node":{"id":"79325fcf-6c20-50a0-9a24-d1a5178dedb0","html":"<p>因为 Electron 项目天然的集成了 Node.js，可以直接使用 <code class=\"language-text\">require</code> 命令来加载其他的模块。因此，很多项目中就不再使用 Webpack 或 Rollup 来对项目进行打包操作。简单的使用 TypeScript 或 Babel 进行转化，保证 <code class=\"language-text\">import</code> 转化成了 <code class=\"language-text\">require</code> 命令，就能顺利的跑起来了。</p>\n<p>然而，如果细究下去，直接使用 <code class=\"language-text\">require</code> 依次加载各个文件和通过打包将所有需要加载的部分一次性载入，两者之间还是存在这性能上的差距。具体的数据差异，可以通过这个<a href=\"https://github.com/laysent/electron-require-test\">测试项目</a>来实际了解。</p>\n<p>实测中，大约 1000 个文件，打包和不打包的版本，载入的时间差距在 200ms 以上。对于用户来说，这个已经是可感知的延迟了（参考<a href=\"https://www.humanbenchmark.com/tests/reactiontime\">数据</a>）。</p>\n<p>一次 Electron require 涉及的步骤包括：</p>\n<ol>\n<li>根据请求的地址，寻找文件（Electron 的 <a href=\"https://github.com/electron/electron/blob/24b3d66767d89c0b119d1fcc738db4b7f456d913/lib/common/reset-search-paths.ts#L36\">_resolveFilename</a> 方法 > Node.js 中的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L787\">_resolveFilename</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L495\">_findPath</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L118\">stat</a> 方法）</li>\n<li>根据实际地址读取文件（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L822\">Module.prototype.load</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L980\">Module._extensions[‘.js’]</a> 方法 > <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L1010\">fs.readFileSync</a> 方法）</li>\n<li>编译加载文件内容（Node.js 的 <a href=\"https://github.com/nodejs/node/blob/a6b030d5ac2c4a2d34f6b9eb3f945d252a42843e/lib/internal/modules/cjs/loader.js#L931\">Module.prototype._compile</a> 方法）</li>\n</ol>\n<p>其中，第一步和第二步的 IO 都是比较耗时的操作。特别是对于第一步来说，寻找文件是一个过程。对于非相对路径的文件来说，如果不能在当前的 node_modules 下找到，Node.js 就会逐级往上寻找，直到成功或最终失败。第三步编译和运行的过程，耗时将和内容具体的长短以及具体执行的内容相关。</p>\n<p>由于不论是直接 require 的方法还是打包的操作，最终需要执行的程序都是基本相同的（对于 Webpack 来说，有一些 runtime 代码的消耗），也就是第三步的时间两个方案都是大体相同的。因而总体上来说，两种方案的差异主要体现在第一步和第二步的耗时上。由于单个打包文件加载的方案可以节省多次 IO 的查找和读取操作，因而最终会节省不少的时间。</p>","frontmatter":{"date":"2019-10-16","title":"Require Strategy in Electron","category":"Electron"}}},{"node":{"id":"2c2d3936-f37b-51b4-8480-648cad560efe","html":"<p>Electron 默认是没有右键支持的，右键点击也不会有效果。为了能够提供一些右键的行为，需要在合适的时间点，手动构造菜单并显示出来。</p>\n<p>这里对右键点击的判断，如果放在 render 层用 JavaScript 去监听 <code class=\"language-text\">contextmenu</code> 事件，虽然可以从 <code class=\"language-text\">event.target</code> 上拿到元素，但是要判断当前选择的位置、能否选择/黏贴、是否有拼写错误的单词等，都比较困难，很容易写出问题来。</p>\n<p>Electron 暴露了 Chromium 的数据，在 WebContents 中增加了 <code class=\"language-text\">context-menu</code> 的事件。在这个事件的回调函数中，提供了很多的数据，能够帮助更好的了解当前的右键点击状态，从而更好地显示右键菜单项。</p>\n<p><code class=\"language-text\">context-menu</code> 的文档见<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">这里</a>。</p>\n<p>这个功能提交的 Pull Request 见 <a href=\"https://github.com/electron/electron/pull/5379\">#5379</a>。</p>\n<p>在 <code class=\"language-text\">context-menu</code> 的回调函数中，第二个参数提供了非常多有用的数据，比如：</p>\n<ul>\n<li>selectionText - 选中的文字</li>\n<li>misspelledWord - 当前的拼写错误单词（如果没有拼写错误，这里的返回是空字符串）</li>\n<li>editFlags - 包含了 <code class=\"language-text\">canCut</code>, <code class=\"language-text\">canCopy</code>, <code class=\"language-text\">canPaste</code>, <code class=\"language-text\">canSelectAll</code> 等各式布尔值，用于表示当前右键的位置是否允许剪切/复制/黏贴/全选等操作。完整的列表可以参考<a href=\"https://electronjs.org/docs/api/web-contents#event-context-menu\">文档</a>。</li>\n</ul>\n<p>一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> remote<span class=\"token punctuation\">,</span> Menu <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'electron'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> webContents <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWebContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> suggestions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">suggestion</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      label<span class=\"token punctuation\">:</span> suggestion<span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">click</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        webContents<span class=\"token punctuation\">.</span><span class=\"token function\">replaceMisspelling</span><span class=\"token punctuation\">(</span>suggestion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'separator'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nwebContents<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'context-menu'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> canCut<span class=\"token punctuation\">,</span> canCopy<span class=\"token punctuation\">,</span> canPaste<span class=\"token punctuation\">,</span> canSelectAll <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>editFlags<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> misspelledWord <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> info<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// use your own function of `getCorrections`</span>\n  <span class=\"token keyword\">const</span> suggestions <span class=\"token operator\">=</span> <span class=\"token function\">getCorrections</span><span class=\"token punctuation\">(</span>misspelledWord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> menuConfig <span class=\"token operator\">=</span> <span class=\"token function\">buildMenuFromSuggestions</span><span class=\"token punctuation\">(</span>suggestions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Cut'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'cut'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCut <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Copy'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canCopy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Paste'</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">:</span> <span class=\"token string\">'paste'</span><span class=\"token punctuation\">,</span> enabled<span class=\"token punctuation\">:</span> canPaste <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        label<span class=\"token punctuation\">:</span> <span class=\"token string\">'Select All'</span><span class=\"token punctuation\">,</span>\n        enabled<span class=\"token punctuation\">:</span> canSelectAll<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// role: 'selectAll'</span>\n        <span class=\"token comment\">// following shows an example of how to manually call the API</span>\n        click<span class=\"token punctuation\">:</span> webContents<span class=\"token punctuation\">.</span>selectAll<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">.</span>Menu<span class=\"token punctuation\">.</span><span class=\"token function\">buildFromTemplate</span><span class=\"token punctuation\">(</span>menuConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  menu<span class=\"token punctuation\">.</span><span class=\"token function\">popup</span><span class=\"token punctuation\">(</span>remote<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-06","title":"context menu of electron","category":"Electron"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"Electron"}}}