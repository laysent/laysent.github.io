{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/sqlite","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"af3e5844-74da-50e9-b82a-0545c1047678","html":"<p>在 SQLite 中，如果需要对列表的字符串数据做一些简单的变化，可以直接通过 SQLite 内建的函数来完成，而不需要借助外部的程序语言（如 Node.js）。使用内建的操作，转化的效率会远高于使用外部的语言来进行操作。下面通过一些例子来简单介绍一些和字符串相关的操作方法：</p>\n<section><h2>字符串截取</h2><p>可以使用 SQLite 自带的 <code class=\"language-text\">substr</code> 的函数来截取字符串。函数的签名是 <code class=\"language-text\">substr(string, start, length)</code>，其中 <code class=\"language-text\">start</code> 和 <code class=\"language-text\">length</code> 可以是负数，具体的行为可以参考<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-substr/\">这里</a>的介绍。</p><p>假设有一列图像文件相关的数据：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">xxx.jpg\nyyy.gif\nzzz.png</code></pre></div><p>想要统计文件的格式，一个简单的写法如下（不考虑 <code class=\"language-text\">.jpeg</code> 之类的情况）：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span>image_column_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> suffix <span class=\"token keyword\">from</span> table_name <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> suffix<span class=\"token punctuation\">;</span></code></pre></div><p>需要注意的一点是，SQLite 中的 <code class=\"language-text\">substr</code> 函数，记录的 start 下标，是从 1 而不是 0 开始的。</p></section>\n<section><h2>查找字符</h2><p>在上例中，如果需要考虑 <code class=\"language-text\">.jpeg</code> 之类的情况，直接写死起始数字的下标就显得不太合适了。这时候，可以使用 <code class=\"language-text\">instr</code> 来配合查找：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> instr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> suffix <span class=\"token keyword\">from</span> table_name<span class=\"token punctuation\">;</span></code></pre></div><p><code class=\"language-text\">instr</code> 的文档可以看<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-instr/\">这里</a>。</p></section>\n<section><h2>字符串长度</h2><p>如果需要删除字符串的最后几位，光有 <code class=\"language-text\">substr</code> 函数就不够用了，还需要知道一个字符串具体的长度，才能确定需要截取的字符串长度是多少（定长字符串除外）。这就需要 SQLite 自带的 <code class=\"language-text\">length</code> 函数了。细节可以参见<a href=\"http://www.sqlitetutorial.net/sqlite-functions/sqlite-length/\">文档</a>，以下举一个实际的例子。</p><p>假设有一列身高相关的数据：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">170cm\n168cm\n182cm</code></pre></div><p>想要截取其中数字的部分，可以使用 <code class=\"language-text\">substr</code> 和 <code class=\"language-text\">length</code> 配合着这么写：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span><span class=\"token punctuation\">;</span></code></pre></div><section><h3>字符串转数字</h3><p>接着上文的例子，如果希望进一步把字符串转化成数字，可以使用 <code class=\"language-text\">cast</code> 函数：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> cast<span class=\"token punctuation\">(</span><span class=\"token string\">'170'</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>结合起来：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> cast<span class=\"token punctuation\">(</span>substr<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token keyword\">table</span><span class=\"token punctuation\">;</span></code></pre></div><p>注意，这里 <code class=\"language-text\">substr</code> 和 <code class=\"language-text\">cask</code> 函数在处理 <code class=\"language-text\">NULL</code> 的时候，都是不会做任何操作，直接返回 <code class=\"language-text\">NULL</code> 的。因此，如果上述的列中有数据是 <code class=\"language-text\">NULL</code> 而不是字符串，使用 <code class=\"language-text\">cask</code> + <code class=\"language-text\">substr</code> 的操作也会得到 <code class=\"language-text\">NULL</code> 的结果，不会有报错或其他问题。</p></section><section><h3>转化成 NULL</h3><p>然而在上例中，如果 <code class=\"language-text\">cask</code> 收到的参数是空字符串，那么转换的结果就是 0。这就不一定符合需求了。可以使用 <code class=\"language-text\">nullif</code> 这个操作符，将这种情况强制转化成 <code class=\"language-text\">NULL</code>：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token keyword\">nullif</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></section><section><h3>获取 ASCII 码</h3><p>使用字符串存储的成本会比使用整数来的大一些。除了上面提到的将字符串直接转化成数字的例子，对于一些单个字符类型的值，转化成数字存储也不失为一个好方案。比如，将某组 <code class=\"language-text\">A</code> 到 <code class=\"language-text\">Z</code> 的字母转化成 <code class=\"language-text\">0</code> 到 <code class=\"language-text\">25</code> 的数字。这时候，就可以使用 <code class=\"language-text\">unicode</code> 函数了：</p><div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> unicode<span class=\"token punctuation\">(</span><span class=\"token keyword\">column</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">65</span> <span class=\"token keyword\">from</span> table_name<span class=\"token punctuation\">;</span></code></pre></div><p>这里 <code class=\"language-text\">65</code> 是 <code class=\"language-text\">A</code> 的 ASCII 码。</p></section></section>","frontmatter":{"date":"2019-08-11","title":"String Manipulation in SQLite","category":"SQLite"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"SQLite"}}}