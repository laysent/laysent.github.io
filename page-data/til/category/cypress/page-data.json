{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/cypress","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"783fc4da-adbf-5fd4-93e3-a9f67e54aa99","html":"<p><code class=\"language-text\">mochawesome</code> 是为 Mocha 提供的一个 Report 库，可以用于生成不错的 HTML 报告（见 <a href=\"https://www.npmjs.com/package/mochawesome\">npm</a>）。库本身提供了一个 <code class=\"language-text\">addContext</code> 的 API，可以用于在运行 Test 的时候，存入额外的信息到 Context 中，最终在生成 HTML 报告的时候，将这部分 Context 信息写入对应的测试用例内。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addContext <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome/addContext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test suite'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unit test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// or</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token string\">'value or object'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>几点说明：</p>\n<ol>\n<li>在 <code class=\"language-text\">beforeEach</code> 或 <code class=\"language-text\">afterEach</code> 的钩子内调用 <code class=\"language-text\">addContext</code> 也是允许的；</li>\n<li>如果给定的第二个参数是 URL 或是一个图片的话，<code class=\"language-text\">mochawesome</code> 可以有相对应的展示；</li>\n<li>记得 <code class=\"language-text\">it</code> 函数的第二个参数不要使用箭头函数，否则 <code class=\"language-text\">this</code> 的指向会有问题</li>\n</ol>\n<p>然而，在 Cypress 中如果试图直接使用上述方法运行代码，会发现并不能成功。最终生成的报告内并没有对应的 context 信息。其原因在于，Cypress 在运行的过程中，原本被赋值的 <code class=\"language-text\">context</code> 属性被覆盖掉了，导致虽然进行了 <code class=\"language-text\">addContext</code> 的赋值，但是最终的结果中并没有保留这部分数据。</p>\n<p>一个可行的解决方案是，在 <code class=\"language-text\">test:after:run</code> 事件中再进行赋值，保证结果生效。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addContext <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome/addContext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addContext'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test:after:run'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">test</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> test <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>几点说明：</p>\n<ol>\n<li>因为 <code class=\"language-text\">addContext</code> API 本质上就是往 <code class=\"language-text\">test</code> 对象上写 context 数据，而 Cypress 的 API 正好提供了 test 对象，因而第一个参数不需要传 <code class=\"language-text\">this</code>，直接将 test 以合适的方法传入就可以了；</li>\n<li>上面的代码定义了一个 Cypress 的命令方便各个地方调用，类似的代码改成一个普通的函数也是可以的；</li>\n<li>需要用 <code class=\"language-text\">cy.once</code> 保证这个代码只会被调用一次，这样其他的测试用例中不会有类似的数据被写入</li>\n</ol>","frontmatter":{"date":"2019-09-25","title":"Add Context in Mochawesome Report","category":"Cypress"}}},{"node":{"id":"f6537ed2-3963-51f7-ab53-09216b37cac3","html":"<p>Cypress 没有提供原生的上传文件支持，如果需要在 E2E 测试中进行文件上传的测试工作，最简单的方式就是自己写一个自定义的 Command。参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Cypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'uploadFile'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> prevSubject<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> fixtureFileName<span class=\"token punctuation\">,</span> mimeType <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> cy<span class=\"token punctuation\">.</span><span class=\"token function\">fixture</span><span class=\"token punctuation\">(</span>fixtureFileName<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>Cypress<span class=\"token punctuation\">.</span>Blob<span class=\"token punctuation\">.</span>base64StringToBlob<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> nameSegments <span class=\"token operator\">=</span> fixtureFileName<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> nameSegments<span class=\"token punctuation\">[</span>nameSegments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> testFile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>blob<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> mimeType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> dataTransfer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataTransfer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          dataTransfer<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>testFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n          <span class=\"token keyword\">const</span> setter <span class=\"token operator\">=</span>\n            Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLInputElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'files'</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> dataTransfer<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n          <span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          el<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> subject<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>代码的解释如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">fixture</span><span class=\"token punctuation\">(</span>fixtureFileName<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://docs.cypress.io/api/commands/fixture.html#Syntax\">fixture</a> 是 Cypress 提供的原生 API，可以读取 <code class=\"language-text\">cypress/fixture</code> 目录下的指定文件（文件名为 <code class=\"language-text\">fixtureFileName</code>）。上面这个 API 指定了文件需要以 Base64 的方式读取出来。</p>\n<p><code class=\"language-text\">Cypress.Blob.base64StringToBlob</code> 这一步顾名思义，就是将 Base64 字符串转化成对应的 Blob 类型。</p>\n<p>剩下的代码，就是用 JavaScript 的方式模拟一个文件上传事件。其中，需要先将文件从 Blob 转换成 File（这里涉及到可能的 mime type 检查）；然后，创建一个 DataTransfer 对象，把文件放进去，再赋值给 input（这里需要说明的是，React 组件会对 input 的属性做一层 proxy，因此直接使用 <code class=\"language-text\">input.files = dataTransfer.files</code> 这样的写法，调用的是 React 的方法而不是真正 DOM 的方法。按上面代码中的方法获取到真正的 setter，然后调用可以绕过去）。最后，在创建一个 Change 事件，传递给 input 组件，触发即可。</p>\n<p>当然，简单起见，可以直接使用现成的库：<code class=\"language-text\">cypress-file-upload</code>。GitHub 地址见<a href=\"https://github.com/abramenal/cypress-file-upload\">这里</a>。</p>","frontmatter":{"date":"2019-09-09","title":"Cypress Upload File","category":"Cypress"}}},{"node":{"id":"3e1e3f9f-24b8-5288-b813-dd0ea2b1e2d4","html":"<p>Cypress 默认提供了 <code class=\"language-text\">spec</code> reporter，在 CLI 运行的时候，会将结果输出到 stdout 中。同时，如果使用编程的方法直接调用 <code class=\"language-text\">Cypress.run</code> API，会以 Promise 的方式将运行的结果返回，程序可以从运行结果中，将主要的运行数据给读取出来。然而，不论是哪一种方案，都不能非常直观的将运行结果展示出来。以下介绍如何在 Cypress 中引入 <a href=\"https://adamgruber.github.io/mochawesome/\">Mochawesome</a> reporter，用于生成直观的 HTML 报告。</p>\n<p>需要事先说明的是，虽然 Cypress 是建立在 Mocha 的基础上，且 Mochawesome 是 Mocha 中非常流行的报告生成方案，但是直接使用 Mochawesome 在 Cypress 中生成报表还是有问题的。主要的原因在于，Cypress 调整了测试的行为，自 3.0 版本开始，每一个测试用例（spec）都是单独运行的。因此，原生的 Mochawesome 无法直接生成一个包含所有测试用例的完整报告。为此，需要借助一些额外的工具。</p>\n<p>首先，在项目需要用到 <code class=\"language-text\">mocha</code> 和 <code class=\"language-text\">mochawesome</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> mocha mochawesome</code></pre></div>\n<p>另外需要两个额外的包，分别是 <code class=\"language-text\">mochawesome-merge</code> 和 <code class=\"language-text\">mochawesome-report-generator</code>。可以通过 yarn 或 npm 安装到工作目录中，也可以通过 npx 在需要的时候直接使用。这里，<code class=\"language-text\">mochawesome-merge</code> 将用于将所有的测试用例运行结果进行合并的，然后用 <code class=\"language-text\">mochawesome-report-generator</code> 包生成统一的完整报告。</p>\n<p>接下来，\b修改 <code class=\"language-text\">cypress.json</code> 配置文件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"reporter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mochawesome\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"reporterOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"reportDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress/results\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"overwrite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"html\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"json\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>配置完成，再运行 Cypress，会在 <code class=\"language-text\">cypress/results</code> 目录下生成一批 JSON 文件（如 <code class=\"language-text\">mochawesome.json</code>，<code class=\"language-text\">mochawesome_001.json</code>，……）。</p>\n<p>有了这批生成的 JSON 报告，就可以使用 <code class=\"language-text\">mochawesome-merge</code> 命令，将这些 JSON 文件打包成一个完整的 JSON 报告。CLI 命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx mochawesome-merge --reportDir cypress/results <span class=\"token operator\">></span> mochawesome.json</code></pre></div>\n<p>生成了完整的 JSON 文件之后，可以通过 <code class=\"language-text\">mochawesome-report-generator</code> 生成需要的 HTML 报告：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx mochawesome-report-generator mochawesome.json</code></pre></div>\n<p>当然，如果需要以编程的方式来执行上面的生成报告过程，可以参考下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cypress <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cypress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome-report-generator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> cypress<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> report <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reportDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'cypress/results'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> htmlReports <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>report<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    reportFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'report.html'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// cdn 的命令可以在生成 HTML 报告的时候不额外生成 JavaScript/CSS 文件</span>\n    <span class=\"token comment\">// 这些静态文件会走 CDN (unpkg)</span>\n    <span class=\"token comment\">// 这样，只需要保存一个 HTML 文件就可以了，方便存储</span>\n    cdn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// report 就是 HTML 报告文件生成的路径</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>report<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> htmlReports<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更多的参数使用可以参考项目的源代码。</p>\n<p>需要注意的一点是，生成 Report 之前需要确认 <code class=\"language-text\">cypress/results</code> 目录是否是干净的空目录。如果目录中仍然包含上一次运行的结果，那么最终合并报告的时候，两次运行的结果会叠加在一起，最终导致报告中包含多次运行的内容。一般在 Docker 中运行的话不会有这个问题，但是在本地跑的时候需要注意清理工作。</p>","frontmatter":{"date":"2019-09-08","title":"cypress reporter","category":"Cypress"}}},{"node":{"id":"30e0f516-3406-5ad1-96ec-a3bd625ed69a","html":"<p>在 Cypress 开发的过程中，因为其他操作导致内存吃紧，最终 Cypress 被操作系统杀掉。之后，再重启 Cypress，发现一直运行失败，所有 Test 全部都无法执行成功。</p>\n<p>通过 <code class=\"language-text\">cypress open</code> 来打开 UI 并执行任意测试用例，发现浏览器直接返回 No Internet。浏览器给出的建议是：</p>\n<ol>\n<li>检查系统是否联网</li>\n<li>检查是否有 Proxy 配置</li>\n</ol>\n<p>电脑本身可以正常上网，也没有手动进行任何 Proxy 配置，浏览器给出的建议并不能真正解决问题。</p>\n<p>通过 <code class=\"language-text\">ps -ef | grep Cypress</code> 后发现，即使在 Cypress 没有运行的情况下，依然有运行中的进程：</p>\n<p>执行 <code class=\"language-text\">kill</code> 命令杀死这些个进程。再重试 Cypress 就可以正常运作了。</p>","frontmatter":{"date":"2019-08-28","title":"Cypress No Internet","category":"Cypress"}}},{"node":{"id":"2a1226e2-04b0-5235-8aa7-3324e1cb244f","html":"<p>在 Cypress 中可以通过字符串来查找和定位元素，常用的命令包括 <code class=\"language-text\">get</code>，<code class=\"language-text\">find</code> 等。这里以 <code class=\"language-text\">get</code> 命令为例，在其<a href=\"https://docs.cypress.io/api/commands/get.html#Syntax\">文档</a>可以看到一些用法的说明。</p>\n<p>JavaScript 中支持的 selector 在 <code class=\"language-text\">get</code> 中都是可以使用的，除此之外，文档指出所有 jQuery 支持的也同样支持。（事实上，在 Cypress 注册命令的<a href=\"https://github.com/cypress-io/cypress/blob/a038e7f5d4c56d3efa844e745da40a3d917fefea/packages/driver/src/cy/commands/traversals.coffee\">代码</a>处可以，可以找到和 DOM 相关的代码，这部分代码中不难发现 jQuery 的<a href=\"https://github.com/cypress-io/cypress/blob/0e3289debd1323ad7c6b5f11a573685f24d56629/packages/driver/src/dom/jquery.js\">影子</a>）。</p>\n<p>有了 jQuery 的强力支持，就可以写出复杂的选择条件。比如，选取含有某一文案的 HTML 组件。</p>\n<p>在 jQuery 中，提供了 <code class=\"language-text\">:contains</code> 这个选择器（<a href=\"https://api.jquery.com/contains-selector/\">文档</a>），可以找出所有包含某一指定字符串的所有元素。</p>\n<p>于是，想要找出弹出层中的 Submit 按钮，就可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Cypress<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[role=dialog] button:contains(\"Submit\")'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里，使用了 <code class=\"language-text\">[role=dialog]</code> 来找到弹出层（dialog 相关的介绍可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/dialog_role\">MDN</a>），然后再通过 <code class=\"language-text\">button</code> 找到按钮，最后用 <code class=\"language-text\">:contains(&quot;Submit&quot;)</code> 来找到 Submit 按钮。</p>\n<p>当然，如果一个产品本身支持 i18n，那么 <code class=\"language-text\">:contains</code> 后面的部分就不好写了。一个可行的方案，是通过当前页面的语言，从一组文案中找到合适的文案，再调用 <code class=\"language-text\">:contains</code> 选择器。比如，写一个简单的 Cypress 命令，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Cypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getByText'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">query<span class=\"token punctuation\">,</span> texts</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">html</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> lang <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> html<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:contains('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>texts<span class=\"token punctuation\">[</span>lang<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">')</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里，通过 HTML 上的 <code class=\"language-text\">lang</code> 标记来确定当前页面所选用的语言（<code class=\"language-text\">lang</code> 的一些细节可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang\">MDN</a>），然后再根据语言，从一组文案（即 <code class=\"language-text\">texts</code> 这个对象）中选取当前需要使用的文案。</p>\n<p>命令的使用方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">cy<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[role=dialog] button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> en<span class=\"token punctuation\">:</span> <span class=\"token string\">'Submit'</span><span class=\"token punctuation\">,</span> zh<span class=\"token punctuation\">:</span> <span class=\"token string\">'提交'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-08-27","title":"Get Element by Content","category":"Cypress"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"Cypress"}}}