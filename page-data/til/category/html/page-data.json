{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/html","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"d4408543-25fa-5b4e-87b3-b44c3a3b0228","html":"<p>针对某些语言（如<a href=\"https://zh.wikipedia.org/wiki/%E9%98%BF%E6%8B%89%E4%BC%AF%E6%96%87%E5%AD%97\">阿拉伯文字</a>或<a href=\"https://zh.wikipedia.org/wiki/%E5%B8%8C%E4%BC%AF%E6%9D%A5%E5%AD%97%E6%AF%8D\">希伯来文字</a>），文字的排列顺序是从右往左，而不是一般的从左往右排列。因此，如果有两种语言同时出现在一个文档中，那么就有可能一个段落，同时有从左往右书写的文字以及从右往左书写的文字。这种两类文字混排的情况，就是双向文稿（Bidirectional Text）。</p>\n<p>针对这种情况，HTML 提供了一个特殊的元素 <code class=\"language-text\">bdo</code>，用于处理文档中特殊的文字流排列。这里 <code class=\"language-text\">bdo</code> 的全称是 <strong>B</strong>i<strong>d</strong>irectional Text <strong>O</strong>verride。举例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>\n  This is Text Left to Right\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bdo</span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>rtl<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Right to Left part<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bdo</span><span class=\"token punctuation\">></span></span>.\n  Rest of the world.\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>展示效果如下：</p>\n<p>\n  This is Text Left to Right\n  <bdo dir=\"rtl\" style=\"color:red\">Right to Left part</bdo>.\n  Rest of the world.\n</p>\n<p><code class=\"language-text\">dir</code> 这个属性，可以用于设置当前文字应该显示的方向，可用的属性包括 <code class=\"language-text\">ltr</code>，<code class=\"language-text\">rtl</code> 和 <code class=\"language-text\">auto</code> 三种。需要注意的是，<code class=\"language-text\">dir</code> 这个参数，是针对 <code class=\"language-text\">bdo</code> 元素的，如果写在其他元素上，并不能起到同样的效果。比如，<code class=\"language-text\">&lt;span dir=&quot;rtl&quot;&gt;Hi&lt;/span&gt;</code> 并不会让 <code class=\"language-text\">Hi</code> 显示为 <code class=\"language-text\">iH</code>。</p>\n<p>更多内容，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo\">MDN</a></p>","frontmatter":{"date":"2019-09-11","title":"BDO Element","category":"HTML"}}},{"node":{"id":"f2656553-036e-5a29-a392-3f2398f333ea","html":"<p>在 Web 中，如果希望点击一个链接可以进行下载的操作，有以下两种方案可供参考：</p>\n<section><h2>后端的解决方案</h2><p>后端在返回 Response Header 的时候，可以通过指定 <code class=\"language-text\">Content-Disposition</code> 的值，来改变浏览器默认对链接的行为，从而达到让浏览器直接下载某一个资源的目的。这里，<code class=\"language-text\">Content-Disposition</code> 的第一个参数有两种值可写：<code class=\"language-text\">inline</code> 和 <code class=\"language-text\">attachment</code>。其中，<code class=\"language-text\">inline</code> 是默认的值，表示响应中的消息体会以页面的形式展示，而 <code class=\"language-text\">attachment</code> 则会将这个行为改成下载到本地。</p><p>设置成 <code class=\"language-text\">attachment</code> 之后，还可以进一步通过配置 <code class=\"language-text\">filename</code> 来指定下载文件的文件名。例子如下：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Content-Disposition: attachment; filename=&quot;example.jpg&quot;</code></pre></div><p>如此设置之后，前端在访问到这个 URL 的时候，浏览器就会以 <code class=\"language-text\">example.jpg</code> 为文件名下载当前的资源了。</p><p>更多相关的介绍可以参考<a href=\"https://juejin.im/post/5d521575f265da03ee6a4bda\">这篇文章</a>。</p></section>\n<section><h2>前端的解决方案</h2><p>除了后端的解决方案之外，前端也可以通过指定 <code class=\"language-text\">a</code> 标签中的 <code class=\"language-text\">download</code> 字段来下载文件。对于使用了 <code class=\"language-text\">download</code> 字段的 <code class=\"language-text\">a</code> 标签，点击后的默认行为将会有跳转浏览改成文件下载。<code class=\"language-text\">download</code> 属性可以跟一个文件名作为值，浏览器会将这个值作为下载文件的文件名来使用。</p><p>当然，前端的方案相对来说会有更多的限制，主要是以下几点：</p><ol>\n<li>文件必须是同域的，对于跨域的资源，<code class=\"language-text\">download</code> 并不会直接触发下载功能，行为上会和在新窗口打开资源一致；</li>\n<li>如果后端在 <code class=\"language-text\">Content-Disposition</code> 指定了不同的文件名，那么会以后端指定的结果为准</li>\n<li>如果后端 <code class=\"language-text\">Content-Disposition</code> 设置为 <code class=\"language-text\">inline</code>，不同的浏览器会有不同的行为：Firefox 会按 <code class=\"language-text\">Content-Disposition</code> 的结果来执行；Chrome 则会按 <code class=\"language-text\">download</code> 字段的设置来执行</li>\n</ol><p>更多细节可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\">MDN</a> 文档的相关部分。</p></section>","frontmatter":{"date":"2019-08-15","title":"Download in HTML","category":"HTML"}}},{"node":{"id":"9981ee03-0c84-581d-aaaf-ff743c87e601","html":"<p>在一个表单中敲击回车按钮，默认会触发 <code class=\"language-text\">&lt;form&gt;</code> 的 submit 事件。当 <code class=\"language-text\">&lt;form&gt;</code> 里面有 <code class=\"language-text\">&lt;button type=&quot;submit&quot;&gt;</code> 按钮的时候，敲击回车会先触发 <code class=\"language-text\">button</code> 的 click 事件，再触发 <code class=\"language-text\">form</code> 的 submit 事件。</p>\n<p>因为有了这样的机制，在一个表单中，只要指定了 submit 按钮，那么不论是点击按钮还是直接按回车，都可以触发相同的 click 事件，达到同样的代码提交功能。这使得代码可以很容易的复用，不需要额外的工作量就可以让鼠标和键盘都能够方便的提交表单。</p>\n<p>然而在实际开发的过程中，因为组件的划分，有时候不能做到 <code class=\"language-text\">&lt;button type=&quot;submit&quot;&gt;</code> 放在 <code class=\"language-text\">&lt;form&gt;</code> 中。HTML5 中，增加了 <code class=\"language-text\">button</code> 的 <code class=\"language-text\">form</code> 属性，可以用于关联表单和表单外的提交按钮。</p>\n<p>举例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">form</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form-id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Submit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在上述代码中，button 存在于 form 的外面，理论上和 form 是没有关联的。但是，因为 <code class=\"language-text\">form</code> 字段的存在，使得 form 和 button 被关联了起来。这样，和 button 在 form 中的表现形式一样，在 form 内敲击回车，就可以触发 button 的 click 事件。</p>\n<p>注：如果 click 事件和 submit 事件（如果定义了）都没有 <code class=\"language-text\">event.preventDefault()</code>，那么就会触发默认的 form 提交流程，会造成页面提交。如果 form 没有指定提交的地址，那么就会提交到当前页面。这可能并不是预期中的行为。</p>","frontmatter":{"date":"2019-06-27","title":"Submit Button outside Form","category":"HTML"}}},{"node":{"id":"b35c5dfa-bb09-5c73-b208-782b64bf2af7","html":"<p>当用 JavaScript 去访问 HTML 中的元素的时候，实际访问到的是 DOM 元素。比如，访问 <code class=\"language-text\">div</code> 元素，实际拿到的是 <code class=\"language-text\">HTMLDivElement</code>；访问 <code class=\"language-text\">span</code> 元素，实际拿到的是 <code class=\"language-text\">HTMLSpanElement</code>。</p>\n<p>大多数情况下，不同的 HTML 元素有不同的 DOM interface 对应，因为不同的元素很可能有一些行为/属性上的不同。</p>\n<p>但是也存在一些 HTML 元素，并没有特定的 DOM interface 对应，直接使用了 HTMLElement 这个基类。常见的例子有 <code class=\"language-text\">i</code>，<code class=\"language-text\">b</code> 或者 <code class=\"language-text\">ruby</code> 等。</p>\n<p>注：根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\">MDN</a> 的说明，Firefox 中 <code class=\"language-text\">i</code> 对应的 DOM 是 <code class=\"language-text\">HTMLSpanElement</code>。但实际测试下来，最新版本的 Firefox 实现和标准是一致的，使用的 DOM interface 是 <code class=\"language-text\">HTMLElement</code> 而不是 <code class=\"language-text\">HTMLSpanElement</code>。</p>\n<p>可以用下面的方法简单的查看具体使用的是哪一个 DOM interface：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// should be: HTMLElement</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// should be: HTMLSpanElement</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-06-11","title":"DOM Interface","category":"HTML"}}},{"node":{"id":"7e99c7c6-ad08-5aa7-8f34-220e5785c2f0","html":"<p>HTML 中的 <code class=\"language-text\">input</code> 组件，如果设置成 <code class=\"language-text\">type=file</code>，就可以变成一个文件选择控件。</p>\n<p>默认情况下，系统默认打开的这个文件选择框，可以接受任意的文件选择。如果需要指定可以选择的文件类型，可以使用 <code class=\"language-text\">accept</code> 参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/x-png,image/gif,image/jpeg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>上面这个例子中，浏览器将会只接受 png / gif 或 jpg 的输入。</p>\n<p>也可以写:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>image/*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>以支持任意类型的图片格式输入。同理，类似的比如 <code class=\"language-text\">video/*</code> 将会只接受任意类型的视频；<code class=\"language-text\">audio/*</code> 将会只接受任意类型的音频文件。</p>\n<p>除了指定 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\">MIME</a> 类型之外，也可以指定后缀。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>file</span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.pdf,.doc,.docx<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>将会只允许以 pdf / doc / docx 这三种名称作为后缀的文件被选择。</p>\n<p>各个浏览器的支持情况可以看<a href=\"http://caniuse.com/#feat=input-file-accept\">这里</a>。</p>\n<p>（当然，这个只是前端的一个校验，后端依然需要重新对前端给的输入进行检查才行）</p>","frontmatter":{"date":"2019-06-10","title":"Read certain type of files","category":"HTML"}}},{"node":{"id":"da34c265-c289-5002-9a30-ffe1f1eca2eb","html":"<p>一个网站的 Style Guide 可以方便的展示出基础 HTML 元素的样式，方便查看整体的效果。</p>\n<p>一些值得参考的 Style Guide</p>\n<ul>\n<li><a href=\"https://www.poormansstyleguide.com/\">Poor Man’s Style Guide</a></li>\n<li><a href=\"https://www.chenhuijing.com/styleguide/\">Chen Hui Jing’s Style Guide</a></li>\n</ul>\n<p>本网站使用的 <a href=\"/styleguide\">Style Guide</a>。</p>","frontmatter":{"date":"2019-05-29","title":"Style Guide","category":"HTML"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"HTML"}}}