{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/tool","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"d7262571-a581-5b2f-8938-103fb637b4ce","html":"<p>使用 Node 解析当前的 Git Config 文件，有两个可以辅助的 npm 库：</p>\n<ol>\n<li><code class=\"language-text\">git-config-path</code>：可以用于判断当前的 Git Config 地址</li>\n</ol>\n<p>例如，需要获取全局 Git Config 地址，可以运行：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> configPath <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git-config-path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>更多可以参考<a href=\"https://github.com/jonschlinkert/git-config-path\">文档</a>。</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">ini</code>：可以用于解析和处理 ini 类型的配置文件，<a href=\"https://github.com/jonschlinkert/parse-git-config\">parse-git-config</a> 也使用了这个来解析 Git Config 文件。</li>\n</ol>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> configPath <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'git-config-path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'global'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ini <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ini'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> ini<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stringify <span class=\"token operator\">=</span> ini<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>configPath<span class=\"token punctuation\">,</span> stringify<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更多内容，可以参考<a href=\"https://github.com/npm/ini#readme\">文档</a>。</p>","frontmatter":{"date":"2019-10-14","title":"Parse GitConfig via Node","category":"Tool"}}},{"node":{"id":"f1d289ff-b50b-514b-8f84-9dd651b7627f","html":"<p>根据 TSLint 官方给出的建议，TypeScript 项目的代码，现在也推荐使用 ESLint 来进行代码规范的检查。</p>\n<p>在具体使用的时候，需要在 <code class=\"language-text\">.eslintrc</code> 中增加如下部分的设置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@typescript-eslint\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"ecmaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"ecmaFeatures\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，需要用到 <code class=\"language-text\">typescript-eslint</code> 这个库来帮助 ESLint 解析代码（<a href=\"https://github.com/typescript-eslint/typescript-eslint\">GitHub</a>）。</p>\n<p>然而，在实际使用 ESLint 来检查 TypeScript 代码的时候，需要额外注意一个细节：</p>\n<p>根据<a href=\"https://github.com/typescript-eslint/typescript-eslint/issues/355#issuecomment-473353680\">这里</a>给出的解释，ESLint 默认情况下并不会检查非 <code class=\"language-text\">.js</code> 和 <code class=\"language-text\">.jsx</code> 结尾的文件。也就是说，如果 <code class=\"language-text\">src</code> 目录下有以下几个文件：<code class=\"language-text\">src/index.js</code>，<code class=\"language-text\">src/app.tsx</code>，<code class=\"language-text\">src/utils.ts</code>，那么在运行命令 <code class=\"language-text\">eslint src</code> 的时候，只有 <code class=\"language-text\">src/index.js</code> 会被检查，剩下的两个会直接被忽略。</p>\n<p>需要检查 TypeScript 的代码，需要手动在调用 <code class=\"language-text\">eslint</code> 命令行的时候加上 <code class=\"language-text\">--ext</code> 参数，如：<code class=\"language-text\">--ext js,jsx,ts,tsx</code>。</p>\n<p>当然，如果给 ESLint 手动指定需要检查的文件，或是通过 <code class=\"language-text\">lint-staged</code> 工具在 Git 签入的时候对 TypeScript 文件进行检查，这些情况下都是不需要额外指定 <code class=\"language-text\">--ext</code> 参数的，ESLint 可以正确处理 TypeScript 的代码。</p>","frontmatter":{"date":"2019-09-02","title":"ESlint for TypeScript","category":"Tool"}}},{"node":{"id":"1dfceea8-4efc-50ce-a5ec-1f0ecaf72b01","html":"<p>OSX 自带的 QuickTime Player 支持屏幕的录制功能。具体的操作步骤如下：</p>\n<ol>\n<li>打开 QuickTime Player</li>\n<li>点击菜单中的 File => New Screen Recording</li>\n<li>拖拽选择需要录制的区域，并点击开始录制，点击右上角可以结束录制</li>\n<li>录屏结束后，可以选择菜单中的 File => Export => As Movie 来保存视频</li>\n</ol>\n<section><h2>转化为 Gif 格式</h2><p>假设上述步骤保存了一个名为 <code class=\"language-text\">in.mov</code> 的视频，通过以下步骤可以将视频转化为 Gif 格式：</p><ol>\n<li>\n<p>右键点击 <code class=\"language-text\">in.mov</code> 文件，选择 <code class=\"language-text\">Get Info</code>，在 <code class=\"language-text\">More Info</code> 中找到视频的大小信息，这里假设大小为 60x40</p>\n</li>\n<li>\n<p>运行如下命令，将 <code class=\"language-text\">in.mov</code> 转化为 <code class=\"language-text\">out.gif</code> 文件</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ffmpeg -i in.mov -s 60x40 -pix_fmt rgb24 -r 10 -f gif out.gif</code></pre></div>\n<p>这里参数的具体含义如下：</p>\n<ul>\n<li><code class=\"language-text\">-s 60x40</code> 指定了最大宽度和最大高度。这里可以不指定，输出将按照原始大小来。如果指定较小的长宽值，输出将变小。</li>\n<li><code class=\"language-text\">-r 10</code> 将帧数从 25 调整为 10。</li>\n</ul>\n</li>\n</ol><p>如果 <code class=\"language-text\">ffmpeg</code> 命令找不到，可以使用 <code class=\"language-text\">Homebrew</code> 进行安装：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> ffmpeg</code></pre></div></section>\n<section><h2>优化 Gif 文件</h2><p>可以使用 <code class=\"language-text\">gifsicle</code> 命令对产生的 gif 文件进行压缩：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gifsicle out.gif --optimize<span class=\"token operator\">=</span>3 -o optimized.gif</code></pre></div><p>这里，<code class=\"language-text\">--optimize=3</code> 参数要求 <code class=\"language-text\">gifsicle</code> 使用最高等级优化图片。这会需要更多的时间和 CPU 来计算，但是压缩效果相对也是最好的。</p><p>如果找不到 <code class=\"language-text\">gifsicle</code> 命令，可以使用 <code class=\"language-text\">Homebrew</code> 进行安装：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> gifsicle</code></pre></div><p>经测试，一个 <code class=\"language-text\">463 KB</code> 的文件，压缩后的大小为 <code class=\"language-text\">417 KB</code>，压缩了 10%。</p><p>以上生成 Gif 和优化 Gif 的命令可以放到一起执行：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ffmpeg -i in.mov -s 60x40 -pix_fmt rgb24 - <span class=\"token operator\">|</span> gifsicle --optimize<span class=\"token operator\">=</span>3 <span class=\"token operator\">></span> out.gif</code></pre></div></section>\n<section><h2>参考</h2><ul>\n<li><a href=\"https://gist.github.com/dergachev/4627207\">https://gist.github.com/dergachev/4627207</a></li>\n<li>该文作者针对 mov 到 gif 的转换写了一个 Ruby 脚本，可以显著提高转化后的质量，脚本见 <a href=\"https://github.com/dergachev/screengif\">https://github.com/dergachev/screengif</a></li>\n</ul></section>","frontmatter":{"date":"2019-08-07","title":"Screen Recording in MacOS","category":"Tool"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"Tool"}}}