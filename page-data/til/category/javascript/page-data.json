{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/javascript","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"fd022b7a-07a5-588c-83eb-4dc5e5ec807c","html":"<p><code class=\"language-text\">arguments.callee</code> 是一个不应该被使用的 API，在严格模式下使用会直接报错。这里仅仅是作为了解，记录一下该 API 的作用。</p>\n<p>在早期的 JavaScript 版本中，不允许写带名字的函数表达式，在这种情况下，如果需要做递归调用，就无法显式得指明需要调用的函数名称。<code class=\"language-text\">arguments.callee</code> 这个值，指向了当前被调用的函数本身，因此可以在匿名函数递归调用中被使用。举例来说，在早期的 JavaScript 中，<code class=\"language-text\">Array.prototype.map</code> 函数给定的回调函数只能是匿名的，如果要实现一个阶乘函数，只能这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然而，<code class=\"language-text\">arguments.callee</code> 的调用会导致 <code class=\"language-text\">this</code> 的指向出现问题（具体见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\">MDN</a>），使用起来比较危险。</p>\n<p>在 ECMAScript 3 中已经支持了带函数名的表达式，因此上面的代码可以简单的改写为一下这种正常的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>换句话说，只需要给函数指定名称，就可以规避绝大多数的 <code class=\"language-text\">arguments.callee</code> 使用了（注：匿名函数/箭头函数无法指定名称，但同时规范也明确了匿名函数中没有 <code class=\"language-text\">arguments</code>）。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\">MDN</a> 给出了一个 <code class=\"language-text\">arguments.callee</code> 无法替换的场景：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sIdentity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> oPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alert(arguments.callee.identity);'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oPerson<span class=\"token punctuation\">.</span>identity <span class=\"token operator\">=</span> sIdentity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> oPerson<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> john <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">john</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的函数 <code class=\"language-text\">oPerson</code> 是通过 <code class=\"language-text\">new Function</code> 创建的。在字符串内无法“得知”函数会被赋值的名称，因此只能通过 <code class=\"language-text\">arguments.callee</code> 去获取。在某些非常特殊的业务场景中，可能会有需求将某些表达式通过字符串进行存储，并通过 <code class=\"language-text\">new Function</code> 构建执行。这种时候，使用 <code class=\"language-text\">arguments.callee</code> 获取数据类似于传参。当然，如果只是传参的需求，其实可以写成：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> <span class=\"token string\">'alert(arg.identity)'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">identity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> closure <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'const arg = arguments[0];'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">return function () { </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>script<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> identity <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> john <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">john</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-12-01","title":"arguments.callee","category":"JavaScript"}}},{"node":{"id":"7dc217cf-0b7c-5c89-bffe-de976e7fdcfd","html":"<p><code class=\"language-text\">Node.isEqualNode</code> 可以用于比较当前节点（Node）和指定节点是否是相同的。和 <code class=\"language-text\">Node.isSameNode</code> 不同，<code class=\"language-text\">.isEqualNode</code> API 并不需要两个被比较的节点是同一个。只需要满足以下的条件，两个节点就会被认为是相同的：</p>\n<ol>\n<li>两个节点的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\">nodeType</a> 是相同的；</li>\n<li>（省略非 Element 比较的情况，具体细节可以参考 <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">DOM 规范</a>）；</li>\n<li>如果节点是 element 的话，那么对 <code class=\"language-text\">A.isEqualNode(B)</code> 来说，A 中所有的属性，都可以在 B 上找到相同的值（反之亦然）；</li>\n<li>两个节点应该有等长的 <code class=\"language-text\">children</code>；</li>\n<li>两个节点的 <code class=\"language-text\">children</code> 的每个相同位置上的值都是相同的（递归调用 <code class=\"language-text\">isEqualNode</code> 的定义）。</li>\n</ol>\n<p>这里需要说明的几点是：</p>\n<ol>\n<li>在属性判断的时候，并不需要关心顺序：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'className'</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first: &lt;div id=\"id\" className=\"className\">&lt;/div></span>\n<span class=\"token comment\">// second: &lt;div className=\"className\" id=\"id\">&lt;/div></span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<ol start=\"2\">\n<li>属性的判断是直接对值进行比较的，因此 <code class=\"language-text\">style</code> 的顺序不同会造成结果的不同：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first: &lt;div style=\"display:block;color:red\">&lt;/div></span>\n<span class=\"token comment\">// second: &lt;div style=\"color:red;display:block\">&lt;/div></span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<ol start=\"3\">\n<li>属性的比较是顺序无关的，但是 <code class=\"language-text\">children</code> 的比较是顺序相关的：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childA <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childB <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<ol start=\"4\">\n<li>Node 是 Element 的“父类”，除了一般的 DOM 节点之外，节点上的 attributes，节点中的 comment 等也是 Node。这些节点也有 <code class=\"language-text\">isEqualNode</code> API 可以用于比较。对于一般的 Element 来说，可以简单的认为类型，属性和子节点一样，<code class=\"language-text\">isEqualNode</code> 就会返回 <code class=\"language-text\">true</code>。</li>\n</ol>\n<p>原始的比较算法，可以参考 <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">DOM 规范</a>；MDN 的介绍在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode\">这里</a>。</p>","frontmatter":{"date":"2019-11-26","title":"isEqualNode","category":"JavaScript"}}},{"node":{"id":"1de0a311-e54d-5928-bcf7-eccaae105279","html":"<p><code class=\"language-text\">Node.isSameNode</code> 这个 API 的作用，是判断另一个 Node 节点和当前节点是否是相同的。举例来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<p>因为在一个同一个 document 中，一个 Node 实际只有一个引用，因此 <code class=\"language-text\">.isSameNode</code> API 的实际效果其实和 <code class=\"language-text\">==</code> 或 <code class=\"language-text\">===</code> 运算是一致的。简单来说，上面的代码，可以等价于：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">===</span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span>\na <span class=\"token operator\">===</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<p>在 <a href=\"https://dom.spec.whatwg.org/#dom-node-issamenode-othernode-othernode\">DOM (Living Standard) 规范</a>中，也可以看到相关的注释，说明 <code class=\"language-text\">.isSameNode</code> 本质上只是因为历史原因而给出的 <code class=\"language-text\">===</code> 的别名（alias）。</p>\n<p>然而在某些有限的场景下，<code class=\"language-text\">.isSameNode</code> 依然有发挥的应用场景，目前可以想到的有以下几点：</p>\n<ol>\n<li>在节点相关算法（如 Diff 算法）中作为抽象方法直接使用。比如，在 <a href=\"https://github.com/patrick-steele-idem/morphdom\">morphdom</a> 中，就使用了 <code class=\"language-text\">.isSameNode</code> 这个 API 来比较两个节点是否相同，从而节省比较的次数(<a href=\"https://github.com/patrick-steele-idem/morphdom/blob/56f330fa0fa6df9e51eeeaaae5894e24f30edb7c/src/morphdom.js#L237\">源码</a>)。根据 morphdom 给出的<a href=\"https://github.com/patrick-steele-idem/morphdom/blob/e4a34d934b24bb5aad1fcbc6222ed21bcdb5e56d/docs/virtual-dom.md#L23\">文档</a>可以看到，morphdom 的算法也支持对 virtual dom 进行比较，只需要 virtual dom 也对节点实现了相应的 <code class=\"language-text\">.isSameNode</code> API，就有可能可以在比较的时候节省一定的计算次数。这里，<code class=\"language-text\">.isSameNode</code> 在 morphdom 中就被作为抽象方法使用了，算法本身并不在意真正在 diff 的对象是真实的 DOM 还是 virtual DOM，只要节点实现了符合要求的 API，算法就可以正确的进行。</li>\n<li>通过重写方法来达到“代理节点”的功能。现在大多数的 UI 库，都通过声明式的方式来定义组件。在这种情况下，开发者并不需要显示的写出在何时通过何种方式创建或更新一个节点，只需要写出 <code class=\"language-text\">state =&gt; UI</code> 这样的映射函数，UI 库就会在 state 更新后，通过映射函数去得到新的 UI 组件，然后通过 diff 算法去计算得到需要修改的部分，最终将必要的部分进行更新。在这种情况下，就没有办法通过 <code class=\"language-text\">===</code> 去比较两个节点是否相同了，因为流程上是需要通过新的 state 生成节点，然后再和已有的 Node 进行比较。这种情况下，通过改写 <code class=\"language-text\">.isSameNode</code> 就可以达到人为控制的目的。</li>\n</ol>\n<p>举一个 <a href=\"https://github.com/choojs/nanocomponent\">nanocomponent</a> 中提到的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nanohtml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> el1 <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>pink is the best&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> el2 <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>blue is the best&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 对 el1 进行代理操作</span>\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;div>&lt;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">isSameNode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">targetNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>targetNode <span class=\"token operator\">===</span> el1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nel1<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>el1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// true</span>\nel1<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>el2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// false</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>el1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">isSameNode</span><span class=\"token punctuation\">(</span>el2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>虽然 <code class=\"language-text\">proxy</code> 和 <code class=\"language-text\">el1</code> 并不是真的一样的两个节点，但是因为对 <code class=\"language-text\">isSameNode</code> 进行了改写，因而在 diff 算法中，两个节点会被当作是一致的。这有助于节省比较的次数。</p>\n<p><code class=\"language-text\">.isSameNode</code> API 的支持情况，可以查看 <a href=\"https://caniuse.com/#search=isSameNode\">Can I Use</a>；文档可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode\">MDN</a>。</p>","frontmatter":{"date":"2019-11-25","title":"isSameNode","category":"JavaScript"}}},{"node":{"id":"96f3c780-0e41-571e-abef-50a625e53a84","html":"<section><h2>现状</h2><p>当前的 Ant Design，常见的样式覆盖方案，大体上有两种：</p><ol>\n<li>使用 Ant Design 提供的 LESS 变量来覆盖原有的样式（详情可以参考官方的<a href=\"https://ant.design/docs/react/customize-theme-cn\">文档</a>）；</li>\n<li>先一次性载入完整的 Ant Design CSS/LESS 文件，然后再载入新的覆盖样式（一些文章提到了这样的处理方法，比如<a href=\"https://www.jianshu.com/p/a2e7728d8717\">这里</a>）。</li>\n</ol><p>第一种方案的主要缺点是写法不太直观，优点是替换非常彻底，而且是官方推荐的方案；第二种方案，优点是覆盖的写法非常的直观，直接写 CSS/LESS 覆盖原有样式就可以了，但是缺点是需要一次性加载所有的样式，再覆盖。</p></section>\n<section><h2>按需加载的困难点</h2><p>如果使用了 <code class=\"language-text\">babel-plugin-import</code> 对样式进行按需加载，再想要进行样式的覆盖，就很容易出现问题。</p><p>在了解具体可能存在的问题前，先来看一下 <code class=\"language-text\">babel-plugin-import</code> 的按需加载是如何运作的：在 JavaScript / TypeScript 文件遇到任何 Ant Design 组件的引用，就会同时将该组件的样式也插入到引用的位置。也就是说，如果有下面的 JavaScript 代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Select <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span></code></pre></div><p>那么，编译转化后的代码大体如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'antd/lib/select/style'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Select <span class=\"token keyword\">from</span> <span class=\"token string\">'antd/lib/select'</span><span class=\"token punctuation\">;</span></code></pre></div><p>这里实际载入的样式文件来自 <code class=\"language-text\">antd/lib/select/style</code> 目录下的 <code class=\"language-text\">index.js</code> 文件。在这个文件中，具体引用了需要用到的各个 LESS 文件。对 Select 来说，这个样式引用的代码是：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../style/index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../empty/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，除了 Select 自身的 <code class=\"language-text\">index.less</code> 文件外，先后还引用了 <code class=\"language-text\">../../style/index.less</code> 文件和 <code class=\"language-text\">../../empty/style</code> 文件。换句话说，<code class=\"language-text\">babel-plugin-import</code> 在处理按需加载的时候，并不是仅加载了当前使用组件的样式，还包含了一些组件需要的隐含依赖样式。这一点，在 AutoComplete 这样的复杂组件中更为明显。在使用 AutoComplete 的时候，其 <code class=\"language-text\">style/index.js</code> 内容如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../style/index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./index.less\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../select/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../../input/style\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，除了自身的样式之外，Select 和 Input 的样式代码也被加载了一遍。换句话说，如果希望做按需加载的样式覆盖，在加载 AutoComplete 组件的时候，除了需要加载样式覆盖 AutoComplete 的部分，还需要额外加载样式将 Select 和 Input 的样式也覆盖一遍。而这些隐含的样式依赖，在代码上是不容易被察觉的。一旦漏了 Select 和 Input 的样式覆盖，就容易出现问题：明明 Select 的样式在加载的时候已经覆盖过了，但是在加载了 AutoComplete 组件之后，原先已经被覆盖的样式，又被新载入的 Select 原始样式给覆盖回去了。</p><p>因为 Ant Design 的样式没有采用 CSS Module，因此 CSS/LESS 的样式覆盖就强依赖于正确的加载顺序。覆盖的样式必须在原始样式的后面加载，否则结果就会出现错乱。</p></section>\n<section><h2>解决方案</h2><p>为了确保按需加载的情况下，样式的覆盖顺序也是正确的，一个可行的思路是使用 Webpack 中的 loader 功能。根据 Webpack 打包的原理，任何的非 JavaScript 代码，都需要通过合适的 loader 转化成 JavaScript 文件，最终被打包到 bundle 中。而不管 <code class=\"language-text\">babel-plugin-import</code> 插件如何处理 Ant Design 的样式加载，这些最终被引用的 LESS 文件，都需要经过一些 loader 最终处理成可执行的文件（一般需要用到的 loader 包括 <code class=\"language-text\">less-loader</code>，<code class=\"language-text\">css-loader</code> 和 <code class=\"language-text\">style-loader</code>）。</p><p>既然 Webpack 的打包已经保证了统一的处理入口，那么就可以考虑在 loader 这一层，将样式的覆盖处理掉。</p><p>示例代码如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\">/antd\\/lib\\/([^\\/]+)\\/style\\/index.less/</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>content<span class=\"token comment\">/*, map, meta */</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * 这里的 resourcePath 就是具体被使用的 LESS 文件的目录，详情可以参考 Webpack 文档：\n   * https://webpack.js.org/api/loaders/#thisresourcepath\n   */</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> resourcePath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>resourcePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 1. 如果不是 Antd 相关的 LESS 文件，直接忽略不处理\n   */</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>match<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 2. 根据使用的 Component 组件，找到对应的覆盖样式文件，赋值给 customizedLessPath\n   */</span>\n  <span class=\"token keyword\">const</span> customizedLessPath <span class=\"token operator\">=</span> <span class=\"token function\">getCustomizedLessFile</span><span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>customizedLessPath<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> content<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 3. 如果找到了覆盖文件，就将覆盖文件插入到 LESS 的最后面，保证调用顺序\n   */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    content<span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">@import \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>customizedLessPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\";</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>接下来，在 Webpack 中配置对应的 LESS 文件处理 loader，确保这个自定义的 loader 在 less-loader 的前面：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.less$/</span><span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path-to-custom-loader'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div><p>这样，假设 <code class=\"language-text\">babel-plugin-import</code> 插件插入了一段 Select 的 LESS 文件：</p><div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token atrule\">@select-prefix-cls<span class=\"token punctuation\">:</span> ~'@</span><span class=\"token punctuation\">{</span>ant<span class=\"token operator\">-</span>prefix<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>select'<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span></code></pre></div><p>经过上面的自定义 loader 处理之后，就会变成：</p><div class=\"gatsby-highlight\" data-language=\"less\"><pre class=\"language-less\"><code class=\"language-less\"><span class=\"token atrule\">@select-prefix-cls<span class=\"token punctuation\">:</span> ~'@</span><span class=\"token punctuation\">{</span>ant<span class=\"token operator\">-</span>prefix<span class=\"token punctuation\">}</span><span class=\"token operator\">-</span>select'<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token variable\">@import</span> <span class=\"token string\">\"customized-less-path\"</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，自定义的 LESS 文件一定会在原始 LESS 文件的后面，从顺序上可以保证样式一定可以正确的被覆盖。剩下的事情，就交给 less-loader 及后续 loader 去处理就可以了。</p></section>\n<section><h2>延伸阅读</h2><p>关于 Webpack loader 的写法，可以参考 Webpack 官方的<a href=\"https://webpack.js.org/contribute/writing-a-loader/\">教学文档</a>。</p></section>","frontmatter":{"date":"2019-11-18","title":"Ant Design Style Overwrite","category":"JavaScript"}}},{"node":{"id":"265be941-4b2a-5bcb-b8e5-b5bb85a52bb5","html":"<p>在 JavaScript 的 DOM 事件中，可以通过 <code class=\"language-text\">.stopPropagation</code> 来阻止事件冒泡。比如，如果有如下的一个 DOM 结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>parent</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>child</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>同时有如下的 JavaScript 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'parent'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> child <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (child): capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (child): bubble'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): bubble'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，点击 child 元素，console 中的输出的结果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">click(parent): capture\nclick(child): capture\nclick(child): bubble\nclick(parent): bubble</code></pre></div>\n<p>这里，代码有意保持输出顺序和回调函数注册顺序的一致性。如果在上面四个回调函数中依次加上 <code class=\"language-text\">event.stopPropagation()</code>，那么之后所有的内容将不会在继续输出。</p>\n<p>以上是关于 DOM 中冒泡和捕获事件处理的一般流程。这里，如果在一个 DOM 节点上注册了不止一个的事件回调函数，那么浏览器将按照事件注册的先后顺序，依次执行对应的回调函数。需要注意的一点是，<code class=\"language-text\">event.stopPropagation()</code> 是无法阻止同级回调函数被执行的。简单将上面的代码进行修改，可以得到如下的测试代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">parent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): first capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): second capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (child): capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，在点击 child 元素的时候，可以得到如下的输出结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">click (parent): first capture\nclick (parent): second capture</code></pre></div>\n<p>parent 上的 click 回调函数都依次执行完毕了，而 child 上的部分则因为 <code class=\"language-text\">event.stopPropagation()</code> 没有被执行到。这里，如果希望连同层的其他回调函数也不要继续执行，可以改用 <code class=\"language-text\">event.stopImmediatePropagation()</code>，代码修改如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">parent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">stopImmediatePropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): first capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (parent): second capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nchild<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click (child): capture'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>修改后的代码，执行效果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">click (parent): first capture</code></pre></div>\n<p>几点说明：</p>\n<ol>\n<li>React 的合成事件只有 <code class=\"language-text\">stopPropagation</code> 没有 <code class=\"language-text\">stopImmediatePropagation</code>，如果需要使用的话，可以用如下的方法调用真正的 DOM API：<code class=\"language-text\">.nativeEvent.stopImmediatePropagation</code>。这里 React 不需要 <code class=\"language-text\">stopImmediatePropagation</code> 的理由非常简单，因为在 JSX 中，每个事件在 Component 上只能绑定一个回调函数，因此 <code class=\"language-text\">stopImmediatePropagation</code> 是多余的；</li>\n<li>由于浏览器天然维护了一个 EventListener 的队列用于按顺序执行回调函数，<code class=\"language-text\">stopImmediatePropagation</code> 配合上回调函数的注销（<code class=\"language-text\">removeEventListener</code>），可以用于小成本实现一个 FIFO 的队列。示例代码如下：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>key <span class=\"token operator\">!==</span> <span class=\"token string\">'Escape'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">stopImmediatePropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dom<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'display'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  dom<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'display'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown'</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>register<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以上代码执行后，按下 ESC 键，将会依次将 <code class=\"language-text\">ul</code> 下的 <code class=\"language-text\">li</code> 元素一个一个的隐藏。</p>\n<ol start=\"3\">\n<li><code class=\"language-text\">stopImmediatePropagation</code> API 的浏览器支持比较好，在 IE 9 及以上的浏览器中都可以使用，参考 <a href=\"https://caniuse.com/#search=stopimmediatepropagation\">Can I Use</a>；</li>\n<li>更多关于这个 API 的介绍，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation\">MDN</a>。</li>\n</ol>","frontmatter":{"date":"2019-11-17","title":"stopImmediatePropagation","category":"JavaScript"}}},{"node":{"id":"17386daf-da8d-53b5-8e80-73d9d610875a","html":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\b<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'incorrect statement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'correct statement'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的这段代码，看上去两个 <code class=\"language-text\">if</code> 语句并无差别。但是在实际执行的过程中，却会发现，第一个 <code class=\"language-text\">if</code> 语句有语法报错，而第二个 <code class=\"language-text\">if</code> 语句却没有。TypeScript 给出的报错信息是：<code class=\"language-text\">Invalid character.(1127)</code>。</p>\n<p>“看上去”一样的代码，在解释器看来却非常不同。究其原因，是因为第一个 <code class=\"language-text\">if</code> 语句中，有一个“看不见”的字符：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\bif (true) {</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>执行上面的这段代码，会看到在 console 中输出 8。这里，8 是 Backspace 的 ASCII 码编号。在很多的文本编辑器中，这类特殊字符并不会显示出来，但对于解释器来说，这个字符确实真是存在的。（当然，并不是所有的文本编辑器都不会显示，比如把上面的代码复制到 Chrome DevTools 中，就会看到一个 <code class=\"language-text\">🔴</code> 符号，用于表示这个看不见的 Backspace）</p>\n<p>这一类的特殊字符除了 Backspace 还有很多，比如 Unicode 中的零宽空格（U+200b）、左至右符号（U+200e）、右至左符号（U+200f）等。</p>","frontmatter":{"date":"2019-11-13","title":"Invisible Characters","category":"JavaScript"}}},{"node":{"id":"d7ace064-8159-5fe0-ba4d-0b04683a001d","html":"<p>在 JavaScript 中，新的<a href=\"https://github.com/tc39/proposal-object-rest-spread\">规范</a>定义了 object rest spread 运算符，可以用于对象的解构。</p>\n<p>简单的用法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> others<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>除了这种解构同时赋值给新变量的情况，也可以通过解构运算，赋值给一个已有的变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'old'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'new'</span><span class=\"token punctuation\">,</span> others<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里需要注意的一点是，解构加赋值的运算，必须要加上括号。下面的写法会报语法错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token string\">'old'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">'new'</span><span class=\"token punctuation\">,</span> others<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>会报错的原因是，前面的 <code class=\"language-text\">{ value } =</code>，如果不加上括号，会被当成一般的代码块（Block），而不是一个解构的对象（Object），因此解析语法树的时候，在 <code class=\"language-text\">=</code> 这里就报错了（<code class=\"language-text\">Uncaught SyntaxError: Unexpected token &#39;=&#39;</code>）。注：如果不加最后的 <code class=\"language-text\">;</code>，语法也是正确的。</p>\n<p>更多相关的相关介绍，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring\">MDN</a>。</p>","frontmatter":{"date":"2019-11-07","title":"Object Deconstructing without Declaration","category":"JavaScript"}}},{"node":{"id":"4c12371e-1261-52ed-8522-aacc2f3a7626","html":"<p><code class=\"language-text\">console.assert</code> API 可以用于判断某个条件是否满足，并在不满足的时候，在 Console 里打印出相关的数据。整体 API 和 <code class=\"language-text\">console.error</code> 比较类似，但是第一个参数是一个判断条件。整个调用，只会在第一个参数是 falsy 值的时候，才会将后面的数据打印出来。打印的方式和 <code class=\"language-text\">console.error</code> 类似，输出的是 error 信息。需要注意的一点是，根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/assert\">MDN</a> 的描述，在 Node.js 10 版本前，除了输出之外，还会抛出一个 <code class=\"language-text\">AssertionError</code>。这个行为是错误的，console API 不应该影响主流程的代码，Node.js 在 10 修复了问题。</p>\n<p>下面是一段示例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'incorrect with error message'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出的结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">before\nincorrect with error message\nafter</code></pre></div>\n<p>其中，<code class=\"language-text\">incorrect with error message</code> 这一条，还会额外输出调用的堆栈信息，方便调试。</p>\n<p>总结来说，在代码中实现类似 Chrome 中 conditional breakpoint，使用 <code class=\"language-text\">console.assert</code> 是一个不错的选择：只在出现问题的时候打印必要的信息，可以尽可能的减少对 Console 输出的污染。</p>","frontmatter":{"date":"2019-11-05","title":"console.assert","category":"JavaScript"}}},{"node":{"id":"df525546-37d6-5170-90fd-2fe8e78bc734","html":"<p><code class=\"language-text\">console.trace</code> API 支持可选参数，输出的效果和 <code class=\"language-text\">console.log</code> / <code class=\"language-text\">console.info</code> 类似。但是除了输出参数指定的内容之外，还会连带将当前的调用堆栈一起输出。可以看 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/trace\">MDN</a> 中给出的一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">trace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出的结果类似：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">bar\nfoo\n&lt;anonymous&gt;</code></pre></div>\n<p>其中，<code class=\"language-text\">&lt;anonymous&gt;</code> 是因为 <code class=\"language-text\">foo</code> 函数是在 console 中直接运行的。当然，这个只能在调试阶段进行代码的检查。如果需要在线上环境，对可能出问题的地方收集调用堆栈信息，直接使用 <code class=\"language-text\">console.trace</code> 就不满足需求了。可以转而使用 Error 中的 stack 字段：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>输出结果类似：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">Error\n    at bar (&lt;anonymous&gt;:3:19)\n    at foo (&lt;anonymous&gt;:6:3)\n    at &lt;anonymous&gt;:9:1</code></pre></div>","frontmatter":{"date":"2019-11-04","title":"console.trace","category":"JavaScript"}}},{"node":{"id":"332fb33c-4a96-53f4-bc6b-152610186b51","html":"<p>Mobx 中，可以直接通过 <code class=\"language-text\">observable</code> 的方式来控制内部的 state，而不再使用 React 自带的 state 功能。一般的写法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n\n@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Clicked: </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样写的优势在于，可以将何时渲染的判断交给了 Mobx 去处理，不用手动去处理。</p>\n<p>对于需要用到 <code class=\"language-text\">observable</code> 组合数据的情况，可以使用 <code class=\"language-text\">computed</code> 来生成一个新的 <code class=\"language-text\">observable</code> 值，也可以直接使用 getter 函数。以下的两个方案在效果上是等价的：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMany <span class=\"token operator\">?</span> <span class=\"token string\">'many'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'few'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> computed <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n\n@observer\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  @observable num<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  @computed\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Clicked </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isMany <span class=\"token operator\">?</span> <span class=\"token string\">'many'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'few'</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之所以两者是等价的，理由很简单。在执行 render 函数的时候，Mobx 注意到 <code class=\"language-text\">this.isMany</code> 被使用了，而在调用这个 getter 函数的时候，实际使用到了 <code class=\"language-text\">this.num</code> 这个 observable。因此，当 <code class=\"language-text\">this.num</code> 发生了变化之后，Mobx 知道需要重新调用 render 函数进行绘制。而对于使用了 computed 的情况来说，情况会更简单一些，<code class=\"language-text\">this.num</code> 这个 observable 的变化触发了 <code class=\"language-text\">this.isMany</code> 的重新计算，最终在 <code class=\"language-text\">this.isMany</code> 值变化之后触发了 render 函数的重新计算。</p>\n<p>然而需要注意的一点是，两者只是在效果上等价。在实际运算过程中，computed 的方案有两个优势：</p>\n<ol>\n<li>代码看上去更清晰。render 是因为 computed 的数据触发的，这一点在代码上可以很容易的看出来；而第一种方案，是否触发 getter 函数，其实需要多思考一下才能确定；</li>\n<li>实际执行效率更高。使用 getter 的方案，由于 render 函数实际上是和 <code class=\"language-text\">this.num</code> 这个 observable 进行关联的，因此哪怕 <code class=\"language-text\">this.isMany</code> 这个 getter 函数没有发生值的变化，只要 <code class=\"language-text\">this.num</code> 变了，render 函数都需要被执行；而对于使用 computed 的情况，因为 render 是和 <code class=\"language-text\">this.isMany</code> 进行关联的，实际 <code class=\"language-text\">this.isMany</code> 没有变化的时候，是不需要触发重绘的。换句话说，前者 getter 的方案，在 <code class=\"language-text\">this.num</code> 从 1 涨到 6 的过程中，一共触发了五次重新渲染；而后者 <code class=\"language-text\">computed</code> 的方案，只触发了一次重新渲染（当 <code class=\"language-text\">this.num = 6</code> 的时候）</li>\n</ol>\n<p>针对第二点，Mobx 的 GitHub issue 中作者也有相关的说明，见<a href=\"https://github.com/mobxjs/mobx/issues/161#issuecomment-196744152\">这里</a>。</p>","frontmatter":{"date":"2019-10-29","title":"computed and getter in Mobx","category":"JavaScript"}}},{"node":{"id":"15786218-7294-5212-8a5c-878f74283838","html":"<p>在 Node.js 中，可以通过 <code class=\"language-text\">os</code> 模块的 <code class=\"language-text\">networkInterfaces</code> API 来获取当前机器的 IP 数据。返回的结果类似于 <code class=\"language-text\">ifconfig</code> 或 <code class=\"language-text\">ipconfig</code> 命令。</p>\n<p>以获取当前主机的 IPv4 地址为例，可以写类似如下的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getIPAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> interfaces <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'os'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">networkInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>interfaces<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">interface</span></span> <span class=\"token operator\">=></span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">.</span>family <span class=\"token operator\">===</span> <span class=\"token string\">'IPv4'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">interface</span></span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>简单的说明如下：</p>\n<ul>\n<li><code class=\"language-text\">internal</code> 用于表示当前的地址是否是本地回环地址或是其他外部无法访问的地址（例：127.0.0.1）；</li>\n<li><code class=\"language-text\">family</code> 用于表示当前地址的类型，将会是 <code class=\"language-text\">IPv4</code> 或 <code class=\"language-text\">IPv6</code> 中的一种；</li>\n<li><code class=\"language-text\">address</code> 用于表示当前的 IP 地址；</li>\n<li><code class=\"language-text\">os.networkInterfaces</code> 的返回是一个对象，key 用于表示 network interface，比如常见的 <code class=\"language-text\">lo</code> 或者 <code class=\"language-text\">eth0</code> 等。</li>\n</ul>\n<p>更多的返回数据及解释，可以参考<a href=\"https://nodejs.org/api/os.html#os_os_networkinterfaces\">官方文档</a>。</p>","frontmatter":{"date":"2019-10-28","title":"Get Current IP Address","category":"JavaScript"}}},{"node":{"id":"9c56df61-73a4-5eb4-a4eb-4158947a5a66","html":"<p><code class=\"language-text\">document.designMode</code> 这个属性，可以用于控制当前的整个页面是否可以直接被编辑。可以设置的属性值包括 <code class=\"language-text\">on</code> 和 <code class=\"language-text\">off</code> 两种。如果设置为 <code class=\"language-text\">on</code>，那么相当于开启了全页面范围的 <code class=\"language-text\">contenteditable=true</code>。默认情况下，这个值是 <code class=\"language-text\">off</code>。</p>\n<p>通过开关这个值，非程序员也可以轻松的对当前页面进行简单的修改（主要是文案的部分）。一些简单的需求，PM 和 UX 就可以直接进行尝试，而不需要再借助程序员的帮忙了。当然，对页面“造假”的门槛也变低了。</p>\n<p>可以通过下面的按钮来实际体验一下这个功能。</p>\n<p>\n  <button onclick=\"document.designMode=(document.designMode==='off'?'on':'off')\">\n    Toggle Design Mode\n  </button>\n</p>\n<p>更多的说明及浏览器支持情况（基本可以认为全支持），可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode\">MDN</a>。</p>","frontmatter":{"date":"2019-10-22","title":"Document DesignMode","category":"JavaScript"}}},{"node":{"id":"c53d17b5-4c70-5421-bcc4-1ee6a0e8cffc","html":"<p>要获取一个 NPM 包所有的版本信息，可以使用 <code class=\"language-text\">npm view</code> 这个命令。比如，检查 React 这个包的所有版本，并输出成 JSON 格式：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> view react versions --json</code></pre></div>\n<p>当然，以上只是 CLI 的操作方式，如果希望可以通过编程的方式去了解一个 NPM 包的相关信息，需要换一个方式。注意到 NPM 本身也是一个 <a href=\"https://www.npmjs.com/package/npm\">NPM 包</a>，对应的源码可以在 <a href=\"https://github.com/npm/cli\">GitHub</a> 上找到。其中，<code class=\"language-text\">npm view</code> 这个命令，对应的代码是 <a href=\"https://github.com/npm/cli/blob/c1522be2406a0ea4f14c85753edd42ddd8d7e180/lib/view.js\">lib/view.js</a>。</p>\n<p>通过观察这个文件，不难发现，NPM 底层依赖的其实是 <a href=\"https://www.npmjs.com/package/libnpm\">libnpm</a> 这个库。其中，获取包信息的部分，使用的是 <code class=\"language-text\">libnpm/packument</code> 这个部分。而根据文档，这里 <code class=\"language-text\">libnpm/packument</code> 本质上就是将 <a href=\"https://www.npmjs.com/package/pacote\">pacote</a> 中的 <code class=\"language-text\">packument</code> 接口开放了出来。</p>\n<p>实际的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> packument <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libnpm/packument'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getVersions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">package</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> versions <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">packument</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">package</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// to use custom registry</span>\n    registry<span class=\"token punctuation\">:</span> <span class=\"token string\">'https://registry.npm.taobao.org'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// get all meta data</span>\n    fullMetadata<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// prefer to get latest online data</span>\n    <span class=\"token string\">'prefer-online'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> versions<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">packument</code> 这个 API 的返回数据格式，可以参考 <code class=\"language-text\">@types/pacote</code> 中的相关<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/25fe77861d42ff01903fe2e2d1014b3ed354bfde/types/pacote/index.d.ts#L98\">定义</a>。</p>\n<p>需要额外注意的一点是：npm 和一些 registry 服务使用的数据格式可能略有区别。举例来说，npm 的返回数据里，每个版本的 <code class=\"language-text\">dist</code> 中可能包含 <code class=\"language-text\">unpackedSize</code> 数据（optional），表示该版本文件实际的大小；而 <a href=\"https://github.com/npm/cli\">cnpm</a> 返回的数据中，<code class=\"language-text\">dist</code> 内包含的是 <code class=\"language-text\">size</code> 数据（<a href=\"https://github.com/cnpm/cnpmjs.org/blob/26d7147562a1ae21db8bfec26983daf311353d96/models/module.js#L74\">源代码</a>），表示该版本的压缩文件 tar 的大小。</p>","frontmatter":{"date":"2019-10-21","title":"Get Npm Package Info","category":"JavaScript"}}},{"node":{"id":"cd182026-2d57-5a6b-83b4-a7f384ce0957","html":"<p>在日常的开发过程中，对于一个按钮或者链接，一般会附上一个 <code class=\"language-text\">onClick</code> 事件，以响应用户的点击操作。当用户实际按下按钮或链接之后，再通过 <code class=\"language-text\">onClick</code> 事件去触发之后要进行的流程（比如网络请求或是链接跳转等）。</p>\n<p>如果对于用户操作后的反馈速度有一定的要求，这里的行为就需要进行优化。以链接为例，一个常见的操作方法是（比如 <a href=\"https://github.com/GoogleChromeLabs/quicklink\">quicklink</a>），用程序对可视范围内的链接地址进行预加载（使用 <code class=\"language-text\">prefetch</code>）。这样，当用户真正点击的时候，资源很可能已经得到了加载，打开速度就会显著提升。</p>\n<p>当然，这样的行为是没有预判的，纯粹暴力的进行可能的预备操作。如果预备操作损耗较多，这样的操作就显得不方便了。</p>\n<p>一个更加“智能”的操作是，仅当用户“点击”了之后才进行预加载。实际上，即使是一个点击的的操作，也会分成好几个不同的事件，包括 <code class=\"language-text\">MouseDown</code>，<code class=\"language-text\">MouseUp</code> 和 <code class=\"language-text\">Click</code>。在 <code class=\"language-text\">MouseDown</code> 和 <code class=\"language-text\">Click</code> 之间，差着大约 100ms 的时间。</p>\n<p>换句话说，如果在 <code class=\"language-text\">MouseDown</code> 的时候就开始预处理，等到 <code class=\"language-text\">Click</code> 时才真正进行加载，那么整体的加载时间会减少 100ms 左右。在某些情况下，这也是个不小的提升了。</p>\n<p>可以用下面的这段代码实际测试一下，<code class=\"language-text\">MouseDown</code> 事件和 <code class=\"language-text\">Click</code> 事件之间的时间差（具体时间差因人而异）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Click Me'</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmousedown</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Mousedown: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Click: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也可以直接点击下面这个按钮尝试：</p>\n<button onmousedown=\"window.__down=Date.now()\" onclick=\"this.textContent='Took:'+(Date.now() - window.__down)+' ms'\">\n  Click Me\n</button>\n<p></p>\n<p>当然，比这个略激进的操作，可以将 <code class=\"language-text\">MouseDown</code> 事件换成 <code class=\"language-text\">MouseEnter</code> 事件，这样在 Hover 的时候就会开始预加载。大概能提前 300ms 左右开始操作，当然存在一定的误判风险（比如用户只是划过了鼠标，并没有想要点击的意愿）。</p>\n<p>可以参考 <a href=\"http://instantclick.io/\">InstantClick</a> 了解更多实现的细节。</p>","frontmatter":{"date":"2019-10-15","title":"MouseDown to Click","category":"JavaScript"}}},{"node":{"id":"d2c713ba-83c1-5c25-8d75-4bb1aece6f6b","html":"<p>浏览器提供了 <code class=\"language-text\">performance</code> 用于测量 JavaScript 的一些运行效率，并在浏览器的对应位置（如 Chrome 的 Performance Tab）生成火焰图，可以方便的查看程序调用栈的执行效率。简单的操作如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getMarkName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mark: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">beginMark</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMarkName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">endMark</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> markName <span class=\"token operator\">=</span> <span class=\"token function\">getMarkName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    performance<span class=\"token punctuation\">.</span><span class=\"token function\">measure</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> markName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 如果 markName 无法被找到（也就是 beginMark 函数没有被调用）</span>\n    <span class=\"token comment\">// 那么程序在 performance.measure 的时候会报错</span>\n    <span class=\"token comment\">// 这里无需将报错抛出，直接吞掉就可以了</span>\n  <span class=\"token punctuation\">}</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">clearMarks</span><span class=\"token punctuation\">(</span>markName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  performance<span class=\"token punctuation\">.</span><span class=\"token function\">clearMeasure</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">beginMark</span><span class=\"token punctuation\">(</span><span class=\"token string\">'label name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 需要进行的操作</span>\n  <span class=\"token function\">endMark</span><span class=\"token punctuation\">(</span><span class=\"token string\">'label name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>具体来说，通过 <code class=\"language-text\">performance.mark</code> 函数标记一个点，然后在需要测量的程序执行完成之后，通过 <code class=\"language-text\">performance.measure</code> 来计算当前和最初 mark 的点之间的运行时间。最终，这一段结果会在 Chrome 的 Performance Timings 中形成对应的火焰图数据。</p>\n<p><code class=\"language-text\">performance.measure</code> 也支持三个参数的调用，三个参数分别是 label 的名称，起始 mark 的名称以及终止 mark 的名称。如果省略最后一个参数，那么终止的时间点就是当前 <code class=\"language-text\">performance.measure</code> 调用的时间点。</p>\n<p>最后，通过 <code class=\"language-text\">performance.clearMarks</code> 及 <code class=\"language-text\">performance.clearMeasure</code> 删除标记，清理不必要的内存使用。</p>\n<p>更多的介绍，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance\">MDN</a> 的文档。React 中也使用了类似的技术用于在 Performance 中生成每个 Component 渲染花费的时间，相关的代码可以参考 <a href=\"https://github.com/facebook/react/blob/50addf4c0e411e351de7290c8c60ec775c25c8c4/packages/react-reconciler/src/ReactDebugFiberPerf.js#L80\">ReactDebugFiberPerf.js</a>。</p>","frontmatter":{"date":"2019-09-30","title":"Performance Measure","category":"JavaScript"}}},{"node":{"id":"27ff91be-e0ae-5169-a594-b6e813c36527","html":"<p>JavaScript 中提供了 <code class=\"language-text\">devicemotion</code> 事件，可以用于监听设备各个方向上受到的力（加速度）。有了这个事件，就可以用于判断当前用户是否在进行类似“摇一摇”之类的操作，方便开发基于特定交互的一些功能。</p>\n<p>具体来说，<code class=\"language-text\">devicemotion</code> 事件会提供 <code class=\"language-text\">accelerationIncludingGravity</code> 数据，作为一个对象分别提供 <code class=\"language-text\">x</code>，<code class=\"language-text\">y</code> 和 <code class=\"language-text\">z</code> 三个方向上的加速度。通过不同时间点上加速度值的不同，就可以判断当前用户是否在进行摇晃手机的操作了。</p>\n<p>使用 <code class=\"language-text\">devicemotion</code> 的示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>accelerationIncludingGravity<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// do stuff here</span>\n<span class=\"token punctuation\">}</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'devicemotion'</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>判断是否在摇晃手机，简单来说，只需要判断当前的各方向加速度之差，是否有至少两个超过了给定的阈值。<a href=\"https://github.com/alexgibson/shake.js\">shake.js</a> 中就使用了这样的方法来判断当前用户是否在摇晃手机，具体的代码可以参考<a href=\"https://github.com/alexgibson/shake.js/blob/d232eee7a5f31e9fd37aa79aa83f1f206035ccc9/shake.js#L104\">源码</a>。</p>\n<p><code class=\"language-text\">devicemotion</code> 更多的信息，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/devicemotion_event\">MDN</a>。</p>","frontmatter":{"date":"2019-09-29","title":"Mobile Shake","category":"JavaScript"}}},{"node":{"id":"1b9a898d-4d6f-5201-8c9a-05733edf90ee","html":"<p>在用 React 处理业务的过程中，经常会遇到这样的场景：某一个 UI 需要等待网络请求来展示，在等待的过程中，需要显示 Loading 界面，并在请求完成后，显示真正的 UI。这种情况，和按需加载模块的行为非常类似。既然 React.Suspense + React.lazy 可以组合用于按需加载模块时候的 UI 展示，那么是否可以使用同样的组合来完成类似等待网络请求的 UI 显示呢？答案是肯定的。下面给出一个示例代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fakeFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"finished!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">fakeFetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Suspense<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如此一来，在 Promise 没有返回的时候，组件会显示 <code class=\"language-text\">&lt;div&gt;loading...&lt;/div&gt;</code>。而等到 Promise resolve 之后，就会显示真正的 UI。</p>\n<p>几点说明：</p>\n<ol>\n<li><code class=\"language-text\">React.lazy</code> 本身是为 <code class=\"language-text\">import()</code> 设计的，所以在 Promise 返回的时候，需要将组件放到 <code class=\"language-text\">default</code> 属性下面，保持和 <code class=\"language-text\">import()</code> 的行为一致；</li>\n<li><code class=\"language-text\">React.Suspense</code> 和 <code class=\"language-text\">React.lazy</code> 的组合，本质上内部是使用了 <code class=\"language-text\">throw</code> + <code class=\"language-text\">componentDidCatch</code> 的方式进行实现的，因而如果不使用 <code class=\"language-text\">React.lazy</code>，直接在组件内 <code class=\"language-text\">throw Promise</code>，也可以达到类似的效果：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fakeFetch</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">fn</span> <span class=\"token operator\">=></span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finished!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"before\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">===</span> <span class=\"token string\">\"before\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">fakeFetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newData</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      data <span class=\"token operator\">=</span> newData<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello World<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Suspense<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-09-24","title":"Suspense & Lazy in React","category":"JavaScript"}}},{"node":{"id":"6e987333-0e0f-57fb-8f42-eaa464ad5564","html":"<p>一般情况下，只有当用户有操作的情况下，在一个 tick 里，JavaScript 通过 <code class=\"language-text\">window.open</code> 或是 <code class=\"language-text\">&lt;a target=&quot;_blank&quot;&gt;</code> HTML 元素直接 <code class=\"language-text\">click</code> 打开新的窗口才能正常弹出。如果一旦涉及到异步的操作，弹框就会默认被浏览器阻止，无法正常显示。</p>\n<p>这样设计的初衷，是为了防止前端随意弹框，影响到用户正常的体验。然而，在某些情况下，用户操作后需要经过网络请求，返回结果后才知道应该如何展示弹框。这种情况下，简单的 <code class=\"language-text\">fetch().then(() =&gt; window.open())</code> 肯定是不行的。需要一些 Hack 的方案，如下。</p>\n<p>在用户进行了操作之后，首先先打开一个新的窗口，等到异步操作返回之后，再通过 JavaScript 修改这个窗口的地址，从而达到异步打开窗口的目的。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> win <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 模拟异步操作</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  win<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'actual location'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样操作可能的问题及解决方法：</p>\n<ol>\n<li>如果在异步的过程中本窗口被关闭了，就会留下一个空白的新窗口。因而，需要监听 <code class=\"language-text\">beforeunload</code> 事件，以保证必要时候可以关闭新打开的窗口；</li>\n<li>如果异步的时间比较长，打开一个空白的窗口用户体验较差（打开后默认会获得焦点）。这种情况下，可以打开一个静态的页面，展示一个 loading 的 UI 以告诉用户当前正在进行的操作。待异步操作完成，再通过 postMessage 等方式通知窗口进行页面的跳转。</li>\n</ol>","frontmatter":{"date":"2019-09-23","title":"Open Window Async","category":"JavaScript"}}},{"node":{"id":"36872891-c5a0-57ab-a5f7-a569c2473f52","html":"<p>在判断一个 DOM 节点是否包含另一个节点的时候，常常用到 <code class=\"language-text\">contains</code> 这个 API。在实际的使用从过程中，也经常会遇到这样的情况，需要判断 A 是否包含 B，返回是 <code class=\"language-text\">false</code>，但经过排查，发现其实 A 和 B 就是同一个节点。这种情况下，光用 <code class=\"language-text\">contains</code> API 就有点不够用了。同时，也暴露了这个 API 本身能力的局限性。</p>\n<p>在 DOM Level 3 的<a href=\"https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition\">规范</a>中，定义了一个新的 API，<code class=\"language-text\">compareDocumentPosition</code>。相比于 <code class=\"language-text\">contains</code>，<code class=\"language-text\">compareDocumentPosition</code> 提供了更强大的判断结果。</p>\n<p><code class=\"language-text\">compareDocumentPosition</code> 这个 API 比较后会返回一个数字，通过二进制位的比较，可以用于判断两个节点之间的关系。假设调用的函数为 <code class=\"language-text\">A.compareDocumentPosition(B)</code>，那么返回值具体支持的类型如下：</p>\n<table>\n<thead>\n<tr>\n<th>常量名</th>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_DISCONNECTED</code></td>\n<td>1</td>\n<td>不在一个文档中</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_PRECEDING</code></td>\n<td>2</td>\n<td>B 在 A 之前</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_FOLLOWING</code></td>\n<td>4</td>\n<td>B 在 A 之后</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_CONTAINS</code></td>\n<td>8</td>\n<td>B 包含 A</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_CONTAINED_BY</code></td>\n<td>16</td>\n<td>A 包含 B</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code></td>\n<td>32</td>\n<td>A 和 B 的位置关系取决于具体的实现方式（不由规范确定）</td>\n</tr>\n</tbody>\n</table>\n<p>这里之所以使用二进制位表示位置关系，一个很重要的原因就是：API 有可能会一次性返回多个结果。举个例子，假设 <code class=\"language-text\">A.contains(B)</code> 返回 <code class=\"language-text\">true</code>。那么，在调用 <code class=\"language-text\">A.compareDocumentPosition(B)</code> 的时候，返回值是 <code class=\"language-text\">20</code>，也就是 <code class=\"language-text\">Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY</code> 的结果。换句话说，B 元素在文档中的位置在 A 的后面，同时 B 也是 A 的一个子元素。</p>\n<p>这里，<code class=\"language-text\">Node.DOCUMENT_POSITION_DISCONNECTED</code> 表示两个节点不再同一个文档中，有几种可能的情况：</p>\n<ol>\n<li>A 和 B 中某一个存在于 iframe 中，因而两者不属于同一个文档（<code class=\"language-text\">A.ownerDocument !== B.ownerDocument</code>）；</li>\n<li>A 和 B 中某一个元素被删除了（或没有插入到 DOM 中），导致两者不属于同一个文档（可以通过 <code class=\"language-text\">A.parentElement</code> 和 <code class=\"language-text\">B.parentElement</code> 判断是否被删除，被删后就没有父元素了）</li>\n</ol>\n<p>另外，<code class=\"language-text\">DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code> 有两种情况：</p>\n<ol>\n<li>A 和 B 没有任何相同的 container，这种情况和 <code class=\"language-text\">Node.DOCUMENT_POSITION_DISCONNECTED</code> 是等价的。换句话说，当有 <code class=\"language-text\">Node.DOCUMENT_POSITION_DISCONNECTED</code> 的时候，一定同时有 <code class=\"language-text\">Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code>；</li>\n<li>A 和 B 是同一个元素的两个属性值，这种情况下，谁先谁后是由具体实现决定的。比如，<code class=\"language-text\">Element.attributes</code> 返回一个 <code class=\"language-text\">NamedNodeMap</code>。根据<a href=\"https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-1780488922\">规范</a> 的定义，<code class=\"language-text\">NamedNodeMap</code> 不维护一个具体的顺序，但同时提供使用 index 访问的 API。也就是说，<code class=\"language-text\">Element.attributes</code> 中的任意两个字段，是没有定义上的先后之分的（虽然可能通过不同的下标获取到）。具体来说：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// div = &lt;div id=\"id\" class=\"class>&lt;/div></span>\n<span class=\"token keyword\">const</span> attributes <span class=\"token operator\">=</span> div<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> attributes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareDocumentPosition</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result = 36</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里，<code class=\"language-text\">compareDocumentPosition</code> 返回的结果是 <code class=\"language-text\">36</code>，即 <code class=\"language-text\">Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | Node.DOCUMENT_POSITION_PRECEDING</code>。因此，在实际使用 API 的时候，有必要检查是否有 <code class=\"language-text\">Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC</code> 这一位，如果有的话，其他的结果都可以忽略不计了。</p>\n<p>另外，如果 A 和 B 是同一个元素，那么返回的结果将是 <code class=\"language-text\">0</code>，因为 A 和 B 的关系不属于上面列出的任何一种情况。同时，也不难发现，只有当 A 和 B 是同一个元素的时候，才会出现返回值是 0 的情况。</p>","frontmatter":{"date":"2019-09-18","title":"compareDocumentPosition","category":"JavaScript"}}},{"node":{"id":"94771edf-9925-57ce-9664-d4ad9901aa9c","html":"<p>现在 Web 端的视频播放，大多采用基于 <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\">HLS</a> 或是 <a href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\">MPEG Dash</a> 的方案，将视频内容分解成一系列小型 HTTP 文件片段，每段都包含很短长度的可播放片段，由前端逐个拉取片段并播放，最终形成完整的播放视频。</p>\n<p>对于一些云存储网站来说，也可以通过类似的方案来为用户提供下载服务。在分片下载文件的过程中，服务商可以对下载的用户进行校验。同时，由于需要分段下载内容并拼接，避免了单一 URL 造成盗链等问题。然而，一个用户体验的问题是，这种形式的下载如何可以给用户一个更好的用户体验：显然不能将分段的下载内容直接呈现给用户，用户也不应该关心这些分片的内容；如果要等到前端将所有内容下载完成并拼接后再呈现给客户，那么在文件较大的时候会让用户等待很久，用户体验不佳。</p>\n<p>这时候，就可以用到 Service Worker 的 Proxy 功能了，可以在前端进行拼接数据的过程中，给用户等同于一般下载文件的体验。</p>\n<p>大致的流程代码如下：</p>\n<p>首先，需要在 Service Worker 和 Main 线程见建立一个通信机制。比如，可以选择使用 MessageChannel。在 Main 线程创建一个 MessageChannel，然后将 Channel 发送给 Service Worker。之后两者通过这个 Channel 进行数据的沟通（主要是 Main 将下载好的文件片段发送给 Service Worker）。</p>\n<p>接着，在 Service Worker 端的 MessageChannel 收到新的数据之后，创建一个 ReadableStream 并将数据写入这个 Stream。</p>\n<p>最后，Main 会通过 JavaScript 访问一个不存在的下载链接，里面应该包含一个 ID，用于指明需要的文件具体是哪一个（主要是考虑到多个文件同时下载的情况）。Service Worker 通过 fetch 事件拦截这个请求，并通过 URL 中的 ID 找到对应的 ReadableStream，并将这个 Stream 作为 Response 返回。这样，在浏览器的下载页面就可以看到该文件正在被下载。和原生的下载体验一致，这里也可以看到下载的名称、当前的速度、剩余的时间等信息。</p>\n<p>如此，一个完整的流程就走完了。前端下载文件分片，将分片数据发送给 Service Worker，Service Worker 收到数据之后，将数据写入到 ReadableStream 中去；同时，这个 ReadableStream 以 Response 的形式返回给 Main 线程，将这个拼接中的文件逐步下载到本地。</p>\n<p>Fetch 事件的代理代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 跳过一般的请求</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isDownloadUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/octet-stream; charset=UTF-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 获取 URL 中的 ID 数据</span>\n  <span class=\"token comment\">// 相当于 Main 线程通过 URL 传递参数给 Service Worker，用于表示想要下载的具体数据</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getDownloadFileID</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> streamInfo <span class=\"token operator\">=</span> streamMapping<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>streamInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 没有找到数据的情况，返回 404</span>\n    <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token punctuation\">,</span>\n      status<span class=\"token punctuation\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n      statusText<span class=\"token punctuation\">:</span> <span class=\"token string\">'Not Found'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> filename <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> streamInfo<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Content-Disposition 中的 filename 必须是 US-ASCII</span>\n  <span class=\"token comment\">// http://tools.ietf.org/html/rfc2183#section-2.3</span>\n  <span class=\"token keyword\">const</span> asciiName <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^\\x20-\\x7e\\xa0-\\xff]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 通过 filename*=UTF-8''xxx 这样的方式，可以让浏览器使用 UTF-8 的文件名</span>\n  <span class=\"token keyword\">const</span> encodedName <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/['()]/g</span><span class=\"token punctuation\">,</span> escape<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\*/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%2A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">attachment; filename=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>asciiName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"; filename*=UTF-8''</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>streamInfo<span class=\"token punctuation\">.</span>filesize<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Content-Type-Options'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nosniff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 将 Service Worker 中的 stream 作为 Response 返回</span>\n  <span class=\"token comment\">// 只要 Stream 没有完结，浏览器的下载行为就会继续，直到 Stream 停止</span>\n  <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关于上面代码的两个延伸阅读：</p>\n<ol>\n<li>虽然 Content-Disposition 默认只能写 ASCII 的文件名，但是 UTF-8 的文件名也是可以设置的。关于 <code class=\"language-text\">filename*=UTF-8&#39;&#39;xxx</code> 这种设置方案，在 <a href=\"https://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http\">StackOverflow</a> 上有相关讨论</li>\n<li><code class=\"language-text\">X-COntent-Type-Options</code> 设置为 <code class=\"language-text\">nosniff</code> 可以阻止浏览器的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing\">MIME 类型嗅探</a>，更多讨论可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options\">MDN</a></li>\n</ol>\n<p>创建和使用 Stream 的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">start</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">pull</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 当从 Stream 获取数据的时候，返回一个 Promise</span>\n          <span class=\"token comment\">// 并在 onUpdate 赋值，等待 Main 线程的数据</span>\n          <span class=\"token comment\">// 当 Main 线程传递新数据之后，调用这里的 onUpdate 函数，将 data 传入</span>\n          <span class=\"token comment\">// 接下来通过 FileReader 读取数据，转化成 Uint8Array，放入 Stream 中</span>\n          <span class=\"token comment\">// 在清除 onUpdate 函数，等待下一次 Pull</span>\n          streamInfo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                streamInfo<span class=\"token punctuation\">.</span>onUpdate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从 Main 获取数据并更新给 Stream 的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>portA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> portB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ports<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据消息类型，选择创建一个新的 stream 或是往一个已经创建的 stream 中写入数据</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          filesize<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>filesize<span class=\"token punctuation\">,</span>\n          filename<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">,</span>\n          stream\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      portB<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chunk <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 等待 onUpdate API 创建...</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://www.myairbridge.com/en/\">MyAirBridge</a> 网站使用了类似上面提到的技术来下载中的文件内容。Service Worker 的代码参考<a href=\"https://www.myairbridge.com/media/js_compiled/sw-download-10bfedd.js\">这里</a>。</p>","frontmatter":{"date":"2019-09-16","title":"Download Chunk via ServiceWorker","category":"JavaScript"}}},{"node":{"id":"f7451aff-6ab3-5bdd-8b2b-72f907953d51","html":"<p>JavaScript 提供了 copy 事件，可以针对一般的复制动作进行一些额外的操作。比如，一些网站出于版本的考虑，可能会禁止拷贝；或者，一些网站允许拷贝，但是会希望在拷贝的内容后面加上一些版权的声明。这些操作，都可以通过 copy 事件进行处理。</p>\n<p>举例来说，如果希望禁止网站上内容的拷贝，可以写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在上面的代码中，通过 <code class=\"language-text\">event.preventDefault</code> API 的调用，可以组织浏览器默认的复制行为。这样，即使用户进行了复制，实际上剪贴板也不会被更新。</p>\n<p>第二个例子，假设希望在复制的内容后面加上额外的数据，可以写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">,</span> text <span class=\"token operator\">+</span> <span class=\"token string\">'\\nExtra Text at Bottom'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>需要注意几点：</p>\n<ol>\n<li><code class=\"language-text\">setData</code> 的第一个参数是数据的格式，支持的类型可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types\">MDN</a>，主要就是 <a href=\"https://en.wikipedia.org/wiki/MIME\">MIME</a> 类型，一般纯文本可以使用 <code class=\"language-text\">text/plain</code></li>\n<li>在调用 <code class=\"language-text\">setData</code> 之后，需要调用 <code class=\"language-text\">event.preventDefault</code> 才能保证设置成功，否则最终复制出来的依然是原始的文案</li>\n</ol>\n<p>最后，需要说明的一点是：出于测试或者其他目的，JavaScript 也支持创建一个 ClipboardEvent 并发送给监听的元素，如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy event triggered'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span>clipboardData<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClipboardEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'copy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> clipboardData<span class=\"token punctuation\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataTransfer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，回调函数可以正常执行（Console 可以看到输出），但是 event 内尝试设置 Clipboard 的数据并不会成功。</p>\n<p>总体上来说，浏览器端提供的 Copy 事件，只能获取/修改浏览器内发生的剪贴板复制操作；对于用户本身剪贴板操作内有的数据是无法读取的，在非用户触发的情况下，剪贴板的数据也是无法直接被修改的。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent\">延伸阅读</a>。</p>","frontmatter":{"date":"2019-09-10","title":"Clipboard Event","category":"JavaScript"}}},{"node":{"id":"03a25784-6757-5c28-9084-94b5270eb170","html":"<p>前端项目，总免不了写一些操作 URL 中 query string 的 API 代码，比如读取当前 URL 中的 query 数据，或是根据一个 Object 对象拼接出一个 query string，等等。</p>\n<p>其实，现代浏览器中已经提供了 <code class=\"language-text\">URLSearchParams</code> 类，可以大大简化这部分的操作，也无需再自己维护一个 <code class=\"language-text\">qs</code> 或是类似的包了。</p>\n<p>以下介绍如何通过 <code class=\"language-text\">URLSearchParams</code> 实现 <code class=\"language-text\">qs.stringify</code> 和 <code class=\"language-text\">qs.parse</code> API 的方法：</p>\n<p><code class=\"language-text\">qs.parse</code> 的方法比较简单，只需要将字符串传递给 <code class=\"language-text\">URLSearchParams</code> 并创建实例就可以了，实例本身自带了 iterator，也提供 <code class=\"language-text\">get</code>，<code class=\"language-text\">keys</code> 等 API 能很方便的获取需要的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> param <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> param<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要注意的一点是，不论参数传入的字符串是否以 <code class=\"language-text\">?</code> 字符开头，<code class=\"language-text\">URLSearchParams</code> 都默认可以正确处理，不需要像 <code class=\"language-text\">qs</code> 包一样显示的指明给定的字符串是否有 <code class=\"language-text\">?</code> 开头（<code class=\"language-text\">ignoreQueryPrefix</code>）。</p>\n<p>要实现 <code class=\"language-text\">qs.stringify</code> 的功能也不难，<code class=\"language-text\">URLSearchParams</code> 的构造器支持传入一个数组或一个对象，也提供了 <code class=\"language-text\">append</code> API 可以将 key value 一组一组的加入到对象中，最后只要使用 <code class=\"language-text\">toString</code> 拼接出一个完整的字符串就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// result in: `a=b`</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result in: `c=d&amp;e=f`</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，<code class=\"language-text\">toString</code> 方法得到的字符串，最开头并没有带上 <code class=\"language-text\">?</code> 字符，如果有需要的话，可以自行加上。</p>\n<p>综上，下面的等式是成立的（假定 <code class=\"language-text\">location.search</code> 不是一个空字符串）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">location<span class=\"token punctuation\">.</span>search <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>当然，<code class=\"language-text\">URLSearchParams</code> 在某些场景下还是不能替换 <code class=\"language-text\">qs</code> 之类的库，比如：</p>\n<ol>\n<li>项目需要支持老浏览器，如 IE 时。<code class=\"language-text\">URLSearchParams</code> 的浏览器支持情况见：<a href=\"https://caniuse.com/#search=URLSearchParams\">CanIUse</a>，总体来说，现代的浏览器都已经支持了，但是 IE 完全没有。</li>\n<li>需要使用一些比较冷门的解析功能时，如 <code class=\"language-text\">qs</code> 提供了很多复杂的解析方案（详情见<a href=\"https://www.npmjs.com/package/qs\">文档</a>）</li>\n</ol>\n<p>但总体来说，绝大部分的应用场景下，<code class=\"language-text\">URLSearchParams</code> 都可以轻松应对，不需要额外的库进行志愿了。</p>\n<p>更多关于 <code class=\"language-text\">URLSearchParams</code> 的介绍，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">MDN</a>，<a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en\">Easy URL Manipulation with URLSearchParams</a> 或 <a href=\"https://url.spec.whatwg.org/#urlsearchparams\">WHATWG Spec</a>。</p>","frontmatter":{"date":"2019-09-05","title":"URLSearchParams","category":"JavaScript"}}},{"node":{"id":"3caff78d-44ef-5789-bfc1-5ef5c4332649","html":"<p>JavaScript 内建的 <code class=\"language-text\">String.prototype.replace</code> 函数，如果传入的第一个参数是字符串，那么替换行为只会发生一次。如果需要将一个字符串内所有某子字符串都替换掉，往往需要一些额外的操作。以下提供一些可行的方案：</p>\n<ol>\n<li>使用循环进行多次替换</li>\n</ol>\n<p>最直观的想法，就是替换完成后通过 <code class=\"language-text\">indexOf</code> 等方案查找字符串，如果还有就继续替换：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这并不是一个优雅的解决方案。</p>\n<ol start=\"2\">\n<li>使用正则表达式</li>\n</ol>\n<p><code class=\"language-text\">String.prototype.replace</code> 支持第一个参数传递正则表达式。有了正则表达式，只要设置上 <code class=\"language-text\">g</code> 标签，就可以全局匹配并替换所有的情况了。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方案的劣势在于，如果需要替换的内容中含有某些正则表达式特有的匹配符号，可能会导致非预期的结果。举个例子来说，如果希望把 <code class=\"language-text\">.+</code> 这个字符串替换成 <code class=\"language-text\">+.</code> 这样，上面的函数并不能达到预期的效果，因为 <code class=\"language-text\">.+</code> 在正则表达式中可以匹配任意的字符。<code class=\"language-text\">replace(&#39;hello.+world&#39;, &#39;.+&#39;, &#39;+.&#39;)</code> 的执行结果是 <code class=\"language-text\">+.</code>。</p>\n<ol start=\"3\">\n<li>使用 <code class=\"language-text\">split</code> &#x26; <code class=\"language-text\">join</code></li>\n</ol>\n<p>这是一个比较取巧的方案，先用 <code class=\"language-text\">split</code> 函数将字符串进行拆分，然后再用 <code class=\"language-text\">join</code> 将拆分后的结果重新拼接起来。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方案代码比较简洁，也不会有正则表达式中提到的问题。虽然计算会产生中间变量（数组），但只要不是频繁或在大规模数据上使用，效率的影响可以忽略不计。</p>","frontmatter":{"date":"2019-08-14","title":"Replace All Substring","category":"JavaScript"}}},{"node":{"id":"82f9644e-2191-5f1f-9758-880c26b73c6d","html":"<p>在使用 stylelint 的时候，发现了一个有趣的问题：如果直接使用 stylelint 的 <code class=\"language-text\">bin</code> 文件对批量 LESS 文件进行检查，程序可以如预期的运行；但是如果把同样的命令写到 <code class=\"language-text\">package.json</code> 中，以 npm script 的方式进行运行，最终被检查的文件就少了很多，实际只有一个文件参与了检查。</p>\n<p>具体来说，<code class=\"language-text\">./node_modules/.bin/stylelint src/**/*.less</code> 这个命令可以检查所有的 LESS 文件，但是把 <code class=\"language-text\">stylelint src/**/*.less</code> 写到 <code class=\"language-text\">package.josn</code> 中之后，再运行却只检查了一个文件。</p>\n<p>通过检查 stylelint 的<a href=\"https://github.com/stylelint/stylelint/blob/master/docs/user-guide/cli.md\">文档</a>，发现官方在写命令的时候，写法和上述略有不同，为：<code class=\"language-text\">stylelint &quot;src/**/*.less&quot;</code>。</p>\n<p>经过排查问题，发现根源在于：<code class=\"language-text\">npm</code> 使用了 <code class=\"language-text\">sh</code> 来执行代码，而 <code class=\"language-text\">sh</code> 和 <code class=\"language-text\">zsh</code> 在解析 Glob 的时候，行为是不同的。</p>\n<p><code class=\"language-text\">npm</code>，包括其他 Linux 进程，在使用 shell 的时候，默认使用的都是 <code class=\"language-text\">sh</code>，除非有其他明确的指定。这意味着，即使当前正在使用的 shell 是 <code class=\"language-text\">zsh</code>，在运行 <code class=\"language-text\">npm</code> 命令的时候，还是默认使用了 <code class=\"language-text\">sh</code> 对脚本进行执行。也就是说，<code class=\"language-text\">./node_modules/.bin/stylelint src/**/*.less</code> 这个命令执行，使用的是当前打开的 shell 程序（比如 <code class=\"language-text\">zsh</code>）；而当这个命令写到 <code class=\"language-text\">package.json</code> 中，并以 npm script 的方式进行运行的时候，执行 shell 的就是 <code class=\"language-text\">sh</code> 了。</p>\n<p>使用不同的 shell 程序，难免就会在行为上造成不一致。这里的 Glob 解析就是一个例子。在 <code class=\"language-text\">zsh</code> 里面可以简单的做一个实验。执行如下的命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> src/**/*.less</code></pre></div>\n<p>可以看到，<code class=\"language-text\">zsh</code> 给出了当前 <code class=\"language-text\">src</code> 目录下所有的 LESS 文件， 不管这个文件是在多深的子目录下；而如果先在 <code class=\"language-text\">zsh</code> 中执行 <code class=\"language-text\">sh</code> 或 <code class=\"language-text\">bash</code> 进入到 <code class=\"language-text\">sh</code> 或 <code class=\"language-text\">bash</code> 的工作环境中，再执行同样的命令，可以看到输出的结果可能就是不同的。实际上，对于 <code class=\"language-text\">sh</code> 来说，它本身并不识别 <code class=\"language-text\">**</code> 这个语法，这个表示在 <code class=\"language-text\">sh</code> 中会被简单的识别为 <code class=\"language-text\">*</code>，<code class=\"language-text\">src/**/*.less</code> 在 <code class=\"language-text\">sh</code> 中等价于 <code class=\"language-text\">src/*/*.less</code>。换句话说，在 <code class=\"language-text\">sh</code> 的环境中，上述命令只会寻找所有在 <code class=\"language-text\">src</code> 目录下一级子目录中的 LESS 文件，一旦层级大于一层，就不会被找到了。</p>\n<p>这也是为什么同样的命令，直接执行和在 npm 中执行会有差异的原因。</p>\n<p>最后，加上双引号 <code class=\"language-text\">stylelint &quot;src/**/*.less&quot;</code> 就可以解决这一问题的原因在于：一旦加上了双引号，这一个 Glob 就不会被 shell 直接解析，而是会以字符串的形式直接传递给 stylelint。（具体来说，如果不加双引号，shell 会先将 Glob 解析成一组具体的文件，stylelint 实际拿到的 <code class=\"language-text\">process.env.argv</code> 很可能会是一个很长的字符串数组，每一个元素都是一个具体的文件；而如果加上了双引号，stylelint 拿到的只有一个 Glob 表达式字符串。）有了这个 Glob 的字符串，stylelint 内部就可以使用相应的 package 来进行解析，从而得到一串具体的文件列表。因为使用了 stylelint 内部自带的 Glob 解析，就可以保证在不同的 shell 环境中都得到一致的结果了。</p>\n<p><a href=\"https://stackoverflow.com/questions/32017169/npm-glob-pattern-not-matching-subdirectories\">参考</a></p>","frontmatter":{"date":"2019-08-13","title":"Glob in NPM","category":"JavaScript"}}},{"node":{"id":"31721418-7e10-5793-aaa4-841cd465e306","html":"<p>JavaScript 中可以很方便在字符串和数字之间进行转换，比如：<code class=\"language-text\">+&#39;123&#39;</code> => <code class=\"language-text\">123</code>，<code class=\"language-text\">(123).toString()</code> => <code class=\"language-text\">&#39;123&#39;</code>。</p>\n<p>然而，需要注意的一点是，JavaScript 中的数字并不是整数，而是浮点数。更确切的说，数字使用的是 64 bit 双精度浮点数来表示的。这意味着，如果服务器存储的数字是一个 Int64，那么在给到前端的时候，很有可能会出现转化上的问题。对于双精度浮点数来说，能够表示的最大的数是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，超过的部分就会被截断，无法精确表示。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'9223372036854775808'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output: 9223372036854776000</span></code></pre></div>\n<p>JavaScript 提供了 <code class=\"language-text\">Number.isSafeInteger</code> 这个 API 来判断一个数字是否是在可表示的安全范围内。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">9223372036854776000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">53</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: true</span></code></pre></div>\n<p>这里，<code class=\"language-text\">2 ** 53 - 1</code> 就是 JavaScript 中可以表示的最大整数，<code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> 这个常量也等于这个值。超过这个数值的所有值都会被认为是不安全的，哪怕该值实际表示的结果“凑巧”是正确的。上例中，<code class=\"language-text\">9223372036854776000</code> 这个数字的表示结果“刚好”就是 <code class=\"language-text\">9223372036854776000</code> 本身，但是因为这个数已经超过了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，所以依然被判定为是不安全的。</p>\n<p>虽然 JavaScript 本身的数字不支持大数，但是 Chrome 已经集成了 <code class=\"language-text\">BigInt</code> 数据类型，它可以被用于表示任意大的整形数字，可以用于这样的使用场景。（注：<code class=\"language-text\">BigInt</code> 本身还在 staging 3，并不是标准的一部分）</p>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or:</span>\n<span class=\"token comment\">// const num = BigInt('9223372036854776000');</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 9223372036854775808n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: bigint</span></code></pre></div>\n<p>需要注意的是，<code class=\"language-text\">BigInt</code> 不可以使用 <code class=\"language-text\">new</code> 运算符，否则会报错。直接像函数一样传递参数调用就可以了。</p>\n<p><code class=\"language-text\">BigInt</code> 也是支持数字运算的，运算的结果依然是 <code class=\"language-text\">BigInt</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 3n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3n</span> <span class=\"token operator\">-</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2n</span> <span class=\"token operator\">*</span> <span class=\"token number\">3n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 6n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span></code></pre></div>\n<p>特别需要注意的是，因为是整型数字之间的转换，所以在做除法的时候，不会出现小数。在上面的例子中，<code class=\"language-text\">5n</code> 和 <code class=\"language-text\">2n</code> 的除法，结果是 <code class=\"language-text\">2n</code> 而不是 <code class=\"language-text\">2.5</code>，这一个行为和 C 中两个 Integer 之间除法的行为是一致的。</p>\n<p>另外，<code class=\"language-text\">BigInt</code> 不支持和其他的数据类型进行混合计算。比如：<code class=\"language-text\">1n + 2</code> 这样的计算是会报错的，需要显式的进行类型转换后，才可以进行运算。这一点，和 JavaScript 中其他数据类型之间随意混乱的运算行为是不同的（比如，<code class=\"language-text\">1 + &#39;2&#39;</code> 这样的计算 JavaScript 就不会报错，还会得到 <code class=\"language-text\">&#39;12&#39;</code> 这样怪异的结果）。</p>\n<p>虽然 <code class=\"language-text\">BigInt</code> 不允许和一般的 <code class=\"language-text\">Number</code> 进行混合计算，但是比较运算符是可以在两者之间进行比较的。比如：<code class=\"language-text\">1n &lt; 2</code> 或 <code class=\"language-text\">2n &gt; 1</code> 这些都是成立的。<code class=\"language-text\">BigInt</code> 和 <code class=\"language-text\">Number</code> 之间无法取得 <code class=\"language-text\">===</code> 的严格等价关系，但是 <code class=\"language-text\">==</code> 的比较是可能成立的。换句话说：<code class=\"language-text\">1n == 1</code> 是成立的，但是 <code class=\"language-text\">1n === 1</code> 是不成立的。</p>\n<p>更多关于 <code class=\"language-text\">BigInt</code> 的行为，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">MDN</a>。</p>","frontmatter":{"date":"2019-08-08","title":"Big Number in JavaScript","category":"JavaScript"}}},{"node":{"id":"68d67c21-2405-5153-9308-b645937f95e6","html":"<p>当 Ant Design 和 Jest 一起使用的时候，在某些情况下（开启 coverage 的时候）会导致单元测试运行失败。一个可能造成问题的 Ant Design 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> TextArea <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Input<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Jest 会报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ReferenceError: Input is not defined\n\n  1 | import { Input } from &#39;ant-design&#39;;\n  2 |\n&gt; 3 | const { TextArea } = Input;</code></pre></div>\n<p>报错的直接原因，是使用了 Ant Design 推荐的 <code class=\"language-text\">babel-plugin-import</code> 和 Jest 计算 coverage 使用的 <code class=\"language-text\">babel-plugin-istanbul</code> 造成的。在<a href=\"https://github.com/ant-design/babel-plugin-import/issues/172\">这里</a>、<a href=\"https://github.com/ant-design/babel-plugin-import/issues/189#issuecomment-445139343\">这里</a>等 GitHub Issue 中都有相应的讨论。</p>\n<p>要修复这个问题，只需要在 Jest 或者单元测试环境中，不使用 <code class=\"language-text\">babel-plugin-import</code> 这个转换插件就可以了。参考代码如下，在 <code class=\"language-text\">.babelrc</code> 中：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"development\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"import\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"libraryName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"antd\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"style\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"production\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// same as above</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// rest of plugins...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如此一来，只有在 <code class=\"language-text\">NODE_ENV</code> 为 <code class=\"language-text\">production</code> 或 <code class=\"language-text\">development</code> 的情况下，Babel 才会启用 <code class=\"language-text\">babel-plugin-import</code> 这个转换插件。对于 Jest 来说，因为默认设置了环境变量 <code class=\"language-text\">NODE_ENV</code> 为 <code class=\"language-text\">test</code>，所以 Plugin 不会起效。</p>\n<p>这样造成的问题是 Jest 的运行速度会有所降低。</p>","frontmatter":{"date":"2019-07-29","title":"Jest with Ant Design","category":"JavaScript"}}},{"node":{"id":"13ce68d9-ae34-52fe-942d-558fe782b3ff","html":"<p>默认情况下，Webapck 会用 Chunk ID 为 <code class=\"language-text\">import()</code> 产生的独立文件命名，最终的结果就是类似于 <code class=\"language-text\">0.bundle.js</code> 这样的文件。这样的文件并不方便理解和管理，所以一般会使用 <code class=\"language-text\">webpackChunkName</code> 这个注释来让 Webapck 使用更加有意义的命名。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"module-name\" */</span> <span class=\"token string\">'path-to-bundle'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最终产生的文件为 <code class=\"language-text\">module-name.bundle.js</code>（这里假设在 Webpack 中配置了 <code class=\"language-text\">output.filename</code> 为 <code class=\"language-text\">[name].bundle.js</code>）。</p>\n<p>然而，每次要手写这样的注释有些麻烦。如果动态加载的模块本身存放位置有规律可循（比如是在 pages 目录下，每个目录有一个入口文件），那么也可以考虑使用 Babel 插件的方式，自动为每个 <code class=\"language-text\">import()</code> 增加合适的 bundle name。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addComments</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// only add leading comment when not found</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>leadingComments<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  arg<span class=\"token punctuation\">.</span>leadingComments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'CommentBlock'</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> webpackChunkName: '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getChunkNameFromImportPath</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">importPath</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// find a way to transform from import path to chunk name</span>\n  <span class=\"token comment\">// example: from 'path/to/file' to 'path.to.file' as chunk name</span>\n  <span class=\"token keyword\">return</span> importPath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\//g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">babel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> types<span class=\"token punctuation\">:</span> t <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> babel<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'add-bundle-name'</span><span class=\"token punctuation\">,</span>\n    visitor<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">CallExpression</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isImport</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>firstArg<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>arguments<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> importPath <span class=\"token operator\">=</span> firstArg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">addComments</span><span class=\"token punctuation\">(</span>firstArg<span class=\"token punctuation\">,</span> <span class=\"token function\">getChunkNameFromImportPath</span><span class=\"token punctuation\">(</span>importPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-07-26","title":"Import Chunkname with Babel Plugin","category":"JavaScript"}}},{"node":{"id":"ef748804-1095-5434-84f6-d397a65f89c8","html":"<p><code class=\"language-text\">navigator.platform</code> 可以获取到当前浏览器所在的操作系统信息。一般来说会得到一个字符串用以表示操作系统，但某些情况下也可能会拿到空字符串（浏览器拒绝或不能给出操作系统信息）。</p>\n<p>需要注意的一点是，即使是 64 位的 Windows 操作系统，得到的结果很可能是 <code class=\"language-text\">Win32</code> 而不是 <code class=\"language-text\">Win64</code>。根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform\">MDN</a> 的数据，Internet Explorer 和 v63 前的 Firefox 会使用 <code class=\"language-text\">Win64</code>，其他的一般返回 <code class=\"language-text\">Win32</code>。</p>\n<p>综上，可以使用如下的方法检测当前是否是 Windows 系统：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> isWindows <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Win'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">navigator.platform</code> 基本没有浏览器兼容性问题，可以放心使用。</p>","frontmatter":{"date":"2019-07-18","title":"navigator.platform","category":"JavaScript"}}},{"node":{"id":"511c0dca-7c47-5ea0-824c-cc3b1825762f","html":"<p>console 中可以通过 <code class=\"language-text\">console.count</code> 来进行记数。</p>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callMe func'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">countReset</span><span class=\"token punctuation\">(</span><span class=\"token string\">'callMe func'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 1</span>\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 2</span>\n<span class=\"token function\">callMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output => callMe func: 3</span></code></pre></div>\n<p>几点说明：</p>\n<ul>\n<li><code class=\"language-text\">console.countReset</code> 函数可以用于清空记数</li>\n<li>传递的参数可以用于标记 <code class=\"language-text\">count</code> 的类别，如果不传就是默认的 default</li>\n<li>不同类别之间的 <code class=\"language-text\">count</code> 不会共享数据</li>\n</ul>","frontmatter":{"date":"2019-07-17","title":"console.count","category":"JavaScript"}}},{"node":{"id":"c7a15ba7-a5dc-5bc3-bcf8-b0e56e30a319","html":"<p>在 Windows 上，很多文本文件并不是以 UTF-8 的格式进行存储的。比如，中文可能的存储格式是 GB2312 或是 BIG5。这导致，在其他系统中，如果直接以 UTF-8 的格式打开对应的文本文件，就会得到一串乱码。</p>\n<p>如果不知道之前是以什么格式存储的文件，这时就会有点束手无策了。</p>\n<p>一个可行的简单方法是用 VSCode 的“猜测”功能。在 VSCode 中，如果选择 <code class=\"language-text\">Reopen with Encoding</code>，会得到 VSCode 猜测的当前文本编码格式。如果使用新的编码重新打开文本，看到的不再是乱码，那么很可能 VSCode 就猜测正确了。一般建议再以 UTF-8 的格式保存一下，以后再次打开就不会有乱码的困扰了。</p>\n<p>然而，这个方法不适应大规模批量修改的需求。既然如此，不如直接从 VSCode 的源码入手，看看这个文本编码检测的功能是如何实现的。</p>\n<p>VSCode 相关的代码，可以在 <code class=\"language-text\">src/vs/base/node/encoding.ts</code> 中找到，GitHub 的代码在<a href=\"https://github.com/microsoft/vscode/blob/HEAD/src/vs/base/node/encoding.ts\">这里</a>。</p>\n<p>精简后的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jschardet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jschardet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iconv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iconv-lite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">JSCHARDET_TO_ICONV_ENCODINGS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'ibm866'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'cp866'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'big5'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'cp950'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fromPath <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/read/file'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> toPath <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/save/file'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>fromPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> encoding <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> jschardet<span class=\"token punctuation\">.</span><span class=\"token function\">detect</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iconvEncoding <span class=\"token operator\">=</span> <span class=\"token constant\">JSCHARDET_TO_ICONV_ENCODINGS</span><span class=\"token punctuation\">[</span>encoding<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> encoding<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> iconvEncoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里主要用到了两个库，<code class=\"language-text\">jschardet</code> 和 <code class=\"language-text\">iconv-lite</code>。</p>\n<p><a href=\"https://github.com/aadsm/jschardet\">jschardet</a> 是 Python <a href=\"https://github.com/chardet/chardet\">chardet</a> 的一个 JavaScript 移植版本，用于检测当前的二进制流（Buffer）是什么类型的编码。检测的大致原理，可以在 chardet 的网站上找到（<a href=\"https://chardet.readthedocs.io/en/latest/how-it-works.html\">这里</a>）。</p>\n<p><a href=\"https://github.com/ashtuchkin/iconv-lite\">iconv-lite</a> 用于将二进制流转化成指定编码格式的字符串，是一个纯 JavaScript 的 <code class=\"language-text\">iconv</code> 库。这里 <code class=\"language-text\">iconv</code> 的全称是 internationalization conversion，在类 Unix 系统中，这是一个用于转换不同编码字符串的命令行工具。</p>\n<p>需要注意的是，<code class=\"language-text\">iconv-lite</code> 并不通过编码来区分 UTF-8 和 UTF-8 with BOM，而是通过第二个参数 <code class=\"language-text\">{ addBOM }</code> 来完成的。因此，转化 UTF-8 with BOM 的时候，需要稍微手动处理一下。（处理的方法可以参考 VSCode 中的相关函数，比如 <code class=\"language-text\">encode</code>）</p>\n<p>另外，<code class=\"language-text\">jschardet</code> 和 <code class=\"language-text\">iconv-lite</code> 对编码的命名有些不同，使用前需要转化。上面示例代码中的 <code class=\"language-text\">JSCHARDET_TO_ICONV_ENCODINGS</code> 就是做的这个事情。</p>","frontmatter":{"date":"2019-07-16","title":"Detect True Encoding of File and Convert","category":"JavaScript"}}},{"node":{"id":"e6335664-44bc-5877-bfde-94b17431ddb4","html":"<p>在 React 开发过程中，使用 Facebook 提供的官方 Chrome DevTool Extension 可以很方便的查看，修改页面上的 React 组件。然而，有时候也需要在没有 DevTool 的情况下，对 React 组件进行 Debug。比如：在测试电脑上查看一个即时出现的问题，或是在 Internet Explorer / Safari 上调试一个出现的问题等。</p>\n<p>以下介绍如何在不借助 Chrome DevTool Extension 的情况下，完成对当前 React 组件的检查。</p>\n<p>首先，需要获取到某个需要查看的 DOM 元素。可以用 <code class=\"language-text\">querySelector</code> 或是在 Chrome DevTool 中选中某个元素，然后在 Console 中使用 <code class=\"language-text\">$0</code> 获得该元素。</p>\n<p>React 会在元素上添加额外的属性，用于记录当前这个 React 节点的相关数据。可以通过下面的代码来获取这个属性数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> key<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'__reactInternalInstance$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>React 在添加属性的时候，属性名称会增加一个随机字符串作为后缀（各个 React Node 使用的随机字符串是一致的）。所以需要通过检查 <code class=\"language-text\">startsWith</code> 来判断当前属性是否是 React 使用的属性。</p>\n<p>拿到的这个对象，有一些有用的数据，包括：</p>\n<ul>\n<li>child - 当前元素子元素的头个元素</li>\n<li>elementType/type - 该 React 节点对应的类型。如果是 HTML Element，那么就是一个字符串，比如 <code class=\"language-text\">&quot;div&quot;</code>；如果是一个自定义的 React 元素，则是一个函数（class 或 function）。也就是 <code class=\"language-text\">React.createElement</code> 函数的第一个参数。</li>\n<li>memoizedProps - 当前元素使用的 props。对于任何一个 React 生成的 HTML 元素，对会有对应的 Props。（写 JSX 的时候，每一个属性，包括 children，都是一个 Props 的属性值）</li>\n<li>memoizedState - 当前元素使用的 state</li>\n<li>return - 当前元素所在双向链表的上一个元素</li>\n<li>sibling - 当前元素下一个兄弟元素</li>\n<li>stateNode - 当前元素在组件内可以用的 <code class=\"language-text\">this</code>，包含了 <code class=\"language-text\">props</code>，<code class=\"language-text\">refs</code>，<code class=\"language-text\">state</code>，<code class=\"language-text\">context</code> 以及其他 React Component 的方法。在这个对象的原型链上，还有 React Component 组件的各个方法（比如生命周期函数如 <code class=\"language-text\">componentDidMount</code>）以及 <code class=\"language-text\">setState</code> 等可用方法。换句话说，这里的对象就是一个 React Component Class 生成的实例。如果组件是一个 Functional Component，那么这里就是 <code class=\"language-text\">null</code> 了。</li>\n</ul>\n<p>根据 React 16 中 Fiber 的设计，元素之间是一个双向链表的关系，每一个节点会连结其上一个元素（<code class=\"language-text\">return</code>），子元素的首个元素（<code class=\"language-text\">child</code>），下一个兄弟元素（<code class=\"language-text\">sibling</code>），因而从任意一个中间的 HTML 元素开始，都可以遍历整个 React 树。</p>\n<p>注：从一个元素 A 的 <code class=\"language-text\">sibling</code> 抵达下一个元素 B 后，该元素 B 的 <code class=\"language-text\">return</code> 是他的上一个兄弟元素，也就是 A，而不是真正意义上 React / HTML 树的父元素。只有当 B 是 A 的第一个子元素的时候，B 的 <code class=\"language-text\">return</code> 才是它在树上的父元素。</p>","frontmatter":{"date":"2019-07-11","title":"Inspect React Node without DevTool","category":"JavaScript"}}},{"node":{"id":"710a2f50-fe24-55cc-adc9-74201e495161","html":"<p>在 React 16 中（包括 React 15.6 及之后的版本），如果想要用 JavaScript 在外部触发一个 <code class=\"language-text\">input</code> 组件的 <code class=\"language-text\">onChange</code> 事件，需要做如下的几个事情：</p>\n<ol>\n<li>首先，让 React 记录下新的 <code class=\"language-text\">value</code> 值。React 通过 <code class=\"language-text\">defineProperty</code> 封装了 <code class=\"language-text\">value</code> 的 <code class=\"language-text\">set</code> 方法，因而直接调用 <code class=\"language-text\">input.value = xxx</code> 并不能达到预期的效果（实际触发的是 React 封装的 setter，而不是实际 DOM 的 setter）。为此，可以使用如下的方法绕过去：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> originalSetter <span class=\"token operator\">=</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLInputElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">;</span>\n<span class=\"token function\">originalSetter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token string\">'your value here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>其次，需要触发一次 <code class=\"language-text\">onChange</code> 的事件，好让 React 的组件可以在原来既定的回调函数中处理新的数据：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninput<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>以下是一个完整可用的方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> setter <span class=\"token operator\">=</span>\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HTMLInputElement</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>set<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Event</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bubbles<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"date":"2019-07-10","title":"Trigger onChange for React Input","category":"JavaScript"}}},{"node":{"id":"54c72338-b338-500b-97dd-37fe6ae8236a","html":"<p><a href=\"http://www.ecma-international.org/ecma-262/9.0/#sec-object-initializer\">ES2018</a> 增加了 Object Spread 操作符的官方支持。Object Spread 操作符和 <code class=\"language-text\">Object.assign</code> 的一些区别，可以参考<a href=\"https://2ality.com/2016/10/rest-spread-properties.html#spread-defines-properties-objectassign-sets-them\">这篇文章</a>。</p>\n<p>在 JavaScript 执行 Object Spread 操作符的时候，需要进行如下的几步操作：</p>\n<ol>\n<li>确定对象有哪些自己的属性。原型链上的部分是不会被 Object Spread 操作符接收的，举个例子：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> parent<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    current<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output => { current: 2 }</span></code></pre></div>\n<ol start=\"2\">\n<li>确定第一步拿到的属性中，有那些是可枚举的（enumerable）。不可枚举的部分，不会被接收，举个例子：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span> parent<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    current<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>obj <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output => { }</span></code></pre></div>\n<ol start=\"3\">\n<li>分别获取到这些属性的值</li>\n</ol>\n<p>根据以上的规则，现在可以考虑这样一个场景：假设需要一个 Proxy 来修改访问对象属性的行为，比如对对象任意属性的取值，都从它的某一个子属性中去拿。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'inner-value'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* todo */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => output: inner-value</span></code></pre></div>\n<p>这里的 handler 并不难写，只需要：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// or:</span>\n    <span class=\"token comment\">// return Reflect.get(target.child, key);</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>现在，如果需要 Proxy 也同样可以支持 Object Spread 的功能，那么就需要对 <code class=\"language-text\">handler</code> 做更多的处理。从上面的分析来看，第一步获取自有属性，需要用到 <code class=\"language-text\">ownKeys</code>；第二步获取可枚举属性，需要用到 <code class=\"language-text\">getOwnPropertyDescriptor</code>；最后一步获得属性值，依然需要 <code class=\"language-text\">get</code>。</p>\n<p>代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">:</span> <span class=\"token string\">'inner-value'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>proxy <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => output: { key: 'inner-value' }</span></code></pre></div>","frontmatter":{"date":"2019-07-09","title":"Object Spread and Proxy","category":"JavaScript"}}},{"node":{"id":"90b20290-7586-5b78-8fd4-bf9224aa51d0","html":"<p><code class=\"language-text\">Array.from</code> 是 JavaScript 中一个较新的 API，可以将一个类数组或可迭代对象转化成一个真正的数组。</p>\n<p>类数组（array-like）常见于 DOM API 中取到的数据，比如 <code class=\"language-text\">.querySelectorAll</code>。得到的结果有 <code class=\"language-text\">.length</code> 属性，也可以通过下标获取到数据，但是本身却不是一个数组，没有 <code class=\"language-text\">Array.prototype</code> 上的 API 可以直接用。</p>\n<p>可迭代对象则是指那些定义了 <code class=\"language-text\">Symbol.iterator</code> 属性的对象。</p>\n<p><code class=\"language-text\">Array.from</code> 可以将上述的两种对象直接转化成一个标准的数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> iterable <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [1, 2];</span>\n\n<span class=\"token keyword\">const</span> arrayLike <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [span, span, ...]</span></code></pre></div>\n<p>除了上述常见的应用之外，<code class=\"language-text\">Array.from</code> 还有一些特殊的应用。</p>\n<p>首先，只要指定了 <code class=\"language-text\">length</code> 属性，<code class=\"language-text\">Array.from</code> 就可以创建一个数组。这一行为可以用来创建一个指定长度的数组：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [0, 1, 2, 3, 4]</span></code></pre></div>\n<p>其次，<code class=\"language-text\">Array.from</code> 函数其实接受不止一个参数。第二个参数是一个 map 函数，第三个参数是 <code class=\"language-text\">thisArg</code>，用于指定 map 函数的 <code class=\"language-text\">this</code> 对象。有了这个 map 函数的支持，上面这个例子就可以进一步改写成：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在转化 DOM 类数组的时候，直接通过指定 map 函数进行进一步的转化，是比较方便的。可以省略一个 <code class=\"language-text\">.map</code> 函数的嵌套，也节省一个中间数组对象的创建。</p>\n<p><code class=\"language-text\">Array.prototype.map</code> 函数可以指定 <code class=\"language-text\">thisArg</code>，在 <code class=\"language-text\">Array.from</code> 中也可以通过第三个参数指定 <code class=\"language-text\">thisArg</code>。以下是一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mapper <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  shift<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shift <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> mapper<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">,</span> mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, 3, 4, 5];</span></code></pre></div>\n<p>上述写法等价于：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> length<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">,</span> mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-07-02","title":"Array.from","category":"JavaScript"}}},{"node":{"id":"61e28cdf-6987-5e08-8122-603691c0fdae","html":"<p>前端的开发工程，经常需要开启一些调试用的服务器，一旦调试的服务器多了，难免会出现网络端口号的冲突；类似的，如果在一台开发机上有多个人同时开发，开发脚本也就不能写死一个固定的端口号了。在这类情况下，如果要手动解决这些冲突（修改端口号或者手写端口号的分配规则），不免有些麻烦。</p>\n<p>事实上，创建服务的时候，可以设置 <code class=\"language-text\">0</code> 作为端口号。这样的话，系统就会指定一个当前空闲可用的端口号，以保证不发生端口号冲突的情况。</p>\n<p>下面是一段 Node.js 的示意代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server  <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'&lt;html>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;head>&lt;title>Node.js Server&lt;/title>&lt;/head>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;body>&lt;h1>Hello World&lt;/h1>&lt;/body>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;/html>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ask for an available port</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ask for actually used port</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">server is listening: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">server.address().port</code> 可以拿到当前系统具体分配的端口号。有了这个端口号，就可以自动/手动的打开对应的 URL 地址以访问新生成的服务了。</p>","frontmatter":{"date":"2019-06-24","title":"Get Available Port Number","category":"JavaScript"}}},{"node":{"id":"d3d9b9ee-bfd5-59a0-8ae2-2338b51424cc","html":"<p>下面展示的这段 CSS 设置非常常见，可以让文字超过宽度的时候，显示 <code class=\"language-text\">...</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.ellipsis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在实际业务中，经常会碰到这样的需求：只有当显示出 <code class=\"language-text\">...</code> 的时候，才做某些事情（比如，才在鼠标悬停的时候展示 Tooltip，用以显示完整的文字内容）。CSS 本身并没有提供足够的接口，让开发者可以直观的了解到当前的文字内容是否已经超出了可以显示的范围。如果需要判断当前内容是否超出了元素的宽度（因而让 CSS 渲染出 <code class=\"language-text\">...</code>），可以用下面的 JavaScript 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isOverflow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>scrollWidth <span class=\"token operator\">!==</span> element<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth\">MDN</a> 的介绍，<code class=\"language-text\">scrollWidth</code> 是一个制度元素，其值等于该元素实际的宽度（包含了元素因为 <code class=\"language-text\">overflow</code> 没有展示出来的部分）；而于此相对的，<code class=\"language-text\">clientWidth</code> 是元素实际展示的宽度。注，对行内元素和没有 CSS 的元素来说，<code class=\"language-text\">clientWidth</code> 是 0，具体见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth\">MDN</a>。针对判断是否出 <code class=\"language-text\">...</code> 的情况，这里不需要考虑 <code class=\"language-text\">clientWidth</code> 的特殊情况。因为 <code class=\"language-text\">scrollWidth</code> 实际给出的值包含了被隐去的部分，因而当 <code class=\"language-text\">scrollWidth</code> 和 <code class=\"language-text\">clientWidth</code> 不想等的时候，就可以认定当前有部分内容被隐去了，因而 <code class=\"language-text\">...</code> 也出现了。</p>","frontmatter":{"date":"2019-06-21","title":"Detect Overflow","category":"JavaScript"}}},{"node":{"id":"b52b4bc6-f364-5715-a454-319cdd7e61b0","html":"<p>使用 JavaScript 库 <a href=\"https://www.npmjs.com/package/jszip\">jszip</a> 可以对传入的本地 zip 包进行解压缩并读取其中的文件。</p>\n<p>一段参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> <span class=\"token string\">'example.txt'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onDrop</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">:</span> DragEvent<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> file<span class=\"token punctuation\">:</span> File <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>dataTransfer<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> zip <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> jszip<span class=\"token punctuation\">.</span><span class=\"token function\">loadAsync</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> zip<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span>filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content of example.txt: '</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，<code class=\"language-text\">loadAsync</code> 函数接受的参数是一个 <code class=\"language-text\">Blob</code>，而无论是 <code class=\"language-text\">input[type=file]</code> 还是通过 drag-n-drop 得到的文件（<code class=\"language-text\">File</code>），都是一种特殊的 <code class=\"language-text\">Blob</code>，因而可以直接传递给 <code class=\"language-text\">loadAsync</code> 使用。</p>\n<p><code class=\"language-text\">.async(&#39;text&#39;)</code> 可以将结果异步转化成字符串。API 也支持其他的格式类型，比如 ArrayBuffer 等。（<a href=\"https://stuk.github.io/jszip/documentation/api_zipobject/async.html\">文档</a>）</p>\n<p>除了读取内容之外，jszip 也支持创建修改 zip 包的内容。完整的 API 文档可以参考<a href=\"https://stuk.github.io/jszip/documentation/api_jszip.html\">这里</a>。</p>","frontmatter":{"date":"2019-06-17","title":"Unzip using JavaScript","category":"JavaScript"}}},{"node":{"id":"79bee574-d4b0-57b1-b531-1ef59addb95d","html":"<p>react-router 底层使用了 history 库来处理路由。一般有两种选择，一种是使用 <code class=\"language-text\">BrowserHistory</code>（背后的实现依赖了 History API），一种是使用 <code class=\"language-text\">HashHistory</code>（背后的实现主要依赖 <code class=\"language-text\">window.location.hash</code>）。</p>\n<p>如果尝试在 HashHistory 上调用 <code class=\"language-text\">push</code> API 并传递 state 参数：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> history <span class=\"token operator\">=</span> <span class=\"token function\">HashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>会在 console 看到如下的报错，并且 state 并没有传递成功：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hash history cannot push state; it is ignored</code></pre></div>\n<p>这个是 history 库的默认行为，具体的代码可以参考 <code class=\"language-text\">modules/createHashHistory.js</code> 中 <code class=\"language-text\">push</code> 的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">warning</span><span class=\"token punctuation\">(</span>\n    state <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Hash history cannot push state; it is ignored'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token string\">'PUSH'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> location <span class=\"token operator\">=</span> <span class=\"token function\">createLocation</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n    history<span class=\"token punctuation\">.</span>location\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>上面的代码可以看到，如果传递了第二个参数 state，那么就会输出报错。同时，在 createLocation 函数调用的时候，第二个参数本来应该是 state，这里显式地写成了 <code class=\"language-text\">undefined</code>，明确拒绝了传递 state 的做法。</p>\n<p>然而，这并不意味着就完全不能传递 <code class=\"language-text\">state</code> 了。</p>\n<p>事实上，<code class=\"language-text\">push</code> 函数有两种 API 可供选择，一种是 path 是字符串，然后 state 作为第二个参数传递；另一种则第一个参数就是一个对象，其中一个属性就是 state。</p>\n<p>如果使用下面的方法调用，state 就可以在 react-router 中被传递了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">hashHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token punctuation\">:</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> state<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>但是，需要指出的是。这个只是 <code class=\"language-text\">state</code> 被<strong>传递</strong>了，并不代表 <code class=\"language-text\">state</code> 真的被存储了下来。事实上，HashHistory 并没有依赖浏览器的 History API 功能。因此，这里的 <code class=\"language-text\">state</code> 传递之后，会出现在 <code class=\"language-text\">history.location.state</code> 中，但是在浏览器前进/后退的操作中，数据会被丢弃，无法找到。</p>\n<p>一个简单的例子是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">createHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 1</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 2</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">goBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: undefined</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">goForward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: undefined</span></code></pre></div>\n<p>如果将 HashHistory 改成 BrowserHistory，则可以正确输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> h <span class=\"token operator\">=</span> <span class=\"token function\">createBrowserHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">location</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 1</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 2</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">goBack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 1</span>\nh<span class=\"token punctuation\">.</span><span class=\"token function\">goForward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 2</span></code></pre></div>","frontmatter":{"date":"2019-06-16","title":"HashHistory & State","category":"JavaScript"}}},{"node":{"id":"e68527aa-5b12-5908-891e-1136dfbb4f27","html":"<p><a href=\"https://gist.github.com/jed/982883\">这里</a>有一段生成 UUID v4 非常短小的 JavaScript 代码。虽然有一些注释，但总体上并不是非常的好理解。</p>\n<p>首先，用 TypeScript 翻译一遍原始的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> slot <span class=\"token operator\">=</span> <span class=\"token string\">'10000000-1000-4000-8000-100000000000'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>to <span class=\"token operator\">-</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> seed <span class=\"token operator\">=</span> input <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">?</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> seed<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">uuidReplacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> slot<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[018]/g</span><span class=\"token punctuation\">,</span> uuidReplacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来对原始的代码中的部分做一些解释：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">^</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span> <span class=\"token operator\">>></span> a<span class=\"token operator\">/</span><span class=\"token number\">4</span></code></pre></div>\n<p>这个部分的代码不太好理解。首先，先根据运算符的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">优先级</a>，给上面这个算式加上帮助理解的括号：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来，再来看每个部分都是什么意思：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span></code></pre></div>\n<p>创建了一个 <code class=\"language-text\">0~16</code> 范围内的随机数，<code class=\"language-text\">&gt;&gt; (a / 4)</code> 这个运算之后，会得到几种不同的结果（注意，这里 <code class=\"language-text\">a</code> 只可能是 <code class=\"language-text\">&#39;0&#39;</code>，<code class=\"language-text\">&#39;1&#39;</code>，<code class=\"language-text\">&#39;8&#39;</code> 三种情况）：</p>\n<ul>\n<li><code class=\"language-text\">&#39;0&#39;</code> 或 <code class=\"language-text\">&#39;1&#39;</code> 的时候，结果是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;8&#39;</code> 的时候，等价于 <code class=\"language-text\">&gt;&gt; 2</code>，所以结果是一个 <code class=\"language-text\">0~3</code> 的随机数（整数）</li>\n</ul>\n<p>最后一步异或运算 <code class=\"language-text\">^</code>，得到的可能结果分别是：</p>\n<ul>\n<li><code class=\"language-text\">&#39;0&#39;</code> 的时候，异或结果不变，是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;1&#39;</code> 的时候，异或结果最后一个比特位的值正好相反，最终的结果仍然是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;8&#39;</code> 的时候，最终结果是 <code class=\"language-text\">8~11</code> 的随机数（整数）。因为 <code class=\"language-text\">8</code> 的第四位二进制是 <code class=\"language-text\">1</code> 其他都是 <code class=\"language-text\">0</code>，而 <code class=\"language-text\">0~3</code> 这几个数的二进制位数不超过两位，所以位数之间不存在交集，异或运算相当于是 <code class=\"language-text\">8 + n</code>，<code class=\"language-text\">n</code> 是 <code class=\"language-text\">0~3</code> 中的某一个数。最终得到的就是 <code class=\"language-text\">8~11</code> 的随机数（整数）。</li>\n</ul>\n<p>最终，将生成的不超过 16 的整数转化成十六进制的对应字符。</p>\n<p>第二部分的代码用到了正则匹配和替换（注意，这里 <code class=\"language-text\">&#39;4&#39;</code> 没有被替换，依然保留），主要不容易理解的是下面这个部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">4e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">8e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e11</span>    </code></pre></div>\n<p>这里用到了 JavaScript 比较奇怪的类型转化功能。因为最开始是一个数组，所以这里的相加实际上是字符串的拼接。等价于 <code class=\"language-text\">&#39;10000000-1000-4000-8000-100000000000&#39;</code> 这个字符串。上面这样写主要是字符数上比较少。</p>","frontmatter":{"date":"2019-06-12","title":"Generate v4 UUID","category":"JavaScript"}}},{"node":{"id":"a1465a17-f50e-5c80-877c-62f1b261e758","html":"<p>在 JavaScript 中，如果得到了一串字节（比如 <code class=\"language-text\">Uint8Array</code>），要转化成对应的字符串，就可以用到 <code class=\"language-text\">TextDecoder</code>。简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TextDecoder</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">119</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"hello world\"</span></code></pre></div>\n<p>当然，上面的这个例子是比较简单的。不使用 <code class=\"language-text\">TextDecoder</code> 也可以直接转化成字符串：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token number\">104</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">119</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => \"hello world\"</span></code></pre></div>\n<p><code class=\"language-text\">TextDecoder</code> 的主要优势，需要在非 ASCII 码范围内才体现出来。特别是 utf-8 这类变长字符串编码，直接处理比较困难。交给现成的 API 来处理，简单方便。</p>\n<p>参考文档：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\">MDN</a></p>","frontmatter":{"date":"2019-06-04","title":"TextDecoder","category":"JavaScript"}}},{"node":{"id":"53185fcd-7279-570b-8a64-384a2f60382e","html":"<p>一个项目工程里的组件，很可能需要依赖于某些项目顶层定义的 <code class=\"language-text\">Provider</code> 才能正确使用。比如，mobx 的项目可能会在顶层通过 <code class=\"language-text\">mobx-react</code> 中的 <code class=\"language-text\">Provider</code> 提供 <code class=\"language-text\">store</code> 参数。</p>\n<p>如果需要在每一个 story 中都写：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">info</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComponentForThisStory</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>显然太啰嗦了。</p>\n<p>storybook 提供了全局定义 decorator 的方法，可以以此来注册一些全局都用得到的改动。举例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> configure<span class=\"token punctuation\">,</span> addDecorator <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@storybook/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Provider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">withProvider</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">story</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Provider</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">info</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token function\">story</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Provider</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">loadStories</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">addDecorator</span><span class=\"token punctuation\">(</span>withProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>loadStories<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样，在 story 中，只需要简单的提供组件就可以了，<code class=\"language-text\">decorator</code> 会自动为组件加上合适的外层 <code class=\"language-text\">Provider</code>。</p>\n<p><a href=\"https://alligator.io/react/storybook-with-redux/\">参考文档</a></p>","frontmatter":{"date":"2019-06-03","title":"global Provider for storybook","category":"JavaScript"}}},{"node":{"id":"222c8e73-0ed7-5131-a264-185f704ea6de","html":"<p>默认情况下，Jest 配置文件中的 <code class=\"language-text\">transform</code> 属性，是不会被应用到 node_modules 目录下的。如果引用的库本身使用了非 JavaScript 文件（比如 CSS 文件），会造成 Jest 无法正确处理。</p>\n<p>一个可行的替代方案，是用 <code class=\"language-text\">moduleNameMapper</code> 来代替 <code class=\"language-text\">transform</code> 的功能。</p>\n<p>以 CSS 的处理为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  transform<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.(less|css)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jest-transform-stub\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这个是常规方案，但是对 CSS / Less 的处理不包含 node_modules 的部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  moduleNameMapper<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"^.+\\\\.(less|css)$\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"jest-transform-stub\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这个方案，可以达到一样的效果，但是 node_module 内的 CSS 引用也会被正确的处理。</p>\n<p>两种方案没有优劣，主要是看使用的场景。</p>","frontmatter":{"date":"2019-05-30","title":"Transform node_modules in Jest","category":"JavaScript"}}},{"node":{"id":"02d0ac09-47f0-54ee-ac02-9e0d30ae56a5","html":"<p>一直以来，<a href=\"https://github.com/ReactiveX/rxjs\">rxjs</a> 和 <a href=\"https://github.com/facebook/react\">react</a> 都不太搭，要在 React 中使用 rxjs 往往需要写并不怎么优雅的代码，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> initial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>value$ <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value$<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value$\n      <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Example value$<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面这段代码，会根据 <code class=\"language-text\">value$</code> 这个 Observable 的数据，通过 React State 这个桥梁，去更新 UI。并且，代码考虑到了给定的 <code class=\"language-text\">value$</code> 可能后续变化的情况。如果不考虑后续 <code class=\"language-text\">props</code> 的修改，上面的代码依然需要在 <code class=\"language-text\">componentDidMount</code> 的时候注册回调并更新，然后在 <code class=\"language-text\">componentWillUnmount</code> 的时候注销，显得非常的啰嗦。</p>\n<p>LeetCode 提供的 <a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks\">rxjs-hooks</a> 提供了一个更为优雅的解决方案：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> initial <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">useObservable</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs$</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> inputs$<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">switchMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>value$<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> value$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    initial<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>props<span class=\"token punctuation\">.</span>value$<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Example value$<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>rxjs-hooks 另外提供了 <code class=\"language-text\">useEventCallback</code> 来更好的处理事件流，具体可以查看官方的<a href=\"https://github.com/LeetCode-OpenSource/rxjs-hooks#useeventcallback\">文档</a>。</p>","frontmatter":{"date":"2019-05-23","title":"rxjs and hooks","category":"JavaScript"}}},{"node":{"id":"3656d85d-6ae6-5937-a3f4-54f2704bdfef","html":"<p><a href=\"https://github.com/JedWatson/classnames\">classnames</a> 库提供了一个 <code class=\"language-text\">bind</code> API，用于处理 CSS Module 的情况。</p>\n<p>在 Webpack 中用 CSS Module 的方案编译 CSS 文件，后续在 JavaScript 中 <code class=\"language-text\">import style from &#39;xxx.css&#39;;</code> 后，<code class=\"language-text\">style</code> 就是一个对象。这个对象的大体结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'foo-abcde'</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar-12345'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，对象的 <code class=\"language-text\">key</code> 是原始的 class name，而 <code class=\"language-text\">value</code> 则是施加 CSS Module 之后得到的唯一名称。</p>\n<p>如果直接使用 <code class=\"language-text\">classnames</code> 的标准 API，那么写起来就需要大量使用 computed property name 的语法，比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classnames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>style<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>而使用 <code class=\"language-text\">bind</code> API，可以事先告知 <code class=\"language-text\">classnames</code> class name 的对应关系（通过指定 <code class=\"language-text\">this</code>），后续只需要使用字符串，<code class=\"language-text\">classnames</code> 就可以自动使用合适的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames/bind'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> styles <span class=\"token keyword\">from</span> <span class=\"token string\">'./style.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>styles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// result in: className=\"foo-abcde\"</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">cx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-20","title":"classnames & css module","category":"JavaScript"}}},{"node":{"id":"55791664-706d-538e-bbf1-6539a03a9d34","html":"<p><code class=\"language-text\">Object.create</code> 可以用提供的对象做新对象的 <code class=\"language-text\">__proto__</code>。这导致了一个很有趣的现象，如果使用 <code class=\"language-text\">Object.create(null)</code> 来创建新对象，那么这个新对象上就没有任何 <code class=\"language-text\">__proto__</code>。因为 JavaScript 的对象经常被用来做字典使用，<code class=\"language-text\">Object.create(null)</code> 可以让这个功能使用更加的纯粹。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>hasOwnProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: \"undefined\"</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   constructor,</span>\n<span class=\"token comment\">//   hasOwnProperty,</span>\n<span class=\"token comment\">//   isPrototypeOf,</span>\n<span class=\"token comment\">//   propertyIsEnumerable,</span>\n<span class=\"token comment\">//   toLocaleString,</span>\n<span class=\"token comment\">//   toString,</span>\n<span class=\"token comment\">//   valueOf,</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>同样，因为没有 <code class=\"language-text\">prototype</code>，理论上来说，后续如果有人对 <code class=\"language-text\">Object.prototype</code> 做操作，也不会影响到使用。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> dict <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addSomething</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: undefined</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> dict<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no output</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: function</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 'addSomething'</span></code></pre></div>\n<p>所以，如果判断对象有某个字段，那么一定是他自身有这个字段，而不会是因为原型链上的定义。也就是说，不需要用：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">,</span> <span class=\"token string\">'addSomething'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而只需要写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dict<span class=\"token punctuation\">.</span>addSomething<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这也会有一些弊端，比如默认 <code class=\"language-text\">Object.prototype</code> 的东西就没了，如果需要 <code class=\"language-text\">toString</code> 之类的函数，得自己写。</p>","frontmatter":{"date":"2019-05-16","title":"Object.create(null)","category":"JavaScript"}}},{"node":{"id":"aba3154d-b96a-54f0-8d97-892f72232bdc","html":"<p>JavaScript 的 <code class=\"language-text\">performance</code> 除了常用的 <code class=\"language-text\">now</code> / <code class=\"language-text\">mark</code> 之外，也提供了和页面加载相关的很多接口。通过调用这些接口，就可以很方便的收集页面加载的相关指标，方便了解不同用户的实际体验。</p>\n<p><code class=\"language-text\">perfomance.getEntries</code> 返回的数据，有三种类型：<code class=\"language-text\">navigation</code>，<code class=\"language-text\">resource</code>，<code class=\"language-text\">paint</code>。</p>\n<p>其中，<code class=\"language-text\">navigation</code> 包含了 <code class=\"language-text\">PerformanceNavigationTiming</code>，里面记录了和页面导航相关的时间信息，比如 connection 的起始/结束时间等。可以通过下面的代码拿到完整的数据：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigation'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// connectEnd: xxx</span>\n<span class=\"token comment\">// connectStart: xxx</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p><code class=\"language-text\">resource</code> 包含了所有的 <code class=\"language-text\">PerformanceResourceTiming</code>。每一个资源的请求，对应一个 <code class=\"language-text\">PerformanceResourceTiming</code>。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> duration <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">resource: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> use </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>duration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> milliseconds to load</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// resource: https://xxxx use xxx milliseconds to load</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">paint</code> 包含了所有的 <code class=\"language-text\">PerformancePaintTiming</code>。一共有两个，分别是 first-paint 和 first-contentful-paint。例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">performance<span class=\"token punctuation\">.</span><span class=\"token function\">getEntriesByType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'paint'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> startTime <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, startTime: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>startTime<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// output:</span>\n  <span class=\"token comment\">// first-paint: xxxx</span>\n  <span class=\"token comment\">// first-contentful-paint: xxx</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-13","title":"performance data via JavaScript","category":"JavaScript"}}},{"node":{"id":"216ed083-b608-5ff1-998f-fa09397a0c01","html":"<p>在 HTML 中，如果一个 <code class=\"language-text\">a</code> 标签，带上了 <code class=\"language-text\">download</code> 的属性，链接地址就会被浏览器直接用于下载。使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>link_here<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">download</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filename.suffix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>同样，如果需要 JavaScript 能够直接触发一个资源的下载，可以创建带 <code class=\"language-text\">download</code> 属性的 <code class=\"language-text\">a</code> 标签，然后调用这个元素的 <code class=\"language-text\">click</code> 方法。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createDocument</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'link_here'</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename'</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// trigger download</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">download</code> 的支持情况见<a href=\"https://caniuse.com/download/embed\">这里</a>。</p>\n<p>这个方案有一个问题：如果是跨域的资源，直接这样的 <code class=\"language-text\">a</code> 标签点击是不能调用下载的（因为执行了严格的同源策略），行为上就会和一个普通的导航没有区别（比如，增加 <code class=\"language-text\">target=_blank</code> 之后就会打开一个新窗口展示资源）。</p>\n<p>解决跨域的一个前端方案是：fetch 资源，然后将结果转化成 Blob，然后将这个 Blob 生成一个 URL。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link_here'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">repsonse</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> link<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'filename.here'</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"2019-05-10","title":"download third party resource","category":"JavaScript"}}},{"node":{"id":"683b3848-8eb5-5274-8d09-afff4543ca05","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', reason: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。</p>\n<p>和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>\n<p>需要注意的是，返回的结果是一个数组，其中的每一个元素都是一个对象。其中，每个对象都有 <code class=\"language-text\">status</code> 的字段，表示对应的 Promise 最终的结果是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code>。如果是 <code class=\"language-text\">fulfilled</code> 状态，那么对象会有 <code class=\"language-text\">value</code> 字段，值相当于 <code class=\"language-text\">.then</code> 回调中的第一个参数；如果是 <code class=\"language-text\">rejected</code> 状态，那么对象会有 <code class=\"language-text\">reason</code> 字段，值相当于 <code class=\"language-text\">.catch</code> 回调中的第一个参数。</p>","frontmatter":{"date":"2019-05-09","title":"Promise.allSettled","category":"JavaScript"}}},{"node":{"id":"59648bef-5b8c-51a7-bd1c-badf363cd310","html":"<p>浏览器显示 Notification 默认是有一个自动消失时间的。不同的浏览器，这里的消失时间并不一致，从测试来看：</p>\n<ul>\n<li>Chrome: ~6s</li>\n<li>Firefox: ~19s</li>\n<li>Edge: ~6s</li>\n</ul>\n<p>从目前浏览器公开的 API 来看，并没有一个接口可以直观的修改这里的消失时间。一个可行的解决方案是：用 <code class=\"language-text\">requireInteraction</code> 来强制要求浏览器不自动关闭 Notification，然后设置 <code class=\"language-text\">setTimeout</code> 并在合适的时机手动关闭这个显示的 Notification。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> delay <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\nNotification<span class=\"token punctuation\">.</span><span class=\"token function\">requestPermission</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">===</span> <span class=\"token string\">\"granted\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> notification <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notification</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"Hi! \"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        requireInteraction<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      notification<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>目前 <code class=\"language-text\">requireInteraction</code> 的浏览器支持情况并不非常理想，只有 Chrome, Edge(17+) 和 Opera 做了支持。具体的支持列表，可以看<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notification/requireInteraction\">这里</a>。</p>\n<p>另外，从实际的使用上来看，Edge 浏览器中即使设置了 <code class=\"language-text\">requireInteraction</code>，notification 在一定时间之后也会消失，只是消失的时间会比原来默认的情况要长一些，大约是 25 秒。Chrome 的 Notification 如果设置了 <code class=\"language-text\">requireInteraction</code>，会多一个 Close 的按钮，展示效果和没有 <code class=\"language-text\">requireInteraction</code> 的情况有所不同。</p>","frontmatter":{"date":"2019-05-07","title":"custom display time of notification","category":"JavaScript"}}},{"node":{"id":"4e93db01-f1ba-59f4-a707-1cda13162c97","html":"<p><code class=\"language-text\">style</code> 本身是一个标准的 HTML 标签，在里面写的 CSS 样式，会被应用到页面上。同时，作为一个 HTML 标签，<code class=\"language-text\">style</code> 本身也可以被赋予一定的展示样式（比如将默认的 <code class=\"language-text\">style { display: none; }</code> 给覆盖掉）。加上 <code class=\"language-text\">contenteditable</code> 的属性，就会得到一个可编写的 <code class=\"language-text\">style</code> 标签。通过直接编写其中的 CSS 样式，页面会自动更新，展示应用样式后的效果。</p>\n<style>\n\n.editable-style-indicator {\n  width: 20px;\n  height: 20px;\n  border-radius: 20px;\n  margin-left: 3px;\n  background-color: #e65525;\n  box-shadow: 0 0 0 3px #e78267;\n}\n.editable-style-indicator:hover + style.editable-style,\nstyle.editable-style:focus,\nstyle.editable-style:hover {\n  display: block;\n  min-height: 5rem;\n  max-height: 10rem;\n  overflow: auto;\n  margin-top: -23px;\n  background-color: #ccc;\n}\n</style>\n<p></p>\n<div class=\"editable-style-indicator\"></div>\n<style contenteditable class=\"editable-style\"></style>\n<p></p>\n<p>上面展示的这个圆点，鼠标悬停之后，就会显示一个可输入的框。在里面输入一些 CSS 可以看到对页面元素的修改。比如，可以试试输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article small:nth-child(3)</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #007acc<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>几点注意：</p>\n<ol>\n<li>直接复制上面的 CSS 然后黏贴不会起效，因为样式也被黏贴到 <code class=\"language-text\">style</code> 里面去了，这会导致 <code class=\"language-text\">style</code> 里的内容不是合法的 CSS，无法应用样式</li>\n<li>CSS 需要写在一行里面，回车会导致插入 <code class=\"language-text\">&lt;br /&gt;</code>，同样会导致 CSS 语法错误，无法应用样式</li>\n</ol>","frontmatter":{"date":"2019-05-05","title":"contenteditable style","category":"JavaScript"}}},{"node":{"id":"951e3d2b-04c7-59ef-b089-9512c23b864d","html":"<p>如果拿到了一份带有 source map 的 JavaScript 代码，那么理论上就可以通过这份 source map 去尽可能的还原出原始的文件内容。</p>\n<p>首先，source map 本质上是一个 JSON 文件。在其中，<code class=\"language-text\">sourceContent</code> 数组就记录了所有源文件的纯文本内容，而这些文件的文件路径及文件名则存放在了 <code class=\"language-text\">sources</code> 数组中。两者相互对应，理论上来说参照这两者的数据，就可以将源文件还原到原始的目录下。</p>\n<p>然而，Webpack 的打包结果，文件的路径名称都带上了 <code class=\"language-text\">webpack:///</code> 的前缀。在实际处理的过程中，可以直接使用已有的库，比如 <a href=\"https://github.com/alexkuz/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个库因为已经比较老了，对 Webpack 3/4 等新版本的支持存在问题。在原库合并 PR 之前，可以先使用改进过的版本 <a href=\"https://github.com/laysent/restore-source-tree\"><code class=\"language-text\">restore-source-tree</code></a>。</p>\n<p>这个修改过的版本，除了修复对新版 Webpack 编译结果的支持外，也加入了 glob 的支持，可以更方便的进行批量 source map 还原。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">restore-source-tree -o output_folder path/to/source-maps/*.map</code></pre></div>\n<p>最终生成的文件会存放在 output_folder 下。</p>","frontmatter":{"date":"2019-05-03","title":"restore source map","category":"JavaScript"}}},{"node":{"id":"f0198f26-c43f-5ce7-b342-efb1aed6b269","html":"<p>在《JavaScript: The Good Parts》里，作者并不赞成 <code class=\"language-text\">switch</code> 语句的使用（主要是因为 fall-through 的情况很容易造成错误）。然而在实际的代码里，还是有不少地方可以看到 switch 的使用。目的各不相同，有不少可以借鉴的地方。</p>\n<section><h2>默认值设置</h2><p>React 的 <a href=\"https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L220\">Scheduler</a> 中，有这样一段代码：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> ImmediatePriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> UserBlockingPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> NormalPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> LowPriority<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">case</span> IdlePriority<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>不失为设置默认值的一种写法，看上去比使用 if 来得更明确一些：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n  priorityLevel <span class=\"token operator\">!==</span> ImmediatePriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> UserBlockingPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> NormalPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> LowPriority <span class=\"token operator\">&amp;&amp;</span>\n  priorityLevel <span class=\"token operator\">!==</span> IdlePriority\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>防止代码篡改的判定</h2><p>上面的需求，也很容易写成下面这种数组的方案：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> allowedValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  ImmediatePriority<span class=\"token punctuation\">,</span>\n  UserBlockingPriority<span class=\"token punctuation\">,</span>\n  NormalPriority<span class=\"token punctuation\">,</span>\n  LowPriority<span class=\"token punctuation\">,</span>\n  IdlePriority<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNot</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">comparedTo</span> <span class=\"token operator\">=></span> value <span class=\"token operator\">!==</span> comparedTo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>allowedValues<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNot</span><span class=\"token punctuation\">(</span>priorityLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  priorityLevel <span class=\"token operator\">=</span> NormalPriority<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>然而，这样的代码方式，可能存在被入侵的危险。不论是上面例子中的 <code class=\"language-text\">every</code> 函数，还是用 <code class=\"language-text\">Array.prototype</code> 上的任意函数，都有被篡改的可能性。如果其他地方的代码修改了 <code class=\"language-text\">Array.prototype.every</code> 的行为，让这里的返回值发生了变化，那么代码最终就会产生意料之外的行为。</p><p>在 Scheduler 中当然不需要考虑这个问题，但是在其他的应用场景下，这可能是不得不考虑的问题。举例来说，如果一个 Web 应用允许第三方脚本的运行，同时自身有对数据进行白名单检查的需求，那么就只能使用 switch 硬编码所有的情况，而不能使用数组或者对象，否则第三方的脚本有可能对最终的行为做篡改。</p><p>Microsoft Teams 的代码里，就有类似的应用场景（见 extracted/lib/renderer/preload_sandbox.js）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isChannelAllowed</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">channel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">let</span> isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// IMPORTANT - the allowList must be a hardcorded switch statement.</span>\n  <span class=\"token comment\">// Array and object methods can be overridden and forced to return true.</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> xxx<span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">case</span> zzz<span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      isAllowed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"date":"2019-05-01","title":"use case of switch","category":"JavaScript"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"JavaScript"}}}