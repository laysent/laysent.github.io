{"componentChunkName":"component---src-templates-til-category-js","path":"/til/category/css","result":{"data":{"site":{"siteMetadata":{"title":"LaySent's Site"}},"allMarkdownRemark":{"edges":[{"node":{"id":"8851beea-d663-5eca-a70d-daacfb58475f","html":"<p>在 Houdini 实现的过程中（<a href=\"https://developers.google.com/web/updates/2016/05/houdini\">什么是 Houdini？</a>），Chrome 已经在 66 中已经实现了一部分 CSS 样式的 Typed Object Modal 支持（支持的列表可以参考<a href=\"https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/css/cssom/README.md\">这里</a>）。</p>\n<p>实现之后，在 JavaScript 中就可以通过 <code class=\"language-text\">window.CSS</code> 对象上的各类属性 API，生成指定类型的 CSS 属性值。看一个简单的例子：</p>\n<p>在以前的实现中，往往需要这么写代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'px'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样写，会存在几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，需要在字符串和数字之间进行转化；</li>\n<li>CSS 的属性名称是用 <code class=\"language-text\">-</code> 连接的，但是在 <code class=\"language-text\">CSSStyleDeclaration</code> 中却需要写成小驼峰的形式（<code class=\"language-text\">font-size</code> 变成 <code class=\"language-text\">fontSize</code>）；</li>\n<li>如果设置违法的值，代码会默默失败，没有任何错误提示；</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no error! not success!</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>即使设置的属性值是数字，但是实际拿到的时候，值又变成了字符串</li>\n</ol>\n<p>如，上例中的 <code class=\"language-text\">element.style.opacity</code>，虽然设置的值是 <code class=\"language-text\">1</code>，但如果运行 <code class=\"language-text\">typeof element.style.opacity</code> 结果却是 <code class=\"language-text\">string</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果试图直接进行运算，则可能得不到预料中的结果。比如，下面的输出依然是 <code class=\"language-text\">0.1</code> 而不是 <code class=\"language-text\">0.6</code>，因为 <code class=\"language-text\">element.style.opacity += 0.5</code> 的结果是 <code class=\"language-text\">0.10.5</code>（字符串拼接），作为一个非法值，直接被浏览器抛弃了（见第三点）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">+=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 CSS Typed Object Model 之后，代码可以改写成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">px</span><span class=\"token punctuation\">(</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不难看出，这样的写法，基本解决了上面提到的几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，不再需要手动进行字符串和数值的转化。<code class=\"language-text\">CSS.px</code> 这个函数可以将数值转化成一个带单位的对象，用于给 <code class=\"language-text\">attributeStyleMap</code> 赋值。另外，由于这个值 <code class=\"language-text\">toString</code> 之后就是类似 <code class=\"language-text\">16px</code> 的字符串，因此也可以直接给 <code class=\"language-text\">element.style.fontSize</code> 进行赋值。同时，从 <code class=\"language-text\">attributeStyleMap</code> 中拿到的数据，也是带单位的对象，对象中的 <code class=\"language-text\">value</code> 就是数值，<code class=\"language-text\">unit</code> 是字符串，表示单位，不再需要手动解析；</li>\n<li><code class=\"language-text\">attributeStyleMap</code> 的属性名称和 CSS 的属性名称是一致的，不需要像以前一样在 JavaScript 中手动改成小驼峰的写法；</li>\n<li>如果设置了违法的值，代码会报错：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上代码会输出报错：<code class=\"language-text\">TypeError: Failed to execute &#39;set&#39; on &#39;StylePropertyMap&#39;: Invalid type for property</code>。</p>\n<ol start=\"4\">\n<li>应该是数值的结果，拿到的时候也是数值，而不是字符串（因此数值计算也不会出错）：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，这里如果这么些，结果依然是数字：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>另外，使用 CSS Typed OM 还有一些其他额外的好处，比如，浏览器不需要序列化和反序列化结果，因此性能更好（一个简单的性能检测可以查看<a href=\"https://github.com/w3c/css-houdini-drafts/issues/634#issuecomment-366358609\">这里</a>，大概有 30% 左右的提升）。</p>\n<p>更多更详细关于 CSS Typed OM 的介绍，可以参考 Google 的这篇 <a href=\"https://developers.google.com/web/updates/2018/03/cssom\">Blog</a>。</p>\n<p>P.S. 目前，其他的浏览器支持情况依然不理想，可以参考 <a href=\"https://ishoudinireadyyet.com/\">Is Houdini ready yet?</a> 网站上最新的支持情况了解详情。就实际情况来看，可以在 Electron 3 （基于 Chrome 66，见<a href=\"https://electronjs.org/releases/stable?version=3&#x26;page=7\">这里</a>）或以上版本使用，但暂时不建议在 Web 项目中引入。</p>","frontmatter":{"date":"2019-10-30","title":"CSS Typed Object Model","category":"CSS"}}},{"node":{"id":"9018df9c-3116-5212-8829-3e63b77ba5cd","html":"<p>在浏览器渲染 SVG 的时候，可以通过 <code class=\"language-text\">shape-rendering</code> 这一属性，来控制浏览器对 SVG 抗锯齿效果的展示。<code class=\"language-text\">shape-rendering</code> 支持从三个纬度来权衡 SVG 的渲染效果，这三个纬度分别是：速度、曲线精细度以及曲线的锐利程度。</p>\n<ul>\n<li><code class=\"language-text\">auto</code>，这个是默认值，表示由浏览器来决定改如何显示</li>\n<li><code class=\"language-text\">optimizeSpeed</code>，顾名思义，这个要求浏览器以渲染的速度优先，抗锯齿可能会被浏览器关闭</li>\n<li><code class=\"language-text\">crispEdges</code>，这个选项要求浏览器以曲线的锐利程度为第一优先级。这种情况下，速度和精细度的优先级会被降低。浏览器可能会关闭抗锯齿，或者只针对接近垂直和水平的线才开启抗锯齿的功能。同时，浏览器可能会微调线的位置和宽度，以适应显示器的物理像素点</li>\n<li><code class=\"language-text\">geometricPrecision</code>，这个选项要求浏览器以更好的精度来渲染图像，为此可能会牺牲渲染的性能（速度）和边界的清晰度</li>\n</ul>\n<p>下图从左到右分别展示了 <code class=\"language-text\">geometricPrecision</code>，<code class=\"language-text\">crispEdges</code> 和 <code class=\"language-text\">optimizeSpeed</code> 三种情况下，同一个圆的显示效果。</p>\n<svg viewBox=\"0 0 640 200\" xmlns=\"http://www.w3.org/2000/svg\" width=\"740\">\n  <circle cx=\"100\" cy=\"100\" r=\"100\" shape-rendering=\"geometricPrecision\" fill=\"#ff8787\" />\n  <circle cx=\"320\" cy=\"100\" r=\"100\" shape-rendering=\"crispEdges\" fill=\"#da77f2\" />\n  <circle cx=\"540\" cy=\"100\" r=\"100\" shape-rendering=\"optimizeSpeed\" fill=\"#748ffc\" />\n</svg>\n<p>不难看出，<code class=\"language-text\">geometricPrecision</code> 的效果是最平滑的，但是边缘清晰度不足；<code class=\"language-text\">crispEdges</code> 边缘很锐利，但是有一些毛边（越是低分辨率的屏幕，效果越明显）；<code class=\"language-text\">optimizeSpeed</code> 的显示效果也明显有毛边，不过效果和 <code class=\"language-text\">crispEdges</code> 略微不同，可以看得出底层使用的算法是不太一样的。</p>\n<p>上图的 HTML 代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0 0 640 200<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>740<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>geometricPrecision<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#ff8787<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>crispEdges<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#da77f2<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span>\n    <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">r</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">shape-rendering</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>optimizeSpeed<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#748ffc<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>另外，除了在 SVG 中直接写属性之外，也可以通过 CSS 来给 SVG 加上相关的 <code class=\"language-text\">shape-rendering</code> 值：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">svg</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">shape-rendering</span><span class=\"token punctuation\">:</span> geometricPrecision<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>MDN 的相关介绍见<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering\">这里</a>。</p>","frontmatter":{"date":"2019-10-11","title":"shape-rendering","category":"CSS"}}},{"node":{"id":"63fe13ef-a8b4-5225-8fe5-8e402f4609f3","html":"<p>图标的使用，之前的技术方案，一般都是使用特殊的字体文件进行的。而现在随着浏览器支持的变化，越来越多的技术方案开始迁移到直接使用 SVG 图标了。</p>\n<p>当然，为了迁移的平滑进行，最好是可以尽可能的避免改动。在 CSS 层面上，一般针对图标有两个需要设置的部分，一个是颜色，一个是大小。</p>\n<p>对于颜色，字体文件使用 <code class=\"language-text\">color</code> 属性进行着色。SVG 中可以用 <code class=\"language-text\">fill</code> 着色，用 <code class=\"language-text\">stroke</code> 描边。不过，由于 SVG 图标一般都是一个或多个 <code class=\"language-text\">path</code> 组成的，实际一般使用 <code class=\"language-text\">fill</code> 属性就可以了。这里，可以通过 CSS 中的 <code class=\"language-text\">currentColor</code> 来完成从 <code class=\"language-text\">color</code> 到 <code class=\"language-text\">fill</code> 的映射关系：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.icon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">fill</span><span class=\"token punctuation\">:</span> currentColor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中，<code class=\"language-text\">currentColor</code> 的支持浏览器可以参考 <a href=\"https://caniuse.com/#feat=currentcolor\">caniuse</a>。总体上来说，IE 9+ 都是支持的，是一个不需要有太多顾虑就可以使用的功能。</p>\n<p>对于大小，字体文件使用 <code class=\"language-text\">font-size</code> 属性控制大小。SVG 中则使用 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 进行控制。这里可以取巧的对所有 SVG 图标统一设置一个如下的 CSS 样式，一步将大小的设置迁移过来：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.icon</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的方案可以解决大部分的大小问题，但是要警惕部分字体图标也设置了 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 的情况。这种时候，图标占的空间由 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 确定，但是实际图标的大小由 <code class=\"language-text\">font-size</code> 确定。相当于 SVG 图标外面加上了一圈 <code class=\"language-text\">pending</code>。实际在迁移的时候，也可以用这个方案，将 <code class=\"language-text\">width</code> 和 <code class=\"language-text\">height</code> 改成和原先 <code class=\"language-text\">font-size</code> 一样的值，其中变化的差值部分用 <code class=\"language-text\">pending</code> 补上。</p>","frontmatter":{"date":"2019-10-10","title":"iconfont to svg","category":"CSS"}}},{"node":{"id":"97d07229-1f07-5e5a-9835-184c70c8c6a7","html":"<p>CSS 中有一些属性选择器，不常见，但是偶尔有一些小众的需求，实现起来会很方便。特别是在进行 Cypress 开发的时候，直接使用 JavaScript 查找元素比较困难，但是有了这些属性选择器，就可以很方便的通过 jQuery 的 API 进行元素的定位了。</p>\n<p>属性选择器和一些可能的应用场景，列举如下：</p>\n<section><h2>attr</h2><p>表示带有以 <code class=\"language-text\">attr</code> 命名的属性元素。这个选择器不关心属性具体的值，只要有，就会被选中。一些常见的应用场景包括：</p><ul>\n<li>选择一些没有值的属性，比如 <code class=\"language-text\">&lt;input disabled /&gt;</code> 可以通过 <code class=\"language-text\">input[disabled]</code> 进行选择；</li>\n<li>选择一些带有属性的元素，属性具体的值并不关心。这种情况中，带有某种属性往往表示这类元素同属于一个类型组件，如一组列表中的每个元素，都会有一个子节点上带有 <code class=\"language-text\">title</code> 属性以显示 tooltip，此时就可以通过类似 <code class=\"language-text\">ul li [title]</code> 的方式，将这些文字都选出来，或是进行进一步的选择。</li>\n</ul></section>\n<section><h2>attr=value</h2><p>表示带有以 <code class=\"language-text\">attr</code> 命名的属性，并且该属性的值是 <code class=\"language-text\">value</code>。这个的应用场景比较常见，一般的属性选择都会使用这个方案。值得注意的一点是，由于 CSS 选择器权重的关系，以下两个 CSS 定义是有不同优先级的：</p><div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#id</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">[id=id]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>最终的元素 <code class=\"language-text\">&lt;p id=&quot;id&quot;&gt;Hello World&lt;/p&gt;</code> 显示颜色是红色，而不是蓝色。因为属性选择器的优先级比 id 选择器要低，即使两者表达的意思是一样的。</p></section>\n<section><h2>attr^=prefix</h2><p>这个选择器可以将所有以 <code class=\"language-text\">prefix</code> 开头的 <code class=\"language-text\">attr</code> 属性所在的元素都选出来。<code class=\"language-text\">^</code> 表示开头，这一点和正则表达式中的表述语义是类似的。可以设想这样一个应用场景：</p><p>在某个页面上，可能要根据一组数据显示对应的表单数据。因为每个表单中的输入项都需要一个 label + input 的组合，因而每个 input 可能需要给一个独一无二的 ID（方便 label 上加上 <code class=\"language-text\">for</code> 以绑定两者）。这时候，一个简单的做法，是给每一个表单中固定的输入项，取一个固定的前缀，再加上这个数据本身的 id 值，最终生成一个独一无二的 ID，防止重复。比如，数据 <code class=\"language-text\">{ id: 1, name: &#39;John&#39; }</code> 生成的名字 input 可能为：<code class=\"language-text\">&lt;input id=&quot;user-name-1&quot; /&gt;</code>。</p><p>针对这种情况，如果希望一次性选出所有这些 input，就可以使用属性选择器：<code class=\"language-text\">[id^=user-name]</code>。</p></section>\n<section><h2>attr|=prefix</h2><p>上面的这个例子，也可以用这个属性选择器来进行改写：<code class=\"language-text\">[id|=user-name]</code>。两者都可以定义属性的前缀用于查找元素，但是区别在于，<code class=\"language-text\">|=</code> 的选择器规定的前缀之后一定跟着一个 <code class=\"language-text\">-</code> 字符。因此，<code class=\"language-text\">[id|=user-name]</code> 可以选出 <code class=\"language-text\">&lt;input id=&quot;user-name-1&quot; /&gt;</code> 但是不能选出 <code class=\"language-text\">&lt;input id=&quot;user-name_1&quot; /&gt;</code>。这一点是和上面这个选择器最大的不同。当然，这个选择器最大的应用场景其实还是在选择 <code class=\"language-text\">lang</code> 上，比如将当前页面中所有英文的部分选择出来：<code class=\"language-text\">[lang|=en]</code>，此时，无论是 <code class=\"language-text\">&lt;p lang=&quot;en-US&quot;&gt;Color&lt;/p&gt;</code> 还是 <code class=\"language-text\">&lt;p lang=&quot;en-GB&quot;&gt;Colour&lt;/p&gt;</code> 都可以被正确的选择出来。</p></section>\n<section><h2>attr$=suffix</h2><p>这个选择器可以将所有以 <code class=\"language-text\">suffix</code> 结尾的 <code class=\"language-text\">attr</code> 属性所在的元素都选出来。<code class=\"language-text\">$</code> 表示结尾，这一点和正则表达式中的表述语义是类似的。一个可能的例子是：在 Ant Design 中，<a href=\"https://ant.design/components/icon/\">Icon</a> 组件会根据当前网页的语言，显示 <code class=\"language-text\">aria-label=&quot;icon: right&quot;</code> 或 <code class=\"language-text\">aria-label=&quot;图标: right&quot;</code>。如果要根据当前选择的语言去分别创建选择器，会有一些麻烦，这时候可以考虑直接使用 <code class=\"language-text\">[aria-label$=right]</code> 来进行选择。</p></section>\n<section><h2>attr*=keyword</h2><p>这个选择器可以将所有 <code class=\"language-text\">attr</code> 中带有 <code class=\"language-text\">keyword</code> 字段的元素都选出来。暂时没有遇到什么实际的应用场景，但是可以考虑用作属性的文案检查器。比如，原先的产品名字叫 AAA，但是后期业务调整，名字改成了 BBB，那么下面的 CSS 就可以将所有还没有改过来的元素都标注出来：</p><div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">[class*=AAA], [aria-label*=AAA]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>\n<section><h2>参考文档</h2><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">MDN</a></p></section>","frontmatter":{"date":"2019-09-04","title":"CSS Attribute Selector","category":"CSS"}}},{"node":{"id":"c5f1451a-fb31-5d7c-ae5b-96a946f9546e","html":"<p>当 <code class=\"language-text\">display: inline-block</code> 和 <code class=\"language-text\">overflow: hidden</code> 一起使用的时候，会发现文字的显示比一般正常的情况要“高”一些。举个例子来说：</p>\n<p><span>g<span style=\"display:inline-block;overflow:hidden;color:#f54a45\">o</span>od</span></p>\n<p>上面的四个文字中，第一个 <code class=\"language-text\">o</code> 被设置为 <code class=\"language-text\">display:inline-block</code> 以及 <code class=\"language-text\">overflow:hidden</code>。最终的显示效果，第一个 <code class=\"language-text\">o</code> 的底部明显高于两边的 <code class=\"language-text\">g</code> 和 <code class=\"language-text\">o</code>。</p>\n<p>通过给第一个 <code class=\"language-text\">o</code> 和整行文字画上边框，不难发现，这个文字是整体被抬高了。</p>\n<p><span style=\"border:1px solid #007acc\">g<span style=\"display:inline-block;overflow:hidden;color:#f54a45;border:1px solid #ffe564\">o</span>od</span></p>\n<p>在上面的例子中，<code class=\"language-text\">inline-block</code> 的高度是由 <code class=\"language-text\">line-height</code> 决定的，因而看上去会比 <code class=\"language-text\">inline</code> 情况时候的要高（<code class=\"language-text\">inline</code> 情况下 border 画出来的高度是固定的，由 <code class=\"language-text\">font-family</code> 和 <code class=\"language-text\">font-size</code> 决定）；同时，<code class=\"language-text\">overflow:hidden</code> 会让内容的底部和父元素的文字基线（baseline）持平，从而会让整体的显示结果更高（这一点从上面的显示中不难发现，其中 <code class=\"language-text\">g</code> 的部分有少量是低于基线显示的，可以看到也低于第一个 <code class=\"language-text\">o</code> 的底部区域）。</p>\n<p>因此，在这种情况下，<code class=\"language-text\">line-height</code> 越大，会看到这种情况下的文字越是高，高出来的空白区域主要是 <code class=\"language-text\">line-height</code> 本身比文字大的部分，以及对齐方式不同造成的差异距离。</p>\n<p>上述这种情况，想要正确的对齐，只需要修改垂直对齐的方式就可以了。设置 <code class=\"language-text\">vertical-align:bottom</code> 后的结果：</p>\n<p><span>g<span style=\"display:inline-block;overflow:hidden;color:#f54a45;vertical-align:bottom\">o</span>od</span></p>\n<p>符合预期。</p>","frontmatter":{"date":"2019-08-19","title":"Overflow & InlineBlock","category":"CSS"}}},{"node":{"id":"0e6f50b7-7967-52db-a980-265ce599cacd","html":"<p><code class=\"language-text\">object-fit</code> 这个 CSS 样式，是针对<strong>可替换元素</strong>（replaced element）设计的。一般来说，常见的可替换元素包含图片（<code class=\"language-text\">img</code>）或是视频（<code class=\"language-text\">video</code>）。这些可替换元素的大小是事先不确定的，在实际展示的时候，需要一定的规则来决定元素实际如何被放置到元素框中去。</p>\n<p>以下是几种 <code class=\"language-text\">object-fit</code> 的值及对应的显示效果（每种类型显示两个图片，第一张图片的原始尺寸大于元素显示的尺寸，第二张图片的原始尺寸小于元素显示的尺寸）：</p>\n<style>\np.container-2019-07-01 {\n  display: flex;\n  justify-content: center;\n}\np.container-2019-07-01 a {\n  box-shadow: none;\n}\np.container-2019-07-01 a img {\n  width: 500px;\n  height: 400px;\n  border: 3px solid red;\n  display: block;\n}\n</style>\n<section><h2>fill</h2><p class=\"container-2019-07-01\">\n  <a href=\"../../baseline-jpeg-demo.jpeg\" target=\"_blank\">\n    <img src=\"../../baseline-jpeg-demo.jpeg\" title=\"big image\" alt=\"big image\" style=\"object-fit:fill\" />\n  </a>\n</p>\n<p class=\"container-2019-07-01\">\n  <a href=\"../../favicon.ico\" target=\"_blank\">\n    <img src=\"../../favicon.ico\" title=\"small image\" alt=\"small image\" style=\"object-fit:fill\" />\n  </a>\n</p><ul>\n<li>宽高比例：不保持</li>\n<li>显示范围：占满元素</li>\n<li>可能影响：显示结果宽高比失真；显示结果比原始尺寸大</li>\n</ul></section>\n<section><h2>contain</h2><p class=\"container-2019-07-01\">\n  <a href=\"../../baseline-jpeg-demo.jpeg\" target=\"_blank\">\n    <img src=\"../../baseline-jpeg-demo.jpeg\" title=\"big image\" alt=\"big image\" style=\"object-fit:contain\" />\n  </a>\n</p>\n<p class=\"container-2019-07-01\">\n  <a href=\"../../favicon.ico\" target=\"_blank\">\n    <img src=\"../../favicon.ico\" title=\"small image\" alt=\"small image\" style=\"object-fit:contain\" />\n  </a>\n</p><ul>\n<li>宽高比例：保持</li>\n<li>显示范围：至少一轴占满，整体（另一轴）不超过元素</li>\n<li>可能影响：出现黑边（<a href=\"https://en.wikipedia.org/wiki/Letterboxing_(filming)\">letterboxed</a>）；显示结果比原始尺寸大</li>\n</ul></section>\n<section><h2>cover</h2><p class=\"container-2019-07-01\">\n  <a href=\"../../baseline-jpeg-demo.jpeg\" target=\"_blank\">\n    <img src=\"../../baseline-jpeg-demo.jpeg\" title=\"big image\" alt=\"big image\" style=\"object-fit:cover\" />\n  </a>\n</p>\n<p class=\"container-2019-07-01\">\n  <a href=\"../../favicon.ico\" target=\"_blank\">\n    <img src=\"../../favicon.ico\" title=\"small image\" alt=\"small image\" style=\"object-fit:cover\" />\n  </a>\n</p><ul>\n<li>宽高比例：保持</li>\n<li>显示范围：至少一轴占满，整体（另一轴）可以超过元素</li>\n<li>可能影响：超出显示范围；显示结果比原始尺寸大</li>\n</ul></section>\n<section><h2>none</h2><p class=\"container-2019-07-01\">\n  <a href=\"../../baseline-jpeg-demo.jpeg\" target=\"_blank\">\n    <img src=\"../../baseline-jpeg-demo.jpeg\" title=\"big image\" alt=\"big image\" style=\"object-fit:none\" />\n  </a>\n</p>\n<p class=\"container-2019-07-01\">\n  <a href=\"../../favicon.ico\" target=\"_blank\">\n    <img src=\"../../favicon.ico\" title=\"small image\" alt=\"small image\" style=\"object-fit:none\" />\n  </a>\n</p><ul>\n<li>宽高比例：保持</li>\n<li>显示范围：原始尺寸</li>\n<li>可能影响：超出显示范围</li>\n</ul></section>\n<section><h2>scale-down</h2><p class=\"container-2019-07-01\">\n  <a href=\"../../baseline-jpeg-demo.jpeg\" target=\"_blank\">\n    <img src=\"../../baseline-jpeg-demo.jpeg\" title=\"big image\" alt=\"big image\" style=\"object-fit:scale-down\" />\n  </a>\n</p>\n<p class=\"container-2019-07-01\">\n  <a href=\"../../favicon.ico\" target=\"_blank\">\n    <img src=\"../../favicon.ico\" title=\"small image\" alt=\"small image\" style=\"object-fit:scale-down\" />\n  </a>\n</p><p>使用 <code class=\"language-text\">none</code> 或者 <code class=\"language-text\">contain</code> 的规则进行显示。具体选择哪个规则，要看两个规则生成的最终效果，哪一个更小。换句话说，如果元素的原始尺寸两轴都小于元素的显示范围，就使用 <code class=\"language-text\">none</code> 进行显示，显示结果是原始元素的原始尺寸；否则就是用 <code class=\"language-text\">contain</code> 的方式进行显示，用黑边的方式将元素压缩到显示范围内完整显示。</p></section>","frontmatter":{"date":"2019-07-01","title":"object-fit","category":"CSS"}}},{"node":{"id":"c1e0e19d-211f-5f73-b70a-37e1cd5250e8","html":"<p>由于系统的差异，不同的电脑上存在的字体是不一样的。为了网站的效果可以兼顾各个设备，一般在写 CSS 的时候，<code class=\"language-text\">font-family</code> 总是很长的一串。通过字体 fallback 的功能，让浏览器自行选择最先能匹配到的字体文件，从而保证显示的效果大体上接近于视觉效果图。在实际书写中，有一个值得注意的细节：<strong>英文字体应该在中文字体的前面</strong>。</p>\n<p>中文字体文件往往包含英文字符，但是这些英文字符的样式很可能并不是设计师希望看到的。如果中文字体展示在英文字体的前面，英文字体就没法被使用到，导致最终的效果略有偏差。下面展示了中文字体 PingFang SC 和苹果默认英文系统字体（SF NS Display）针对英文字母的渲染效果（需要在 MacOS 下查看）：</p>\n<style>\n.pingfang-sc {\n  font-family: 'PingFang SC';\n  font-size: 3em;\n}\n.default-font {\n  font-family: -apple-system, BlinkMacSystemFont;\n  font-size: 3em;\n}\n</style>\n<p><span class=\"pingfang-sc\">ffi</span></p>\n<p><span class=\"default-font\">ffi</span></p>\n<p>所以，应该写：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>\n    -apple-system<span class=\"token punctuation\">,</span> BlinkMacSystemFont<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Segoe UI'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Helvetica Neue'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'PingFang SC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Microsoft YaHei'</span><span class=\"token punctuation\">,</span>\n    sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而不是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.example</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span>\n    <span class=\"token string\">'PingFang SC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Microsoft YaHei'</span><span class=\"token punctuation\">,</span>\n    -apple-system<span class=\"token punctuation\">,</span> BlinkMacSystemFont<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Segoe UI'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Helvetica Neue'</span><span class=\"token punctuation\">,</span> Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span>\n    sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，<code class=\"language-text\">-apple-system, BlinkMacSystemFont</code> 针对苹果下的 Safari 和 Chrome 内核调用系统自带字体，对应到的英文字体是 SF (SF NS Display)，中文字体是 PingFang (PingFang SC)。</p>","frontmatter":{"date":"2019-06-05","title":"Order of font-family","category":"CSS"}}},{"node":{"id":"26dadd1a-c817-510f-93ad-ed148fd87706","html":"<p><code class=\"language-text\">prefers-color-scheme</code> 这个 Media Query 可以用于检测当前的操作系统是否选择了 Dark Mode。这是一个依然处于初始草案阶段的功能（见 <a href=\"https://drafts.csswg.org/mediaqueries-5/#descdef-media-prefers-color-scheme\">Draft</a>），不过 Safari (12.1) / Chrome (76) / Firefox (67) 的最新版本都已经做了支持。</p>\n<p>示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-color-scheme</span><span class=\"token punctuation\">:</span> dark<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #333<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\">:not(pre) > code[class*=\"language-\"]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span>229<span class=\"token punctuation\">,</span>100<span class=\"token punctuation\">,</span>0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面是一个可编辑的 CSS 代码，可以直接试一试：</p>\n<style>\nstyle.editable-style {\n  display: block;\n}\n</style>\n<p></p>\n<div class=\"gatsby-highlight\" style=\"border:1px solid red\">\n<pre class=\"language-css\"><code class=\"language-css\"><style contenteditable class=\"editable-style\">@media (prefers-color-scheme: dark) { body { /* try here */ } }</style></code></pre>\n</div>\n<p></p>\n<p>注：上面这段代码是可改的，修改后的 CSS 会直接生效。但是由于 <code class=\"language-text\">contenteditable</code> 的限制，所有代码需要在一行内完成。</p>\n<p>除了 <code class=\"language-text\">dark</code> 之外，<code class=\"language-text\">prefers-color-scheme</code> 可以接受的属性还有 <code class=\"language-text\">light</code> 和 <code class=\"language-text\">no-preference</code> 两种。其中，<code class=\"language-text\">light</code> 表示用户选择的是 Light 模式，<code class=\"language-text\">no-preference</code> 表示用户并没有做选择。</p>\n<p>在 JavaScript 中，也可以通过下面的代码来判断当前是否是 Dark Mode：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> ifDarkMode <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: dark)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">;</span></code></pre></div>\n<p>注：从当前的实验结果来看，<code class=\"language-text\">matchMedia</code> 的结果用 <code class=\"language-text\">.addListener</code> 注册回调事件并不能生效（Safari 12 测试）。</p>\n<p>如果图片的展示也需要区分，<code class=\"language-text\">mediaQuery</code> 也可以帮上忙：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-night.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(prefers-color-scheme: dark)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mojave-day.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"date":"2019-05-24","title":"CSS for Dark Mode","category":"CSS"}}},{"node":{"id":"0798e06b-d2a2-58f3-a959-9d302f52ebf6","html":"<p>传统的 CSS filter，可以对当前的元素应用指定的滤镜。以模糊（blur）滤镜为例，常常会被拿来实现毛玻璃的效果。然而，因为滤镜只能应用于元素自身，所以毛玻璃的效果也是局限性很大的。一个常见的做法是，背景图片在当前元素中用 background-image 的方式再赋值一次，然后通过定位对齐，再加上 blur 的效果。这样看上去，中间一块的图片就好像有了模糊的效果。</p>\n<p>一个例子：</p>\n<style>\n.container {\n  width: 620px;\n  height: 414px;\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  position: relative;\n  margin: 0 auto;\n}\n.filter {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 310px;\n  height: 207px;\n}\n@supports (-webkit-backdrop-filter: blur(10px)) or (-webkit-backdrop-filter: sepia() hue-rotate(120deg)) {\n  span.not-supported {\n    display: none;\n  }\n}\n</style>\n<p>\n  <div class=\"filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.filter-container .filter {\n  background-image: url(\"../../baseline-jpeg-demo.jpeg\");\n  background-size: 620px 414px;\n  background-position: -155px -103.5px;\n  filter: sepia() hue-rotate(120deg);\n}\n.filter-container .filter:hover {\n  filter: blur(10px);\n}\n</style>\n<p>HTML 结构是：</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>CSS 是：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 620px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>\"../../baseline-jpeg-demo.jpeg\"<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 310px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 207px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>\"../../baseline-jpeg-demo.jpeg\"<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 620px 414px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> -155px -103.5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然而，显然这样的局限性是很大的。css backdrop filter 就是为了打破这种局限性。有了 css backdrop filter，当前元素的滤镜会加到当前元素下面的所有元素上，而不仅仅是自身的元素。</p>\n<p>上面例子的改写<span class=\"not-supported\">（注意：当前浏览器不支持 backdrop-filter 功能）</span>：</p>\n<p>\n  <div class=\"backdrop-filter-container\">\n    <div class=\"container\">\n      <div class=\"filter\"></div>\n    </div>\n  </div>\n</p>\n<style>\n.backdrop-filter-container .filter {\n  -webkit-backdrop-filter: sepia() hue-rotate(120deg);\n}\n.backdrop-filter-container .filter:hover {\n  -webkit-backdrop-filter: blur(10px);\n}\n</style>\n<p>HTML 保持不变，CSS 改动为：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.filter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">sepia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hue-rotate</span><span class=\"token punctuation\">(</span>120deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.filter:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">-webkit-backdrop-filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>10px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，需要加 filter 的部分，没有做额外特殊的处理（比如背景图片的配适），就可以直接使用。简洁明了。</p>\n<p>另外，鼠标悬停之后可以看到模糊效果的展示。使用 filter 和使用 backdrop-filter 的展示效果也是略有不同的。主要是，用 filter 这种方案，背后还是有图片的，所以当前景图片模糊之后，边缘部分，后面背景的图片会显示出来，效果有折扣。（如果需要处理，简单的做法是，加大 blur 元素的宽高，然后用 <code class=\"language-text\">overflow:hidden</code> 把整体显示出来的大小限定回原来需要的大小，这样边缘部分相当于被裁剪了）</p>\n<p>当然，css backdrop filter 目前的支持还非常有限。除了 Safari 和 Edge，基本没有浏览器支持。具体可以看 <a href=\"https://caniuse.com/#feat=css-backdrop-filter\">Caniuse</a>。</p>\n<p>在 Electron 中，可以通过下面的方法让打开 backdrop-filter 的支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">BrowserWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webPreferences<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    enableBlinkFeatures<span class=\"token punctuation\">:</span> <span class=\"token string\">'CSSBackdropFilter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Chrome 对 backdrop filter 的支持进展可以看这个 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=520585\">Issue</a></p>","frontmatter":{"date":"2019-05-04","title":"css backdrop filter","category":"CSS"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"category":"CSS"}}}