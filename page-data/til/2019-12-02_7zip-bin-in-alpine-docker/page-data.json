{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-12-02_7zip-bin-in-alpine-docker","result":{"data":{"markdownRemark":{"id":"1f47e54e-3226-5831-b830-c394c36ddda6","html":"<p>Node.js 的 Docker 有基于 Alpine 的版本。在这个 Docker 中使用 <a href=\"https://github.com/develar/7zip-bin\">7zip-bin</a> 库的时候遇到了错误，无法正常启动。</p>\n<p>一个简单的重现 <code class=\"language-text\">Dockerfile</code> 可以这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> node<span class=\"token punctuation\">:</span>10<span class=\"token punctuation\">-</span>alpine\n\n<span class=\"token keyword\">RUN</span> mkdir <span class=\"token punctuation\">-</span>p example &amp;&amp; \\\n  cd example &amp;&amp; \\\n  yarn init <span class=\"token punctuation\">-</span>y &amp;&amp; \\\n  yarn add 7zip<span class=\"token punctuation\">-</span>bin &amp;&amp; \\\n  mkdir /lib64 &amp;&amp; \\\n  ln <span class=\"token punctuation\">-</span>s /lib/libc.musl<span class=\"token punctuation\">-</span>x86_64.so.1 /lib64/ld<span class=\"token punctuation\">-</span>linux<span class=\"token punctuation\">-</span>x86<span class=\"token punctuation\">-</span>64.so.2\n\n<span class=\"token keyword\">ADD</span> run.sh /run.sh\n\n<span class=\"token keyword\">RUN</span> chmod +x /run.sh\n\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/run.sh\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>其中，<code class=\"language-text\">run.sh</code> 可以写：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> example\n<span class=\"token variable\"><span class=\"token variable\">$(</span>node -e \"console.log<span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">(</span><span class=\"token string\">'7zip-bin'</span><span class=\"token punctuation\">)</span>.path7za<span class=\"token variable\">)</span></span>\"<span class=\"token punctuation\">)</span></code></pre></div>\n<p>报错的内容是：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">/run.sh: line 2: /example/node_modules/7zip-bin/linux/x64/7za: not found</code></pre></div>\n<p>通过进入 Docker 内部观察不难发现，<code class=\"language-text\">/example/node_modules/7zip-bin/linux/x64/7za</code> 这个文件实际是真实存在的，但是在使用的时候系统却报错 <code class=\"language-text\">not found</code>。造成这一问题的原因，可能是动态库缺失。</p>\n<p>通过 <code class=\"language-text\">ldd</code> 命令可以列出动态库依赖关系（<a href=\"https://linux.die.net/man/1/ldd\">文档</a>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">ldd /example/node_modules/7zip-bin/linux/x64/7za</code></pre></div>\n<p>输出结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">/lib64/ld-linux-x86-64.so.2 (0x7febe540e000)\nlibpthread.so.0 =&gt; /lib64/ld-linux-x86-64.so.2 (0x7febe540e000)\nlibstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x7febe52b9000)\nlibm.so.6 =&gt; /lib64/ld-linux-x86-64.so.2 (0x7febe540e000)\nlibgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x7febe52a5000)\nlibc.so.6 =&gt; /lib64/ld-linux-x86-64.so.2 (0x7febe540e000)</code></pre></div>\n<p>注意到缺少了 <code class=\"language-text\">/lib64/ld-linux-x86-64.so.2</code> 这个动态库，因此导致了 <code class=\"language-text\">7zip-bin</code> 这个库无法正常使用。造成这个的原因是，Alpine 使用的是 <a href=\"https://www.musl-libc.org/\">musl</a>，而 <code class=\"language-text\">7zip-bin</code> 使用的二进制文件是基于 glibc 编译出来的。要解决这个问题，有两种思路：</p>\n<ol>\n<li>在 Alpine 中安装 libc 的兼容库：<code class=\"language-text\">RUN apk add --no-cache libc6-compat</code>；</li>\n<li>或者，<code class=\"language-text\">ln -s /lib/libc.musl-x86_64.so.1 /lib/ld-linux-x86-64.so.2</code> 将 musl 的版本软连过去，直接让 <code class=\"language-text\">7zip-bin</code> 的二进制使用</li>\n</ol>\n<p>当然，最佳的方案是不使用 <code class=\"language-text\">7zip-bin</code> 中的 pre-build 版本，而改用 Alpine 的 <a href=\"https://pkgs.alpinelinux.org/package/edge/main/x86/p7zip\">p7zip</a> 版本。用 Alpine 的包管理器安装好 <code class=\"language-text\">pz7ip</code> 之后（<code class=\"language-text\">apk add p7zip</code>），使用类似下面的代码直接替换脚本就好了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cp</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">type</span> -p 7za<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>node -p <span class=\"token string\">\"require('7zip-bin').path7za\"</span><span class=\"token variable\">)</span></span></code></pre></div>\n<section><h2>参考链接</h2><ul>\n<li>在 7zip-bin issue 中的<a href=\"https://github.com/develar/7zip-bin/issues/8\">相关讨论</a></li>\n<li>重现的配置代码 <a href=\"https://gist.github.com/laysent/b12faceac4bcf10bee04aabfa505c244\">gist</a></li>\n<li>node-gyp 在 Alpine 中也可能会遇到类似的问题，在<a href=\"https://medium.com/devgorilla/node-gyp-support-in-alpine-linux-9374c6191140\">这里</a>可以找到相关的讨论</li>\n</ul></section>","frontmatter":{"title":"7zip-bin in Alpine Docker","category":"Docker","date":"2019-12-02"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-12-02","title":"7zip-bin in Alpine Docker","previous":{"time":"2019-12-01","title":"arguments.callee"},"next":{"time":"2019-12-03","title":"Cost of parsing JSON"}}}}