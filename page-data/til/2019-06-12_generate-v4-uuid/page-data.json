{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-06-12_generate-v4-uuid","result":{"data":{"markdownRemark":{"id":"e68527aa-5b12-5908-891e-1136dfbb4f27","html":"<p><a href=\"https://gist.github.com/jed/982883\">这里</a>有一段生成 UUID v4 非常短小的 JavaScript 代码。虽然有一些注释，但总体上并不是非常的好理解。</p>\n<p>首先，用 TypeScript 翻译一遍原始的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> slot <span class=\"token operator\">=</span> <span class=\"token string\">'10000000-1000-4000-8000-100000000000'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">from</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>to <span class=\"token operator\">-</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> seed <span class=\"token operator\">=</span> input <span class=\"token operator\">===</span> <span class=\"token number\">8</span> <span class=\"token operator\">?</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> seed<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">uuidReplacer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">char<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getRandomChar</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span>char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">uuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> slot<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[018]/g</span><span class=\"token punctuation\">,</span> uuidReplacer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>接下来对原始的代码中的部分做一些解释：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">^</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span> <span class=\"token operator\">>></span> a<span class=\"token operator\">/</span><span class=\"token number\">4</span></code></pre></div>\n<p>这个部分的代码不太好理解。首先，先根据运算符的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\">优先级</a>，给上面这个算式加上帮助理解的括号：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></code></pre></div>\n<p>接下来，再来看每个部分都是什么意思：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16</span></code></pre></div>\n<p>创建了一个 <code class=\"language-text\">0~16</code> 范围内的随机数，<code class=\"language-text\">&gt;&gt; (a / 4)</code> 这个运算之后，会得到几种不同的结果（注意，这里 <code class=\"language-text\">a</code> 只可能是 <code class=\"language-text\">&#39;0&#39;</code>，<code class=\"language-text\">&#39;1&#39;</code>，<code class=\"language-text\">&#39;8&#39;</code> 三种情况）：</p>\n<ul>\n<li><code class=\"language-text\">&#39;0&#39;</code> 或 <code class=\"language-text\">&#39;1&#39;</code> 的时候，结果是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;8&#39;</code> 的时候，等价于 <code class=\"language-text\">&gt;&gt; 2</code>，所以结果是一个 <code class=\"language-text\">0~3</code> 的随机数（整数）</li>\n</ul>\n<p>最后一步异或运算 <code class=\"language-text\">^</code>，得到的可能结果分别是：</p>\n<ul>\n<li><code class=\"language-text\">&#39;0&#39;</code> 的时候，异或结果不变，是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;1&#39;</code> 的时候，异或结果最后一个比特位的值正好相反，最终的结果仍然是 <code class=\"language-text\">0~15</code> 的随机数（整数）</li>\n<li><code class=\"language-text\">&#39;8&#39;</code> 的时候，最终结果是 <code class=\"language-text\">8~11</code> 的随机数（整数）。因为 <code class=\"language-text\">8</code> 的第四位二进制是 <code class=\"language-text\">1</code> 其他都是 <code class=\"language-text\">0</code>，而 <code class=\"language-text\">0~3</code> 这几个数的二进制位数不超过两位，所以位数之间不存在交集，异或运算相当于是 <code class=\"language-text\">8 + n</code>，<code class=\"language-text\">n</code> 是 <code class=\"language-text\">0~3</code> 中的某一个数。最终得到的就是 <code class=\"language-text\">8~11</code> 的随机数（整数）。</li>\n</ul>\n<p>最终，将生成的不超过 16 的整数转化成十六进制的对应字符。</p>\n<p>第二部分的代码用到了正则匹配和替换（注意，这里 <code class=\"language-text\">&#39;4&#39;</code> 没有被替换，依然保留），主要不容易理解的是下面这个部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1e7</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">4e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">8e3</span> <span class=\"token operator\">+</span> <span class=\"token operator\">-</span><span class=\"token number\">1e11</span>    </code></pre></div>\n<p>这里用到了 JavaScript 比较奇怪的类型转化功能。因为最开始是一个数组，所以这里的相加实际上是字符串的拼接。等价于 <code class=\"language-text\">&#39;10000000-1000-4000-8000-100000000000&#39;</code> 这个字符串。上面这样写主要是字符数上比较少。</p>","frontmatter":{"title":"Generate v4 UUID","category":"JavaScript","date":"2019-06-12"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-06-12","title":"Generate v4 UUID","previous":{"time":"2019-06-11","title":"DOM Interface"},"next":{"time":"2019-06-13","title":"Capture Screen Shot with Mac OS"}}}}