{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-07-16_detect-true-encoding-of-file-and-convert","result":{"data":{"markdownRemark":{"id":"c7a15ba7-a5dc-5bc3-bcf8-b0e56e30a319","html":"<p>在 Windows 上，很多文本文件并不是以 UTF-8 的格式进行存储的。比如，中文可能的存储格式是 GB2312 或是 BIG5。这导致，在其他系统中，如果直接以 UTF-8 的格式打开对应的文本文件，就会得到一串乱码。</p>\n<p>如果不知道之前是以什么格式存储的文件，这时就会有点束手无策了。</p>\n<p>一个可行的简单方法是用 VSCode 的“猜测”功能。在 VSCode 中，如果选择 <code class=\"language-text\">Reopen with Encoding</code>，会得到 VSCode 猜测的当前文本编码格式。如果使用新的编码重新打开文本，看到的不再是乱码，那么很可能 VSCode 就猜测正确了。一般建议再以 UTF-8 的格式保存一下，以后再次打开就不会有乱码的困扰了。</p>\n<p>然而，这个方法不适应大规模批量修改的需求。既然如此，不如直接从 VSCode 的源码入手，看看这个文本编码检测的功能是如何实现的。</p>\n<p>VSCode 相关的代码，可以在 <code class=\"language-text\">src/vs/base/node/encoding.ts</code> 中找到，GitHub 的代码在<a href=\"https://github.com/microsoft/vscode/blob/HEAD/src/vs/base/node/encoding.ts\">这里</a>。</p>\n<p>精简后的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jschardet <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jschardet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iconv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iconv-lite'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">JSCHARDET_TO_ICONV_ENCODINGS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'ibm866'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'cp866'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'big5'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'cp950'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> fromPath <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/read/file'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> toPath <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/save/file'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>fromPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> encoding <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> jschardet<span class=\"token punctuation\">.</span><span class=\"token function\">detect</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iconvEncoding <span class=\"token operator\">=</span> <span class=\"token constant\">JSCHARDET_TO_ICONV_ENCODINGS</span><span class=\"token punctuation\">[</span>encoding<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> encoding<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> content <span class=\"token operator\">=</span> iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> iconvEncoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里主要用到了两个库，<code class=\"language-text\">jschardet</code> 和 <code class=\"language-text\">iconv-lite</code>。</p>\n<p><a href=\"https://github.com/aadsm/jschardet\">jschardet</a> 是 Python <a href=\"https://github.com/chardet/chardet\">chardet</a> 的一个 JavaScript 移植版本，用于检测当前的二进制流（Buffer）是什么类型的编码。检测的大致原理，可以在 chardet 的网站上找到（<a href=\"https://chardet.readthedocs.io/en/latest/how-it-works.html\">这里</a>）。</p>\n<p><a href=\"https://github.com/ashtuchkin/iconv-lite\">iconv-lite</a> 用于将二进制流转化成指定编码格式的字符串，是一个纯 JavaScript 的 <code class=\"language-text\">iconv</code> 库。这里 <code class=\"language-text\">iconv</code> 的全称是 internationalization conversion，在类 Unix 系统中，这是一个用于转换不同编码字符串的命令行工具。</p>\n<p>需要注意的是，<code class=\"language-text\">iconv-lite</code> 并不通过编码来区分 UTF-8 和 UTF-8 with BOM，而是通过第二个参数 <code class=\"language-text\">{ addBOM }</code> 来完成的。因此，转化 UTF-8 with BOM 的时候，需要稍微手动处理一下。（处理的方法可以参考 VSCode 中的相关函数，比如 <code class=\"language-text\">encode</code>）</p>\n<p>另外，<code class=\"language-text\">jschardet</code> 和 <code class=\"language-text\">iconv-lite</code> 对编码的命名有些不同，使用前需要转化。上面示例代码中的 <code class=\"language-text\">JSCHARDET_TO_ICONV_ENCODINGS</code> 就是做的这个事情。</p>","frontmatter":{"title":"Detect True Encoding of File and Convert","category":"JavaScript","date":"2019-07-16"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-07-16","title":"Detect True Encoding of File and Convert","previous":{"time":"2019-07-15","title":"Clone Current Tab in Chrome"},"next":{"time":"2019-07-17","title":"console.count"}}}}