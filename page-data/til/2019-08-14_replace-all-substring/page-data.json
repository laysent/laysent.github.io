{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-08-14_replace-all-substring","result":{"data":{"markdownRemark":{"id":"3caff78d-44ef-5789-bfc1-5ef5c4332649","html":"<p>JavaScript 内建的 <code class=\"language-text\">String.prototype.replace</code> 函数，如果传入的第一个参数是字符串，那么替换行为只会发生一次。如果需要将一个字符串内所有某子字符串都替换掉，往往需要一些额外的操作。以下提供一些可行的方案：</p>\n<ol>\n<li>使用循环进行多次替换</li>\n</ol>\n<p>最直观的想法，就是替换完成后通过 <code class=\"language-text\">indexOf</code> 等方案查找字符串，如果还有就继续替换：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> input <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>当然，这并不是一个优雅的解决方案。</p>\n<ol start=\"2\">\n<li>使用正则表达式</li>\n</ol>\n<p><code class=\"language-text\">String.prototype.replace</code> 支持第一个参数传递正则表达式。有了正则表达式，只要设置上 <code class=\"language-text\">g</code> 标签，就可以全局匹配并替换所有的情况了。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方案的劣势在于，如果需要替换的内容中含有某些正则表达式特有的匹配符号，可能会导致非预期的结果。举个例子来说，如果希望把 <code class=\"language-text\">.+</code> 这个字符串替换成 <code class=\"language-text\">+.</code> 这样，上面的函数并不能达到预期的效果，因为 <code class=\"language-text\">.+</code> 在正则表达式中可以匹配任意的字符。<code class=\"language-text\">replace(&#39;hello.+world&#39;, &#39;.+&#39;, &#39;+.&#39;)</code> 的执行结果是 <code class=\"language-text\">+.</code>。</p>\n<ol start=\"3\">\n<li>使用 <code class=\"language-text\">split</code> &#x26; <code class=\"language-text\">join</code></li>\n</ol>\n<p>这是一个比较取巧的方案，先用 <code class=\"language-text\">split</code> 函数将字符串进行拆分，然后再用 <code class=\"language-text\">join</code> 将拆分后的结果重新拼接起来。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个方案代码比较简洁，也不会有正则表达式中提到的问题。虽然计算会产生中间变量（数组），但只要不是频繁或在大规模数据上使用，效率的影响可以忽略不计。</p>","frontmatter":{"title":"Replace All Substring","category":"JavaScript","date":"2019-08-14"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-08-14","title":"Replace All Substring","previous":{"time":"2019-08-13","title":"Glob in NPM"},"next":{"time":"2019-08-15","title":"Download in HTML"}}}}