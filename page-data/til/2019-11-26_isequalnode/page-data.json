{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-11-26_isequalnode","result":{"data":{"markdownRemark":{"id":"7dc217cf-0b7c-5c89-bffe-de976e7fdcfd","html":"<p><code class=\"language-text\">Node.isEqualNode</code> 可以用于比较当前节点（Node）和指定节点是否是相同的。和 <code class=\"language-text\">Node.isSameNode</code> 不同，<code class=\"language-text\">.isEqualNode</code> API 并不需要两个被比较的节点是同一个。只需要满足以下的条件，两个节点就会被认为是相同的：</p>\n<ol>\n<li>两个节点的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\">nodeType</a> 是相同的；</li>\n<li>（省略非 Element 比较的情况，具体细节可以参考 <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">DOM 规范</a>）；</li>\n<li>如果节点是 element 的话，那么对 <code class=\"language-text\">A.isEqualNode(B)</code> 来说，A 中所有的属性，都可以在 B 上找到相同的值（反之亦然）；</li>\n<li>两个节点应该有等长的 <code class=\"language-text\">children</code>；</li>\n<li>两个节点的 <code class=\"language-text\">children</code> 的每个相同位置上的值都是相同的（递归调用 <code class=\"language-text\">isEqualNode</code> 的定义）。</li>\n</ol>\n<p>这里需要说明的几点是：</p>\n<ol>\n<li>在属性判断的时候，并不需要关心顺序：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token string\">'className'</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> className<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first: &lt;div id=\"id\" className=\"className\">&lt;/div></span>\n<span class=\"token comment\">// second: &lt;div className=\"className\" id=\"id\">&lt;/div></span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => true</span></code></pre></div>\n<ol start=\"2\">\n<li>属性的判断是直接对值进行比较的，因此 <code class=\"language-text\">style</code> 的顺序不同会造成结果的不同：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// first: &lt;div style=\"display:block;color:red\">&lt;/div></span>\n<span class=\"token comment\">// second: &lt;div style=\"color:red;display:block\">&lt;/div></span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<ol start=\"3\">\n<li>属性的比较是顺序无关的，但是 <code class=\"language-text\">children</code> 的比较是顺序相关的：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> first <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> second <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childA <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> childB <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">isEqualNode</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => false</span></code></pre></div>\n<ol start=\"4\">\n<li>Node 是 Element 的“父类”，除了一般的 DOM 节点之外，节点上的 attributes，节点中的 comment 等也是 Node。这些节点也有 <code class=\"language-text\">isEqualNode</code> API 可以用于比较。对于一般的 Element 来说，可以简单的认为类型，属性和子节点一样，<code class=\"language-text\">isEqualNode</code> 就会返回 <code class=\"language-text\">true</code>。</li>\n</ol>\n<p>原始的比较算法，可以参考 <a href=\"https://dom.spec.whatwg.org/#concept-node-equals\">DOM 规范</a>；MDN 的介绍在<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode\">这里</a>。</p>","frontmatter":{"title":"isEqualNode","category":"JavaScript","date":"2019-11-26"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-11-26","title":"isEqualNode","previous":{"time":"2019-11-25","title":"isSameNode"},"next":{"time":"2019-11-27","title":"Chunk Group"}}}}