{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-09-05_urlsearchparams","result":{"data":{"markdownRemark":{"id":"03a25784-6757-5c28-9084-94b5270eb170","html":"<p>前端项目，总免不了写一些操作 URL 中 query string 的 API 代码，比如读取当前 URL 中的 query 数据，或是根据一个 Object 对象拼接出一个 query string，等等。</p>\n<p>其实，现代浏览器中已经提供了 <code class=\"language-text\">URLSearchParams</code> 类，可以大大简化这部分的操作，也无需再自己维护一个 <code class=\"language-text\">qs</code> 或是类似的包了。</p>\n<p>以下介绍如何通过 <code class=\"language-text\">URLSearchParams</code> 实现 <code class=\"language-text\">qs.stringify</code> 和 <code class=\"language-text\">qs.parse</code> API 的方法：</p>\n<p><code class=\"language-text\">qs.parse</code> 的方法比较简单，只需要将字符串传递给 <code class=\"language-text\">URLSearchParams</code> 并创建实例就可以了，实例本身自带了 iterator，也提供 <code class=\"language-text\">get</code>，<code class=\"language-text\">keys</code> 等 API 能很方便的获取需要的数据。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> searchParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> param <span class=\"token keyword\">of</span> searchParams<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> param<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要注意的一点是，不论参数传入的字符串是否以 <code class=\"language-text\">?</code> 字符开头，<code class=\"language-text\">URLSearchParams</code> 都默认可以正确处理，不需要像 <code class=\"language-text\">qs</code> 包一样显示的指明给定的字符串是否有 <code class=\"language-text\">?</code> 开头（<code class=\"language-text\">ignoreQueryPrefix</code>）。</p>\n<p>要实现 <code class=\"language-text\">qs.stringify</code> 的功能也不难，<code class=\"language-text\">URLSearchParams</code> 的构造器支持传入一个数组或一个对象，也提供了 <code class=\"language-text\">append</code> API 可以将 key value 一组一组的加入到对象中，最后只要使用 <code class=\"language-text\">toString</code> 拼接出一个完整的字符串就可以了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// result in: `a=b`</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// result in: `c=d&amp;e=f`</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，<code class=\"language-text\">toString</code> 方法得到的字符串，最开头并没有带上 <code class=\"language-text\">?</code> 字符，如果有需要的话，可以自行加上。</p>\n<p>综上，下面的等式是成立的（假定 <code class=\"language-text\">location.search</code> 不是一个空字符串）：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">location<span class=\"token punctuation\">.</span>search <span class=\"token operator\">===</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>当然，<code class=\"language-text\">URLSearchParams</code> 在某些场景下还是不能替换 <code class=\"language-text\">qs</code> 之类的库，比如：</p>\n<ol>\n<li>项目需要支持老浏览器，如 IE 时。<code class=\"language-text\">URLSearchParams</code> 的浏览器支持情况见：<a href=\"https://caniuse.com/#search=URLSearchParams\">CanIUse</a>，总体来说，现代的浏览器都已经支持了，但是 IE 完全没有。</li>\n<li>需要使用一些比较冷门的解析功能时，如 <code class=\"language-text\">qs</code> 提供了很多复杂的解析方案（详情见<a href=\"https://www.npmjs.com/package/qs\">文档</a>）</li>\n</ol>\n<p>但总体来说，绝大部分的应用场景下，<code class=\"language-text\">URLSearchParams</code> 都可以轻松应对，不需要额外的库进行志愿了。</p>\n<p>更多关于 <code class=\"language-text\">URLSearchParams</code> 的介绍，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\">MDN</a>，<a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams?hl=en\">Easy URL Manipulation with URLSearchParams</a> 或 <a href=\"https://url.spec.whatwg.org/#urlsearchparams\">WHATWG Spec</a>。</p>","frontmatter":{"title":"URLSearchParams","category":"JavaScript","date":"2019-09-05"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-09-05","title":"URLSearchParams","previous":{"time":"2019-09-04","title":"CSS Attribute Selector"},"next":{"time":"2019-09-06","title":"Copy out of Docker"}}}}