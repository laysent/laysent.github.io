{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-08-29_conditional-props-in-react","result":{"data":{"markdownRemark":{"id":"eaaeec73-6699-5bf9-b4b2-fec94aeecd0b","html":"<p>在 React 中，经常会有这样的场景：通过某一个参数是否是真值，来决定某一个元素是否需要显示出来。</p>\n<p>以 Ant Design 为例，<a href=\"https://ant.design/components/tooltip/\">Tooltip</a> 的定义中，就包含了 <code class=\"language-text\">title</code> 这个参数，用于决定是否显示 Tooltip 及显示什么。如果传递的是 <code class=\"language-text\">false</code>，<code class=\"language-text\">null</code> 或者 <code class=\"language-text\">undefined</code>，那么最终 Tooltip 就不会被显示出来。</p>\n<p>常用的调用形式可能如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>hide <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>在最初 Ant Design 对此的定义上，使用了如下的 TypeScript 类型定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  title<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token operator\">|</span> RenderFunction<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里，<code class=\"language-text\">title</code> 的定义用到了“可选参数”。看上去，是符合预期的行为，然而这里有几个细节值得注意：</p>\n<ol>\n<li><code class=\"language-text\">React.ReactNode</code> 的定义是：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ReactNode <span class=\"token operator\">=</span>\n  ReactChild <span class=\"token operator\">|</span> ReactFragment <span class=\"token operator\">|</span> ReactPortal <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> undefined<span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到，即使不是可选参数，<code class=\"language-text\">undefined</code> 等一系列值也是可以赋予给 <code class=\"language-text\">title</code> 的；</p>\n<ol start=\"2\">\n<li><code class=\"language-text\">title?: string</code> 和 <code class=\"language-text\">title: string | undefined</code> 之间存在着细微的差别。</li>\n</ol>\n<p>这里展开对比一下 <code class=\"language-text\">title?: string</code> 和 <code class=\"language-text\">title: string | undefined</code> 之间的细微差别。如果定义的类型是 <code class=\"language-text\">title?: string</code>，那么，以下的调用方式都是正确的：</p>\n<ol>\n<li>传递字符串作为参数：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ol start=\"2\">\n<li>传递 <code class=\"language-text\">undefined</code> 作为参数：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<ol start=\"3\">\n<li>不传递参数：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Tooltip</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>而如果是 <code class=\"language-text\">title: string | undefined</code>，那么上面的第三种方案（即不传参数）就是不可行的。</p>\n<p>还是以 Tooltip 为例，显然前两种调用方法都是真实存在的场景，毕竟 Tooltip 可能是需要根据外部条件来选择性展示的；但是对于第三种场景，即不提供 <code class=\"language-text\">title</code> 数据、一直保持不渲染 Tooltip 的状态，可以认为是有错误的，应该由 TypeScript 进行检查并报错。</p>\n<p>故，改成以下这种形式就可以了，毕竟 <code class=\"language-text\">React.ReactNode</code> 就允许了 <code class=\"language-text\">undefined</code> 的使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  title<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token operator\">|</span> RenderFunction<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ant Design 对这种情况进行了<a href=\"https://github.com/ant-design/ant-design/pull/18515\">修正</a>。</p>","frontmatter":{"title":"Conditional Props in React","category":"TypeScript","date":"2019-08-29"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-08-29","title":"Conditional Props in React","previous":{"time":"2019-08-28","title":"Cypress No Internet"},"next":{"time":"2019-09-02","title":"ESlint for TypeScript"}}}}