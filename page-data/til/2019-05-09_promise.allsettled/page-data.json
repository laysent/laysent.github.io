{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-05-09_promise.allsettled","result":{"data":{"markdownRemark":{"id":"683b3848-8eb5-5274-8d09-afff4543ca05","html":"<p>Promise.allSettled 已经在 Chrome 76 中上线了。</p>\n<p>一个简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * output:\n     * [\n     *   { status: 'fulfilled', value: 'fulfilled' },\n     *   { status: 'rejected', reason: 'rejected' },\n     * ]\n     */</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只有所有数组中的 Promise 的结果不再是 <code class=\"language-text\">pending</code>，<code class=\"language-text\">.allSettled</code> 才会返回结果。</p>\n<p>和 <code class=\"language-text\">.all</code>，<code class=\"language-text\">.race</code> 两个 API 最大的区别在于，<code class=\"language-text\">.allSettled</code> 不会提前结束。<code class=\"language-text\">.all</code> 会在任意一个 Promise <code class=\"language-text\">reject</code> 的时候失败，而 <code class=\"language-text\">.race</code> 则会在任意一个 Promise <code class=\"language-text\">fulfilled</code> 的时候成功。<code class=\"language-text\">.allSettled</code> 会等到所有结果都出来之后，再如实返回（以 <code class=\"language-text\">fulfilled</code> 的状态）。</p>\n<p>需要注意的是，返回的结果是一个数组，其中的每一个元素都是一个对象。其中，每个对象都有 <code class=\"language-text\">status</code> 的字段，表示对应的 Promise 最终的结果是 <code class=\"language-text\">fulfilled</code> 还是 <code class=\"language-text\">rejected</code>。如果是 <code class=\"language-text\">fulfilled</code> 状态，那么对象会有 <code class=\"language-text\">value</code> 字段，值相当于 <code class=\"language-text\">.then</code> 回调中的第一个参数；如果是 <code class=\"language-text\">rejected</code> 状态，那么对象会有 <code class=\"language-text\">reason</code> 字段，值相当于 <code class=\"language-text\">.catch</code> 回调中的第一个参数。</p>","frontmatter":{"title":"Promise.allSettled","category":"JavaScript","date":"2019-05-09"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-05-09","title":"Promise.allSettled","previous":{"time":"2019-05-08","title":"debuglog in node.js"},"next":{"time":"2019-05-10","title":"download third party resource"}}}}