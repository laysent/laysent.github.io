{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-08-20_inspect-element-after-mouseenter","result":{"data":{"markdownRemark":{"id":"c57bde4a-6b6b-53ad-91ee-62bfa1c36350","html":"<p>在前端组件中，有不少组件对鼠标的响应并不是通过 CSS 的 hover 来触发的，而是通过 JavaScript 监听对应的鼠标事件，然后再进一步修改 DOM 的结构。比如，Ant Design 中的 <a href=\"https://ant.design/components/popover/\">Popover</a> 控件，在鼠标移上去后，会在 DOM 中插入一组元素，并在鼠标移开后删除。</p>\n<p>在这种情况下，一旦出现样式上的问题，就不容易在 DevTool 中对样式进行查看了。因为只要一点击右键审查元素，Popover 的内容很可能就会因为触发了鼠标事件而消失不见。</p>\n<p>对于这种情况，没法直接用 DevTool 中的 CSS 模拟来强制样式显示。如果需要通过触发事件来触发 DOM 的修改机制（不论是 <code class=\"language-text\">dispatchEvent</code> 还是在 React Extension 中触发回调），总体上是比较麻烦的。因为组件的层级结构很可能很复杂，知道应该往哪儿触发什么事件，也不是个容易的事情。</p>\n<p>既然从程序的角度触发比较复杂，不如换个思路，考虑从行为的角度来触发。比如，如果是通过鼠标悬停触发的样式修改，那么就直接通过这种行为来触发。唯一的问题是：应该如何保持这种样式，不在鼠标离开的时候被重制（否则就没法在 DevTool 里进行查看了）。</p>\n<p>这种时候，有一个简单的方法可以“暂停”浏览器。在 Console 中输入：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">debugger</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>就会在三秒后触发 <code class=\"language-text\">debugger</code>，从而暂停 JavaScript 的执行。这时候，鼠标离开的事件不会得到响应，也就可以安心在 DevTool 中对样式进行仔细的查看和调整了。</p>\n<p>当然，这里触发 <code class=\"language-text\">debugger</code> 的方式可以根据实际情况来写。只要保证在 DOM 改变后触发 <code class=\"language-text\">debugger</code> 就可以了。</p>","frontmatter":{"title":"Inspect Element after MouseEnter","category":"Chrome","date":"2019-08-20"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-08-20","title":"Inspect Element after MouseEnter","previous":{"time":"2019-08-19","title":"Overflow & InlineBlock"},"next":{"time":"2019-08-21","title":"Seeding Search in VSCode"}}}}