{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-12-05_export-was-not-found","result":{"data":{"markdownRemark":{"id":"202b1c1f-e486-5449-863c-b7cad49cf68a","html":"<p>在使用 TypeScript + Webpack 的项目中，可能会遇到如下类似的报错：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">WARNING in ./src/xxx.tsx 346:0-62\n&quot;export &#39;xxx&#39; was not found in &#39;./xxxx&#39;</code></pre></div>\n<p>这类报错出现的情况是，在 <code class=\"language-text\">./scr/xxx.tsx</code> 文件中，先 <code class=\"language-text\">import</code> 了一个类型定义，然后又将这个类型定义重新 <code class=\"language-text\">export</code> 出去了。产生报错的原因在于，TypeScript 的文件需要通过 loader（无论是 babel-loader 还是 ts-loader）转化成 Webpack 可识别的 JavaScript 文件。在转化之后，TypeScript 中定义的纯类型（如 interface）都丢失了。正因为这些类型丢失了，在试图重新 <code class=\"language-text\">export</code> 的时候，Webpack 就无法找到对应的定义，只能报错（Warning）了。</p>\n<p>可以考虑通过以下的方案避免警告：</p>\n<ol>\n<li>将所有的类型定义放到单独的文件（比如 <code class=\"language-text\">types.ts</code> 中），然后通过 <code class=\"language-text\">export * from &#39;types.ts&#39;</code> 一次性将所有内容 export 出去（这样可以避免具体声明需要 export 的内容）；</li>\n<li>重新在当前文件中定义一个类型，然后将这个类型 export 出去：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Type <span class=\"token keyword\">as</span> _Type <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> _Type<span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 TypeScript 3.7 之前，上面的代码可以简写为：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Type <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./type'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> Type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 3.7 及之后的版本中，必须保证新定义的类型名称和原来的类型名称不同。这是因为在 TypeScript 3.7 中对类型定义做了调整，在提供更强大的递归引用类型功能的同时，不再允许定义同名的类型。相关的介绍，可以查看官方的<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#more-recursive-type-aliases\">发布文档</a>。</p>","frontmatter":{"title":"Export was Not Found","category":"TypeScript","date":"2019-12-05"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-12-05","title":"Export was Not Found","previous":{"time":"2019-12-04","title":"Rendered Fonts"},"next":null}}}