{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-09-16_download-chunk-via-serviceworker","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"markdownRemark":{"id":"94771edf-9925-57ce-9664-d4ad9901aa9c","html":"<p>现在 Web 端的视频播放，大多采用基于 <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\">HLS</a> 或是 <a href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\">MPEG Dash</a> 的方案，将视频内容分解成一系列小型 HTTP 文件片段，每段都包含很短长度的可播放片段，由前端逐个拉取片段并播放，最终形成完整的播放视频。</p>\n<p>对于一些云存储网站来说，也可以通过类似的方案来为用户提供下载服务。在分片下载文件的过程中，服务商可以对下载的用户进行校验。同时，由于需要分段下载内容并拼接，避免了单一 URL 造成盗链等问题。然而，一个用户体验的问题是，这种形式的下载如何可以给用户一个更好的用户体验：显然不能将分段的下载内容直接呈现给用户，用户也不应该关心这些分片的内容；如果要等到前端将所有内容下载完成并拼接后再呈现给客户，那么在文件较大的时候会让用户等待很久，用户体验不佳。</p>\n<p>这时候，就可以用到 Service Worker 的 Proxy 功能了，可以在前端进行拼接数据的过程中，给用户等同于一般下载文件的体验。</p>\n<p>大致的流程代码如下：</p>\n<p>首先，需要在 Service Worker 和 Main 线程见建立一个通信机制。比如，可以选择使用 MessageChannel。在 Main 线程创建一个 MessageChannel，然后将 Channel 发送给 Service Worker。之后两者通过这个 Channel 进行数据的沟通（主要是 Main 将下载好的文件片段发送给 Service Worker）。</p>\n<p>接着，在 Service Worker 端的 MessageChannel 收到新的数据之后，创建一个 ReadableStream 并将数据写入这个 Stream。</p>\n<p>最后，Main 会通过 JavaScript 访问一个不存在的下载链接，里面应该包含一个 ID，用于指明需要的文件具体是哪一个（主要是考虑到多个文件同时下载的情况）。Service Worker 通过 fetch 事件拦截这个请求，并通过 URL 中的 ID 找到对应的 ReadableStream，并将这个 Stream 作为 Response 返回。这样，在浏览器的下载页面就可以看到该文件正在被下载。和原生的下载体验一致，这里也可以看到下载的名称、当前的速度、剩余的时间等信息。</p>\n<p>如此，一个完整的流程就走完了。前端下载文件分片，将分片数据发送给 Service Worker，Service Worker 收到数据之后，将数据写入到 ReadableStream 中去；同时，这个 ReadableStream 以 Response 的形式返回给 Main 线程，将这个拼接中的文件逐步下载到本地。</p>\n<p>Fetch 事件的代理代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onfetch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> url <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 跳过一般的请求</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isDownloadUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/octet-stream; charset=UTF-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 获取 URL 中的 ID 数据</span>\n  <span class=\"token comment\">// 相当于 Main 线程通过 URL 传递参数给 Service Worker，用于表示想要下载的具体数据</span>\n  <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">getDownloadFileID</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> streamInfo <span class=\"token operator\">=</span> streamMapping<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>streamInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 没有找到数据的情况，返回 404</span>\n    <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token punctuation\">,</span>\n      status<span class=\"token punctuation\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n      statusText<span class=\"token punctuation\">:</span> <span class=\"token string\">'Not Found'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> filename <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> streamInfo<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Content-Disposition 中的 filename 必须是 US-ASCII</span>\n  <span class=\"token comment\">// http://tools.ietf.org/html/rfc2183#section-2.3</span>\n  <span class=\"token keyword\">const</span> asciiName <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/[^\\x20-\\x7e\\xa0-\\xff]/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 通过 filename*=UTF-8''xxx 这样的方式，可以让浏览器使用 UTF-8 的文件名</span>\n  <span class=\"token keyword\">const</span> encodedName <span class=\"token operator\">=</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/['()]/g</span><span class=\"token punctuation\">,</span> escape<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\*/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%2A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token string\">`attachment; filename=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>asciiName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"; filename*=UTF-8''</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>encodedName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>streamInfo<span class=\"token punctuation\">.</span>filesize<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'X-Content-Type-Options'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nosniff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 将 Service Worker 中的 stream 作为 Response 返回</span>\n  <span class=\"token comment\">// 只要 Stream 没有完结，浏览器的下载行为就会继续，直到 Stream 停止</span>\n  <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    headers\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关于上面代码的两个延伸阅读：</p>\n<ol>\n<li>虽然 Content-Disposition 默认只能写 ASCII 的文件名，但是 UTF-8 的文件名也是可以设置的。关于 <code class=\"language-text\">filename*=UTF-8&#39;&#39;xxx</code> 这种设置方案，在 <a href=\"https://stackoverflow.com/questions/93551/how-to-encode-the-filename-parameter-of-content-disposition-header-in-http\">StackOverflow</a> 上有相关讨论</li>\n<li><code class=\"language-text\">X-COntent-Type-Options</code> 设置为 <code class=\"language-text\">nosniff</code> 可以阻止浏览器的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing\">MIME 类型嗅探</a>，更多讨论可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options\">MDN</a></li>\n</ol>\n<p>创建和使用 Stream 的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadableStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">start</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">pull</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">controller</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 当从 Stream 获取数据的时候，返回一个 Promise</span>\n          <span class=\"token comment\">// 并在 onUpdate 赋值，等待 Main 线程的数据</span>\n          <span class=\"token comment\">// 当 Main 线程传递新数据之后，调用这里的 onUpdate 函数，将 data 传入</span>\n          <span class=\"token comment\">// 接下来通过 FileReader 读取数据，转化成 Uint8Array，放入 Stream 中</span>\n          <span class=\"token comment\">// 在清除 onUpdate 函数，等待下一次 Pull</span>\n          streamInfo<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onUpdate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                controller<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                streamInfo<span class=\"token punctuation\">.</span>onUpdate <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            reader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从 Main 获取数据并更新给 Stream 的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">self<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> ports <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>portA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> portB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ports<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 根据消息类型，选择创建一个新的 stream 或是往一个已经创建的 stream 中写入数据</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'create'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">getStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stream</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          filesize<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>filesize<span class=\"token punctuation\">,</span>\n          filename<span class=\"token punctuation\">:</span> data<span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">,</span>\n          stream\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'insert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      portB<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chunk <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onUpdate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          streamInfo<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 等待 onUpdate API 创建...</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://www.myairbridge.com/en/\">MyAirBridge</a> 网站使用了类似上面提到的技术来下载中的文件内容。Service Worker 的代码参考<a href=\"https://www.myairbridge.com/media/js_compiled/sw-download-10bfedd.js\">这里</a>。</p>","frontmatter":{"title":"Download Chunk via ServiceWorker","category":"JavaScript","date":"2019-09-16"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-09-16","title":"Download Chunk via ServiceWorker","previous":{"time":"2019-09-12","title":"Save file in Chrome"},"next":{"time":"2019-09-17","title":"Git Pull Rebase"}}}}