{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-08-25_cron-in-docker","result":{"data":{"markdownRemark":{"id":"a8af124f-a7b7-503f-90db-e3eb67eb5c03","html":"<p>用 Docker 管理定时任务，依然可以通过 Cron 来进行。</p>\n<section><h2>Cron 配置</h2><p>可以通过以下的方式测试 Docker 中 Cron 的执行：</p><div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">docker run -ti --rm alpine <span class=\"token function\">sh</span> -c <span class=\"token punctuation\">\\</span>\n  <span class=\"token string\">\"echo <span class=\"token entity\" title=\"\\&quot;\">\\\"</span>* * * * * echo hello<span class=\"token entity\" title=\"\\&quot;\">\\\"</span> | crontab - &amp;&amp; crond -f -L /dev/stdout\"</span></code></pre></div><p>运用同样的原理，可以写一个简单的 Dockerfile 如下：</p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>latest\n\n<span class=\"token keyword\">RUN</span> touch /var/log/cron.log\n\n<span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"* * * * * echo 'Hello World' >> /var/log/cron.log 2>&amp;1\"</span> <span class=\"token punctuation\">|</span> \\\n  crontab <span class=\"token punctuation\">-</span> &amp;&amp; \\\n  crond <span class=\"token punctuation\">-</span>f <span class=\"token punctuation\">-</span>L /dev/stdout</code></pre></div><p>在上面的例子中，每一分钟都会输出一个 Hello World 到 <code class=\"language-text\">/var/log/cron.log</code> 文件中。Cron 的时间书写，可以在<a href=\"https://crontab.guru/\">这里</a> 进行直观的配置。</p></section>\n<section><h2>时区配置</h2><p>如果要进行更加复杂的 Cron 配置，很可能就会涉及到时间的问题。默认情况下，Docker 使用的 Linux Alpine 使用的是 UTC 时间。如果配置的 Cron 也需要用 UTC 来书写，显然不直观，也不方便。</p><p>简单的处理方法，就是在创建 Docker 的时候，对时区进行配置。比如，将时区设置成北京时间：</p><div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> alpine<span class=\"token punctuation\">:</span>latest\n\n<span class=\"token keyword\">ARG</span> timezone=<span class=\"token string\">\"Asia/Beijing\"</span>\n\n<span class=\"token keyword\">RUN</span> apk add tzdata &amp;&amp; \\\n  cp /usr/share/zoneinfo/$timezone /etc/localtime &amp;&amp; \\\n  echo <span class=\"token string\">\"$timezone\"</span> <span class=\"token punctuation\">></span> /etc/timezone &amp;&amp; \\\n  apk del tzdata\n\n<span class=\"token keyword\">RUN</span> touch /var/log/cron.log\n\n<span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"30 8 * * * echo 'Wake Up!' >> /var/log/cron.log 2>&amp;1\"</span> <span class=\"token punctuation\">|</span> \\\n  crontab <span class=\"token punctuation\">-</span> &amp;&amp; \\\n  crond <span class=\"token punctuation\">-</span>f <span class=\"token punctuation\">-</span>L /dev/stdout</code></pre></div><p>如上，通过 tzdata 来配置时区，将时间调整成北京时间，进而再执行每日 8:30 的 cronjob，以确保在北京时间的早晨执行某一个命令。</p></section>","frontmatter":{"title":"Cron in Docker","category":"Docker","date":"2019-08-25"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-08-25","title":"Cron in Docker","previous":{"time":"2019-08-22","title":"Remove Docker Images without Tag"},"next":{"time":"2019-08-26","title":"Get Yesterday Date in Bash"}}}}