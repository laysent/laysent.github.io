{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-06-20_typescript-non-null-assertion","result":{"data":{"markdownRemark":{"id":"9d0214db-d137-5836-8ef7-f5647b897c2e","html":"<p>在 TypeScript 中，常常存在一个对象可能是 <code class=\"language-text\">undefined</code> 或 <code class=\"language-text\">null</code> 的情况。如果试图直接使用这样的对象，很可能会造成 TypeScript 的报错（在 <code class=\"language-text\">--strictNullChecks</code> 开启的情况下）。这本身是一个正确的行为，也可以在编译时帮助开发者避免一些不必要的错误。</p>\n<p>然而，在实际的开发中，不免遇到这样的情况：在某些特定的生命周期中，开发者可以很明确的知道某一个值不会是 <code class=\"language-text\">undefined</code> 或者 <code class=\"language-text\">null</code>。然而，这样的前置条件 TypeScript 本身并不知情。此时，为了防止 TypeScript 报错，就需要通过某些显式的方法，声明这一情况。</p>\n<p>最常见的方案，是通过 <code class=\"language-text\">as</code> 来强制类型转化。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">throwIfUndefined</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> input <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Undefined!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">optional<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">throwIfUndefined</span><span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>optional <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>TypeScript 提供了一个 Non-null assertion 运算符：<code class=\"language-text\">!.</code>，就是用于上述情景的。具体来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">optional<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">throwIfUndefined</span><span class=\"token punctuation\">(</span>optional<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>optional<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面这样写之后，TypeScript 就不会报错了。<code class=\"language-text\">optional</code> 被认为一定是非 <code class=\"language-text\">undefined</code> 或 <code class=\"language-text\">null</code> 类型的。（至于 TypeScript 会认为这个变量是什么类型的，就要看这个变量除了 <code class=\"language-text\">undefined | null</code> 的类型之外，还可能是什么类型的了）</p>\n<p>当然，不难看出，这个运算符只是一个编译时帮助编译器理解类型用的辅助手段，本身并不是一个语法糖。因此，在 TypeScript 转化成 JavaScript 的过程中，这里的运算符会直接被去掉。<code class=\"language-text\">optional!.length</code> 生成的就是 <code class=\"language-text\">optional.length</code>，没有生成任何额外的东西。</p>","frontmatter":{"title":"TypeScript Non-null Assertion","category":"TypeScript","date":"2019-06-20"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-06-20","title":"TypeScript Non-null Assertion","previous":{"time":"2019-06-19","title":"Record in TypeScript"},"next":{"time":"2019-06-21","title":"Detect Overflow"}}}}