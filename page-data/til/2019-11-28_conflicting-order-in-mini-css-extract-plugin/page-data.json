{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-11-28_conflicting-order-in-mini-css-extract-plugin","result":{"data":{"markdownRemark":{"id":"c366bb01-a2f9-54c4-ac76-8013cd32b800","html":"<p>在使用了 <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin\">mini-css-extract-plugin</a> 的项目中，有时会遇到如下的 Warning 输出：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">WARNING in chunk styles [mini-css-extract-plugin]\nConflicting order between:\n* css xxx/css-loader/dist/cjs.js!./e1.css\n* css xxx/css-loader/dist/cjs.js!./e2.css\n* css xxx/css-loader/dist/cjs.js!./e3.css</code></pre></div>\n<section><h2>tl;dr</h2><p>上面这段 Warning 的实际含义是：</p><blockquote>\n<p>由于没法找到最合适的解，plugin 被迫使用了相对最优的解，将 <code class=\"language-text\">e1.css</code> 放到了编译产物中。在某些 chunk group 中，<code class=\"language-text\">e2.css</code> 或 <code class=\"language-text\">e3.css</code> 这两个文件引用位置在 <code class=\"language-text\">e1.css</code> 之前；而在 plugin 将 <code class=\"language-text\">e1.css</code> 加入编译产物的时候，<code class=\"language-text\">e2.css</code> 和 <code class=\"language-text\">e3.css</code> 还没有被添加。</p>\n</blockquote><p>换句话说，如果 <code class=\"language-text\">e1.css</code> 本来的用途是覆盖 <code class=\"language-text\">e2.css</code> 的内容，且覆盖依靠的是同优先级下 CSS 定义出现的先后顺序，那么在 plugin 编译完成之后，这个覆盖就会失效。</p></section>\n<section><h2>造成 Warning 的例子</h2><p>以下通过一个直观的例子来说明 plugin 在何时可能会输出上述 Warning：</p><p>假设有两个文件 <code class=\"language-text\">entry1.js</code>：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./e1.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./e2.css'</span><span class=\"token punctuation\">;</span></code></pre></div><p><code class=\"language-text\">entry2.js</code>：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./e2.css'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./e1.css'</span><span class=\"token punctuation\">;</span></code></pre></div><p>且 Webpack 配置了需要将 <code class=\"language-text\">e1.css</code> 和 <code class=\"language-text\">e2.css</code> 打包到同一个文件中。如果 plugin 选择将 <code class=\"language-text\">e1.css</code> 放在 <code class=\"language-text\">e2.css</code> 的前面，那么就不满足 <code class=\"language-text\">entry2.js</code> 的使用顺序；反之则不满足 <code class=\"language-text\">entry1.js</code> 的。正是在这样的“矛盾”情况下，plugin 输出了一个 Warning，并选择了一个相对最优的解。</p></section>\n<section><h2>更好的 Warning</h2><p>上面提到的 mini-css-extract-plugin Warning 并不是非常直观，也很难知道具体是哪一个 chunk group 出现了问题。新提交的 PR <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/pull/465\">#465</a> 以及 <a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/pull/468\">#468</a> 对此做了优化。优化后的输出类似：</p><div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">WARNING in chunk styles [mini-css-extract-plugin]\nConflicting order. Following module has been added:\n * css xxx!./e1.css\ndespite it was not able to fulfill desired ordering with these modules:\n * css xxx!./e2.css\n   - couldn&#39;t fulfill desired order of chunk group(s) entry2\n   - while fulfilling desired order of chunk group(s) entry1</code></pre></div><p>根据 Warning 的提示，只需要观察 entry2 中对应的代码，就可以找到不满足的引入顺序了。</p></section>\n<section><h2>是否需要关心</h2><p>这个 Warning 是否需要关注，取决于 CSS 在项目中是如何被使用的：只要在项目的使用过程中，没有 CSS 是通过加载的顺序进行优先级覆盖的，那么就可以忽略 plugin 给出的 Warning；反之，如果有这样的情况，则一定需要根据 Warning 修正输出，防止编译导致的意外。</p><p>当然，最保险的做法是启用 CSS Module，从源头上保证各个模块间的 CSS 是不会相互覆盖的。</p></section>\n<section><h2>代码分析</h2><p>以下从这个 Warning 入手，分析 plugin 是如何从 modules 生成最终的打包产物的。</p><p>观察 mini-css-extract-plugin 的源代码，不难找到这个 Warning 的具体输出<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L494\">代码</a>。接下来，将针对这段代码所在的 <code class=\"language-text\">renderContentAsset</code> 进行分析，了解 plugin 生成打包产物的算法。</p><p>首先观察 <code class=\"language-text\">renderContentAsset</code> 函数最开始的<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L416\">比较语句</a>：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> chunkGroup<span class=\"token punctuation\">.</span>getModuleIndex2 <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里，<code class=\"language-text\">chunkGroup.getModuleIndex2</code> 是 Webpack 4 中的 API，在之前的版本中不存在（Webpack 3 及之前使用的是 <a href=\"https://github.com/webpack-contrib/extract-text-webpack-plugin\">extract-text-webpack-plugin</a>）。接下来，重点关心 Webpack 4 对应的代码段。</p><p>首先看 <code class=\"language-text\">moduleDependencies</code> 变量的初始化（<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L418\">源码</a>）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> moduleDependencies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>modules<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p><code class=\"language-text\">moduleDependencies</code> 为每一个 module 都定义了一个对应的空 Set（具体 Set 内的值会在后续填充）。</p><p>接下来看 <code class=\"language-text\">modulesByChunkGroup</code> 变量的定义（<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L423\">源码</a>）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> modulesByChunkGroup <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>groupsIterable<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> sortedModules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>可以看到，<code class=\"language-text\">modulesByChunkGroup</code> 本质上，是将所有的 chunk group（<code class=\"language-text\">chunk.groupsIterable</code>）转化成了对应的 <code class=\"language-text\">sortedModules</code>。这里 <code class=\"language-text\">sortedModules</code> 变量的定义为（<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L424-L434\">源码</a>）：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> sortedModules <span class=\"token operator\">=</span> modules\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      module<span class=\"token punctuation\">:</span> m<span class=\"token punctuation\">,</span>\n      index<span class=\"token punctuation\">:</span> cg<span class=\"token punctuation\">.</span><span class=\"token function\">getModuleIndex2</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// eslint-disable-next-line no-undefined</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>index <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> b<span class=\"token punctuation\">.</span>index <span class=\"token operator\">-</span> a<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>简单来说，做了几件事情：</p><ol>\n<li>将 <code class=\"language-text\">modules</code> 中不属于当前 chunk group（<code class=\"language-text\">cg</code>）的部分剔除，对应的是 <code class=\"language-text\">.filter((item) =&gt; item.index !== undefined)</code>；</li>\n<li>根据 module 在 chunk group 中实际出现的位置，按从后往前进行排序，对应的是 <code class=\"language-text\">.sort((a, b) =&gt; b.index - a.index)</code></li>\n</ol><p>这里，越是先出现的 module 在最终的 <code class=\"language-text\">sortedModules</code> 数组中排的越靠后。换句话说，出现在数组最后的一个 module，没有任何前置的依赖（在该 chunk group 中，这个 module 是第一个被引入的）；而理论上来说，数组的第一个 module 依赖了数组后面的所有 modules（从 CSS 的角度来说，这个模块出现在最后。在所有选择器优先级一样的前提下，这个 module 理论上可以对之前所有的 module 进行覆盖）。这里采用倒叙的方式组织数组，是为了后续可以方便的使用 <code class=\"language-text\">Array.prototype.pop</code> 函数去获取当前没有依赖的 module。</p><p>接下来，<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L436-L442\">代码</a>对 <code class=\"language-text\">sortedModules</code> 变量值进行了填充：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sortedModules<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> moduleDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>sortedModules<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sortedModules<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>sortedModules<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>如上所述，<code class=\"language-text\">sortedModules</code> 中后出现的 module 是先出现 module 的依赖。这里的 <code class=\"language-text\">moduleDependencies</code> 变量记录了各个 module 的所有依赖（不仅仅是当前 chunk group 的依赖，所有 chunk group 的依赖最终都会被写入到这个 Set 中），其中 key 是各个 module，而对应的 value 则是一个 Set，Set 中的每个元素都是当前这个 module 的依赖。</p><p>之后定义了 <code class=\"language-text\">usedModules</code> 和 <code class=\"language-text\">unusedModulesFilter</code> 函数（<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L448-L450\">源码</a>），目的是为了判断某一个 module 是否已经被当前的 plugin 使用了。</p><p>接下来的<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L452-L455\">代码</a>需要确保所有的 modules 都会根据某个具体的算法在最终的编译产物中被使用到。这里判断的方法就是 <code class=\"language-text\">usedModules</code> 是否包含了 <code class=\"language-text\">modules</code> 中所有的内容。</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>usedModules<span class=\"token punctuation\">.</span>size <span class=\"token operator\">&lt;</span> modules<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> success <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> bestMatch<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> bestMatchDeps<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>至此，准备工作都做完了。接下来就是核心的部分：如何在各个 chunk group 中选取合适的 module，依次放到最终生成的 CSS 文件中。<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L458-L484\">代码</a>如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> list <span class=\"token keyword\">of</span> modulesByChunkGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// skip and remove already added modules</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> usedModules<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// skip empty lists</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> module <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> moduleDependencies<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// determine dependencies that are not yet included</span>\n    <span class=\"token keyword\">const</span> failedDeps <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>unusedModulesFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// store best match for fallback behavior</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bestMatchDeps <span class=\"token operator\">||</span> bestMatchDeps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> failedDeps<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      bestMatch <span class=\"token operator\">=</span> list<span class=\"token punctuation\">;</span>\n      bestMatchDeps <span class=\"token operator\">=</span> failedDeps<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>failedDeps<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// use this module and remove it from list</span>\n      usedModules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      success <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>理想情况下，两个 CSS module 在最终编译产物中的先后顺序，应该和这两个 CSS module 在某一个 chunk group 中的先后顺序是一致的。如果顺序上无法保证一致，那么应该尽可能将不一致的情况降到最低。mini-css-extract-plugin 就是遵循这一个原则来对 module 进行排序的。在每一次的选取步骤中，算法都会依次遍历每一个 chunk group，做下面几个事情：</p><ol>\n<li>拿到当前该 chunk group 中没有依赖的那个 CSS module（<code class=\"language-text\">const module = list[list.length - 1];</code>）；</li>\n<li>判断这个拿到的 CSS module 是否有前置的依赖还没有被放到最终产物中去（<code class=\"language-text\">const failedDeps = Array.from(deps).filter(unusedModulesFilter)</code>）;</li>\n<li>如果没有前置依赖了，那么这个 CSS module 就可以被“安全”的放到当前的编译产物中去（<code class=\"language-text\">if (failedDeps.length === 0) {</code> 对应的部分）；</li>\n<li>如果有不满足的前置依赖，那么就去寻找不满足情况最少的一个（<code class=\"language-text\">bestMatchDeps.length &gt; failedDeps.length</code>），然后记下来（<code class=\"language-text\">bestMatchDeps = failedDeps;</code>）</li>\n</ol><p>如果找到了没有前置依赖的 module，代码就直接 break，跳到下一次 while 循环中去了；如果没有找到完美匹配的情况，就会进入接下来的<a href=\"https://github.com/webpack-contrib/mini-css-extract-plugin/blob/50434b55c9df9cd3c26f2243e23df83e2964c720/src/index.js#L486-L507\">代码</a>：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// no module found => there is a conflict</span>\n  <span class=\"token comment\">// use list with fewest failed deps</span>\n  <span class=\"token comment\">// and emit a warning</span>\n  <span class=\"token keyword\">const</span> fallbackModule <span class=\"token operator\">=</span> bestMatch<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>ignoreOrder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    compilation<span class=\"token punctuation\">.</span>warnings<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">chunk </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunk<span class=\"token punctuation\">.</span>name <span class=\"token operator\">||</span> chunk<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pluginName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">'Conflicting order between:\\n'</span> <span class=\"token operator\">+</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> * </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fallbackModule<span class=\"token punctuation\">.</span><span class=\"token function\">readableIdentifier</span><span class=\"token punctuation\">(</span>\n            requestShortener\n          <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span>\n          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bestMatchDeps\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"> * </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">readableIdentifier</span><span class=\"token punctuation\">(</span>requestShortener<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  usedModules<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>fallbackModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>上面代码中的 <code class=\"language-text\">bestMatch</code> 就是对应了最佳情况时候 modules 排序的数组，这里 <code class=\"language-text\">fallbackModule = bestMatch.pop()</code> 就可以拿到当前这个最佳情况的 chunk group 中，没有依赖的那个 CSS module。和之前代码中 <code class=\"language-text\">module = list[list.length - 1]</code> 拿到的数据是一样的。</p><p>同时，<code class=\"language-text\">bestMatchDeps</code> 对应的就是上面代码里的 <code class=\"language-text\">failedDeps</code> 数组，表示的是当前这个 <code class=\"language-text\">fallbackModule</code> 被选中时，有哪些该 module 的前置依赖并没有被事先放到编译产物中去。</p><p>接下来就是向 Webpack 输出 Warning 的代码了。再来看下面这段 Warning：</p><div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">WARNING in chunk styles [mini-css-extract-plugin]\nConflicting order between:\n* css xxx/css-loader/dist/cjs.js!./e1.css\n* css xxx/css-loader/dist/cjs.js!./e2.css\n* css xxx/css-loader/dist/cjs.js!./e3.css</code></pre></div><p>可知道，具体的含义是：由于没法找到最合适的解，plugin 被迫使用了相对最优的解，将 <code class=\"language-text\">e1.css</code> 放到了编译产物中。在某些 chunk group 中，<code class=\"language-text\">e2.css</code> 或 <code class=\"language-text\">e3.css</code> 这两个文件引用位置在 <code class=\"language-text\">e1.css</code> 之前；而在 plugin 将 <code class=\"language-text\">e1.css</code> 加入编译产物的时候，<code class=\"language-text\">e2.css</code> 和 <code class=\"language-text\">e3.css</code> 还没有被添加。</p></section>","frontmatter":{"title":"Conflicting order in mini-css-extract-plugin","category":"Build","date":"2019-11-28"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-11-28","title":"Conflicting order in mini-css-extract-plugin","previous":{"time":"2019-11-27","title":"Chunk Group"},"next":{"time":"2019-12-01","title":"arguments.callee"}}}}