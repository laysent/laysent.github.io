{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-08-08_big-number-in-javascript","result":{"data":{"markdownRemark":{"id":"31721418-7e10-5793-aaa4-841cd465e306","html":"<p>JavaScript 中可以很方便在字符串和数字之间进行转换，比如：<code class=\"language-text\">+&#39;123&#39;</code> => <code class=\"language-text\">123</code>，<code class=\"language-text\">(123).toString()</code> => <code class=\"language-text\">&#39;123&#39;</code>。</p>\n<p>然而，需要注意的一点是，JavaScript 中的数字并不是整数，而是浮点数。更确切的说，数字使用的是 64 bit 双精度浮点数来表示的。这意味着，如果服务器存储的数字是一个 Int64，那么在给到前端的时候，很有可能会出现转化上的问题。对于双精度浮点数来说，能够表示的最大的数是 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，超过的部分就会被截断，无法精确表示。</p>\n<p>比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token string\">'9223372036854775808'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output: 9223372036854776000</span></code></pre></div>\n<p>JavaScript 提供了 <code class=\"language-text\">Number.isSafeInteger</code> 这个 API 来判断一个数字是否是在可表示的安全范围内。比如：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">9223372036854776000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">53</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: true</span></code></pre></div>\n<p>这里，<code class=\"language-text\">2 ** 53 - 1</code> 就是 JavaScript 中可以表示的最大整数，<code class=\"language-text\">Number.MAX_SAFE_INTEGER</code> 这个常量也等于这个值。超过这个数值的所有值都会被认为是不安全的，哪怕该值实际表示的结果“凑巧”是正确的。上例中，<code class=\"language-text\">9223372036854776000</code> 这个数字的表示结果“刚好”就是 <code class=\"language-text\">9223372036854776000</code> 本身，但是因为这个数已经超过了 <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{53} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，所以依然被判定为是不安全的。</p>\n<p>虽然 JavaScript 本身的数字不支持大数，但是 Chrome 已经集成了 <code class=\"language-text\">BigInt</code> 数据类型，它可以被用于表示任意大的整形数字，可以用于这样的使用场景。（注：<code class=\"language-text\">BigInt</code> 本身还在 staging 3，并不是标准的一部分）</p>\n<p>简单的使用方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> num <span class=\"token operator\">=</span> <span class=\"token function\">BigInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">**</span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or:</span>\n<span class=\"token comment\">// const num = BigInt('9223372036854776000');</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 9223372036854775808n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: bigint</span></code></pre></div>\n<p>需要注意的是，<code class=\"language-text\">BigInt</code> 不可以使用 <code class=\"language-text\">new</code> 运算符，否则会报错。直接像函数一样传递参数调用就可以了。</p>\n<p><code class=\"language-text\">BigInt</code> 也是支持数字运算的，运算的结果依然是 <code class=\"language-text\">BigInt</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1n</span> <span class=\"token operator\">+</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 3n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3n</span> <span class=\"token operator\">-</span> <span class=\"token number\">1n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2n</span> <span class=\"token operator\">*</span> <span class=\"token number\">3n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 6n</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5n</span> <span class=\"token operator\">/</span> <span class=\"token number\">2n</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 2n</span></code></pre></div>\n<p>特别需要注意的是，因为是整型数字之间的转换，所以在做除法的时候，不会出现小数。在上面的例子中，<code class=\"language-text\">5n</code> 和 <code class=\"language-text\">2n</code> 的除法，结果是 <code class=\"language-text\">2n</code> 而不是 <code class=\"language-text\">2.5</code>，这一个行为和 C 中两个 Integer 之间除法的行为是一致的。</p>\n<p>另外，<code class=\"language-text\">BigInt</code> 不支持和其他的数据类型进行混合计算。比如：<code class=\"language-text\">1n + 2</code> 这样的计算是会报错的，需要显式的进行类型转换后，才可以进行运算。这一点，和 JavaScript 中其他数据类型之间随意混乱的运算行为是不同的（比如，<code class=\"language-text\">1 + &#39;2&#39;</code> 这样的计算 JavaScript 就不会报错，还会得到 <code class=\"language-text\">&#39;12&#39;</code> 这样怪异的结果）。</p>\n<p>虽然 <code class=\"language-text\">BigInt</code> 不允许和一般的 <code class=\"language-text\">Number</code> 进行混合计算，但是比较运算符是可以在两者之间进行比较的。比如：<code class=\"language-text\">1n &lt; 2</code> 或 <code class=\"language-text\">2n &gt; 1</code> 这些都是成立的。<code class=\"language-text\">BigInt</code> 和 <code class=\"language-text\">Number</code> 之间无法取得 <code class=\"language-text\">===</code> 的严格等价关系，但是 <code class=\"language-text\">==</code> 的比较是可能成立的。换句话说：<code class=\"language-text\">1n == 1</code> 是成立的，但是 <code class=\"language-text\">1n === 1</code> 是不成立的。</p>\n<p>更多关于 <code class=\"language-text\">BigInt</code> 的行为，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">MDN</a>。</p>","frontmatter":{"title":"Big Number in JavaScript","category":"JavaScript","date":"2019-08-08"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-08-08","title":"Big Number in JavaScript","previous":{"time":"2019-08-07","title":"Screen Recording in MacOS"},"next":{"time":"2019-08-11","title":"String Manipulation in SQLite"}}}}