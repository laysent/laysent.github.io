{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-10-30_css-typed-object-model","result":{"data":{"markdownRemark":{"id":"8851beea-d663-5eca-a70d-daacfb58475f","html":"<p>在 Houdini 实现的过程中（<a href=\"https://developers.google.com/web/updates/2016/05/houdini\">什么是 Houdini？</a>），Chrome 已经在 66 中已经实现了一部分 CSS 样式的 Typed Object Modal 支持（支持的列表可以参考<a href=\"https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/css/cssom/README.md\">这里</a>）。</p>\n<p>实现之后，在 JavaScript 中就可以通过 <code class=\"language-text\">window.CSS</code> 对象上的各类属性 API，生成指定类型的 CSS 属性值。看一个简单的例子：</p>\n<p>在以前的实现中，往往需要这么写代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'px'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这样写，会存在几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，需要在字符串和数字之间进行转化；</li>\n<li>CSS 的属性名称是用 <code class=\"language-text\">-</code> 连接的，但是在 <code class=\"language-text\">CSSStyleDeclaration</code> 中却需要写成小驼峰的形式（<code class=\"language-text\">font-size</code> 变成 <code class=\"language-text\">fontSize</code>）；</li>\n<li>如果设置违法的值，代码会默默失败，没有任何错误提示；</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// no error! not success!</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"4\">\n<li>即使设置的属性值是数字，但是实际拿到的时候，值又变成了字符串</li>\n</ol>\n<p>如，上例中的 <code class=\"language-text\">element.style.opacity</code>，虽然设置的值是 <code class=\"language-text\">1</code>，但如果运行 <code class=\"language-text\">typeof element.style.opacity</code> 结果却是 <code class=\"language-text\">string</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: string</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果试图直接进行运算，则可能得不到预料中的结果。比如，下面的输出依然是 <code class=\"language-text\">0.1</code> 而不是 <code class=\"language-text\">0.6</code>，因为 <code class=\"language-text\">element.style.opacity += 0.5</code> 的结果是 <code class=\"language-text\">0.10.5</code>（字符串拼接），作为一个非法值，直接被浏览器抛弃了（见第三点）</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">+=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: 0.1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>有了 CSS Typed Object Model 之后，代码可以改写成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fontSize <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'font-size'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CSS</span><span class=\"token punctuation\">.</span><span class=\"token function\">px</span><span class=\"token punctuation\">(</span>fontSize <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nelement<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>不难看出，这样的写法，基本解决了上面提到的几个问题：</p>\n<ol>\n<li>读取和设置带单位数值的时候，不再需要手动进行字符串和数值的转化。<code class=\"language-text\">CSS.px</code> 这个函数可以将数值转化成一个带单位的对象，用于给 <code class=\"language-text\">attributeStyleMap</code> 赋值。另外，由于这个值 <code class=\"language-text\">toString</code> 之后就是类似 <code class=\"language-text\">16px</code> 的字符串，因此也可以直接给 <code class=\"language-text\">element.style.fontSize</code> 进行赋值。同时，从 <code class=\"language-text\">attributeStyleMap</code> 中拿到的数据，也是带单位的对象，对象中的 <code class=\"language-text\">value</code> 就是数值，<code class=\"language-text\">unit</code> 是字符串，表示单位，不再需要手动解析；</li>\n<li><code class=\"language-text\">attributeStyleMap</code> 的属性名称和 CSS 的属性名称是一致的，不需要像以前一样在 JavaScript 中手动改成小驼峰的写法；</li>\n<li>如果设置了违法的值，代码会报错：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上代码会输出报错：<code class=\"language-text\">TypeError: Failed to execute &#39;set&#39; on &#39;StylePropertyMap&#39;: Invalid type for property</code>。</p>\n<ol start=\"4\">\n<li>应该是数值的结果，拿到的时候也是数值，而不是字符串（因此数值计算也不会出错）：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当然，这里如果这么些，结果依然是数字：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: number!</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> element<span class=\"token punctuation\">.</span>attributeStyleMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opacity'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>另外，使用 CSS Typed OM 还有一些其他额外的好处，比如，浏览器不需要序列化和反序列化结果，因此性能更好（一个简单的性能检测可以查看<a href=\"https://github.com/w3c/css-houdini-drafts/issues/634#issuecomment-366358609\">这里</a>，大概有 30% 左右的提升）。</p>\n<p>更多更详细关于 CSS Typed OM 的介绍，可以参考 Google 的这篇 <a href=\"https://developers.google.com/web/updates/2018/03/cssom\">Blog</a>。</p>\n<p>P.S. 目前，其他的浏览器支持情况依然不理想，可以参考 <a href=\"https://ishoudinireadyyet.com/\">Is Houdini ready yet?</a> 网站上最新的支持情况了解详情。就实际情况来看，可以在 Electron 3 （基于 Chrome 66，见<a href=\"https://electronjs.org/releases/stable?version=3&#x26;page=7\">这里</a>）或以上版本使用，但暂时不建议在 Web 项目中引入。</p>","frontmatter":{"title":"CSS Typed Object Model","category":"CSS","date":"2019-10-30"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-10-30","title":"CSS Typed Object Model","previous":{"time":"2019-10-29","title":"computed and getter in Mobx"},"next":null}}}