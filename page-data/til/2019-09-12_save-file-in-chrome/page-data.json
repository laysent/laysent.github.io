{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-09-12_save-file-in-chrome","result":{"data":{"markdownRemark":{"id":"4728f0b5-54c6-5426-bf7a-4f6ed51ae6b6","html":"<p>在 Web 环境中，一般对内容的存储都是依托于 Cookie 或是 LocalStorage 进行的（个别会使用 IndexDB）。其实，在早些时候，Web 曾推出过一个 FileSystem 的标准（已经废弃），用于将数据直接存储到本地的沙盒环境中，方便日后的使用。这个 API 目前只有 Chrome 进行了实现。</p>\n<p><a href=\"https://www.html5rocks.com/en/tutorials/file/filesystem/\">这篇文章</a> 针对 FileSystem API 做了详细的介绍。<a href=\"https://github.com/summera/chromestore.js\">这个 GitHub 仓库</a> 则在 FileSystem 原生 API 的基础上，进行了二次封装。（注：第一个链接给出的文章，部分代码有误，可能无法正常运行。实际使用过程中，可以参考第二个链接给出的 GitHub 仓库中的相关代码进行调整）</p>\n<p>假设，需要实现一个分片的文件下载功能，即文件被服务器分割成很多块，通过 JavaScript 依次下载这些内容，再在本地拼接后提交给用户。这里，考虑到文件可能非常大，如果只是存储在内存中，一旦用户刷新页面或是遇到其他问题，已经下载的内容就都失效了，只能重新再来一次。这种情况下，可以考虑使用 FileSystem API 将分片的文件内容下载后先存放在本地的沙盒文件中，等到全部下载完成之后，再将拼接好的内容提交给用户。</p>\n<p>下面给出一个实例代码，用以介绍 FileSystem API 的可能使用方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 实际中 Chrome 给出的 API 只用 window.webkitRequestFileSystem\n */</span>\n<span class=\"token keyword\">const</span> requestFileSystem <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>requestFileSystem <span class=\"token operator\">||</span>\n  window<span class=\"token punctuation\">.</span>webkitRequestFileSystem<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * 下载 Link 并保存文件为 filename\n * 只是示例代码，实际的可行方案请参考 file-saver 的实现\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">link<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> link<span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token string\">'_blank'</span><span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">;</span>\n  a<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob<span class=\"token punctuation\">,</span> filename</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">errorHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 获取名为 filename 的文件，{ create: true } 表示如果文件不存在，就创建一个\n     * fileEntry 中包含的 API 可以用于对这个文件进行操作\n     */</span>\n    fs<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span><span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> create<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fileEntry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      fileEntry<span class=\"token punctuation\">.</span><span class=\"token function\">createWriter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">writer</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/**\n         * 指定文件的写入位置在当前文件内容的末尾\n         */</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">seek</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onwriteend</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">/**\n           * FileSystem 中的文件，可以通过类似如下的 Link 获取到：\n           * filesystem:https://xxx.com/persistent/filename\n           * 具体的 URL 地址通过 `fileEntry.toURL()` 获取\n           */</span>\n          <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> fileEntry<span class=\"token punctuation\">.</span><span class=\"token function\">toURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">download</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> console<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> errorHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> errorHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 对于 PERSISTENT 存储的文件，需要事先通过浏览器询问权限\n   * 声明需要使用的大小为 blob.size\n   * 第二个参数是 success callback，在成功后调用，可以在这里进行文件读写\n   * 第三个参数是 error callback，用于处理报错\n   */</span>\n  navigator<span class=\"token punctuation\">.</span>webkitPersistentStorage<span class=\"token punctuation\">.</span><span class=\"token function\">requestQuota</span><span class=\"token punctuation\">(</span>\n    blob<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">grantedBytes</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/**\n       * 以 PERSISTENT 的方式，写入 grantedBytes 这么多的内容\n       * 允许写入会执行 handler，否则会执行 errorHandler\n       */</span>\n      <span class=\"token function\">requestFileSystem</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">,</span> grantedBytes<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> errorHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    console<span class=\"token punctuation\">.</span>error\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 示例代码的调用，将 hello world 写入到 output.txt 文件中\n */</span>\n<span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'output.txt'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>上面这个例子，展示了如何将 Blob / File 写入到本地沙盒的文件中（例子中写入到了 <code class=\"language-text\">output.txt</code> 文件内）。有几点需要注意：</p>\n<ol>\n<li>文件是写入到沙盒环境中的，因而虽然 <code class=\"language-text\">fileEntry.fullPath</code> 的值是 <code class=\"language-text\">/output.txt</code>，并不代表真的可以在根目录下找到 output.txt 文件</li>\n<li><code class=\"language-text\">window.PERSISTENT</code> 和 <code class=\"language-text\">window.TEMPORARY</code> 是两种可能的存储方式。如果是 <code class=\"language-text\">PERSISTENT</code> 的，那么需要用户授权（也就是 <code class=\"language-text\">requestQuota</code> 做的事情）且清理需要程序或用户手动执行；如果是 <code class=\"language-text\">TEMPORARY</code> 类型的存储方式，那么浏览器可能会在某些情况下自动清理文件（比如，当空间不够的时候）</li>\n<li>通过 <code class=\"language-text\">fileEntry.toURL</code> API 可以拿到当前文件存储对应的 URL 地址，进而可以通过常规手段将这个内容下载到本地</li>\n<li>代码中的 <code class=\"language-text\">errorHandler</code> 函数写的比较粗糙，更丰富的 Error Handler 写法，可以参考 <a href=\"https://github.com/summera/chromestore.js/blob/e0981728534a28ce0a2cf80ed54d9f9f90279943/chromestore.js#L16\">chromestore.js</a> 中的代码</li>\n</ol>\n<p><a href=\"https://www.myairbridge.com/en/\">MyAirBridge</a> 网站可能使用了类似上面提到的技术来存储下载中的文件内容。</p>","frontmatter":{"title":"Save file in Chrome","category":"Chrome","date":"2019-09-12"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-09-12","title":"Save file in Chrome","previous":{"time":"2019-09-11","title":"BDO Element"},"next":{"time":"2019-09-16","title":"Download Chunk via ServiceWorker"}}}}