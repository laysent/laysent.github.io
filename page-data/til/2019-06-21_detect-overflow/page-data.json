{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-06-21_detect-overflow","result":{"data":{"markdownRemark":{"id":"d3d9b9ee-bfd5-59a0-8ae2-2338b51424cc","html":"<p>下面展示的这段 CSS 设置非常常见，可以让文字超过宽度的时候，显示 <code class=\"language-text\">...</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.ellipsis</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在实际业务中，经常会碰到这样的需求：只有当显示出 <code class=\"language-text\">...</code> 的时候，才做某些事情（比如，才在鼠标悬停的时候展示 Tooltip，用以显示完整的文字内容）。CSS 本身并没有提供足够的接口，让开发者可以直观的了解到当前的文字内容是否已经超出了可以显示的范围。如果需要判断当前内容是否超出了元素的宽度（因而让 CSS 渲染出 <code class=\"language-text\">...</code>），可以用下面的 JavaScript 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isOverflow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">.</span>scrollWidth <span class=\"token operator\">!==</span> element<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>根据 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth\">MDN</a> 的介绍，<code class=\"language-text\">scrollWidth</code> 是一个制度元素，其值等于该元素实际的宽度（包含了元素因为 <code class=\"language-text\">overflow</code> 没有展示出来的部分）；而于此相对的，<code class=\"language-text\">clientWidth</code> 是元素实际展示的宽度。注，对行内元素和没有 CSS 的元素来说，<code class=\"language-text\">clientWidth</code> 是 0，具体见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth\">MDN</a>。针对判断是否出 <code class=\"language-text\">...</code> 的情况，这里不需要考虑 <code class=\"language-text\">clientWidth</code> 的特殊情况。因为 <code class=\"language-text\">scrollWidth</code> 实际给出的值包含了被隐去的部分，因而当 <code class=\"language-text\">scrollWidth</code> 和 <code class=\"language-text\">clientWidth</code> 不想等的时候，就可以认定当前有部分内容被隐去了，因而 <code class=\"language-text\">...</code> 也出现了。</p>","frontmatter":{"title":"Detect Overflow","category":"JavaScript","date":"2019-06-21"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-06-21","title":"Detect Overflow","previous":{"time":"2019-06-20","title":"TypeScript Non-null Assertion"},"next":{"time":"2019-06-24","title":"Get Available Port Number"}}}}