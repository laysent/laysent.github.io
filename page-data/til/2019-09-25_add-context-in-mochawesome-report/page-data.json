{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-09-25_add-context-in-mochawesome-report","result":{"data":{"markdownRemark":{"id":"783fc4da-adbf-5fd4-93e3-a9f67e54aa99","html":"<p><code class=\"language-text\">mochawesome</code> 是为 Mocha 提供的一个 Report 库，可以用于生成不错的 HTML 报告（见 <a href=\"https://www.npmjs.com/package/mochawesome\">npm</a>）。库本身提供了一个 <code class=\"language-text\">addContext</code> 的 API，可以用于在运行 Test 的时候，存入额外的信息到 Context 中，最终在生成 HTML 报告的时候，将这部分 Context 信息写入对应的测试用例内。</p>\n<p>参考代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addContext <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome/addContext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test suite'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'unit test'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// or</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'title'</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">:</span> <span class=\"token string\">'value or object'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>几点说明：</p>\n<ol>\n<li>在 <code class=\"language-text\">beforeEach</code> 或 <code class=\"language-text\">afterEach</code> 的钩子内调用 <code class=\"language-text\">addContext</code> 也是允许的；</li>\n<li>如果给定的第二个参数是 URL 或是一个图片的话，<code class=\"language-text\">mochawesome</code> 可以有相对应的展示；</li>\n<li>记得 <code class=\"language-text\">it</code> 函数的第二个参数不要使用箭头函数，否则 <code class=\"language-text\">this</code> 的指向会有问题</li>\n</ol>\n<p>然而，在 Cypress 中如果试图直接使用上述方法运行代码，会发现并不能成功。最终生成的报告内并没有对应的 context 信息。其原因在于，Cypress 在运行的过程中，原本被赋值的 <code class=\"language-text\">context</code> 属性被覆盖掉了，导致虽然进行了 <code class=\"language-text\">addContext</code> 的赋值，但是最终的结果中并没有保留这部分数据。</p>\n<p>一个可行的解决方案是，在 <code class=\"language-text\">test:after:run</code> 事件中再进行赋值，保证结果生效。示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> addContext <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome/addContext'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCypress<span class=\"token punctuation\">.</span>Commands<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addContext'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cy<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test:after:run'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">test</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> test <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>几点说明：</p>\n<ol>\n<li>因为 <code class=\"language-text\">addContext</code> API 本质上就是往 <code class=\"language-text\">test</code> 对象上写 context 数据，而 Cypress 的 API 正好提供了 test 对象，因而第一个参数不需要传 <code class=\"language-text\">this</code>，直接将 test 以合适的方法传入就可以了；</li>\n<li>上面的代码定义了一个 Cypress 的命令方便各个地方调用，类似的代码改成一个普通的函数也是可以的；</li>\n<li>需要用 <code class=\"language-text\">cy.once</code> 保证这个代码只会被调用一次，这样其他的测试用例中不会有类似的数据被写入</li>\n</ol>","frontmatter":{"title":"Add Context in Mochawesome Report","category":"Cypress","date":"2019-09-25"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-09-25","title":"Add Context in Mochawesome Report","previous":{"time":"2019-09-24","title":"Suspense & Lazy in React"},"next":{"time":"2019-09-26","title":"Webpack Speed Measure"}}}}