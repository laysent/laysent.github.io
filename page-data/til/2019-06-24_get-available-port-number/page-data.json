{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-06-24_get-available-port-number","result":{"data":{"markdownRemark":{"id":"61e28cdf-6987-5e08-8122-603691c0fdae","html":"<p>前端的开发工程，经常需要开启一些调试用的服务器，一旦调试的服务器多了，难免会出现网络端口号的冲突；类似的，如果在一台开发机上有多个人同时开发，开发脚本也就不能写死一个固定的端口号了。在这类情况下，如果要手动解决这些冲突（修改端口号或者手写端口号的分配规则），不免有些麻烦。</p>\n<p>事实上，创建服务的时候，可以设置 <code class=\"language-text\">0</code> 作为端口号。这样的话，系统就会指定一个当前空闲可用的端口号，以保证不发生端口号冲突的情况。</p>\n<p>下面是一段 Node.js 的示意代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server  <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'text/html'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'&lt;html>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;head>&lt;title>Node.js Server&lt;/title>&lt;/head>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;body>&lt;h1>Hello World&lt;/h1>&lt;/body>'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'&lt;/html>'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ask for an available port</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ask for actually used port</span>\n  <span class=\"token keyword\">var</span> port <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">server is listening: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中，<code class=\"language-text\">server.address().port</code> 可以拿到当前系统具体分配的端口号。有了这个端口号，就可以自动/手动的打开对应的 URL 地址以访问新生成的服务了。</p>","frontmatter":{"title":"Get Available Port Number","category":"JavaScript","date":"2019-06-24"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-06-24","title":"Get Available Port Number","previous":{"time":"2019-06-21","title":"Detect Overflow"},"next":{"time":"2019-06-25","title":"Screenshot in Chrome"}}}}