{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-12-01_arguments.callee","result":{"data":{"markdownRemark":{"id":"fd022b7a-07a5-588c-83eb-4dc5e5ec807c","html":"<p><code class=\"language-text\">arguments.callee</code> 是一个不应该被使用的 API，在严格模式下使用会直接报错。这里仅仅是作为了解，记录一下该 API 的作用。</p>\n<p>在早期的 JavaScript 版本中，不允许写带名字的函数表达式，在这种情况下，如果需要做递归调用，就无法显式得指明需要调用的函数名称。<code class=\"language-text\">arguments.callee</code> 这个值，指向了当前被调用的函数本身，因此可以在匿名函数递归调用中被使用。举例来说，在早期的 JavaScript 中，<code class=\"language-text\">Array.prototype.map</code> 函数给定的回调函数只能是匿名的，如果要实现一个阶乘函数，只能这么写：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然而，<code class=\"language-text\">arguments.callee</code> 的调用会导致 <code class=\"language-text\">this</code> 的指向出现问题（具体见 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\">MDN</a>），使用起来比较危险。</p>\n<p>在 ECMAScript 3 中已经支持了带函数名的表达式，因此上面的代码可以简单的改写为一下这种正常的写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>换句话说，只需要给函数指定名称，就可以规避绝大多数的 <code class=\"language-text\">arguments.callee</code> 使用了（注：匿名函数/箭头函数无法指定名称，但同时规范也明确了匿名函数中没有 <code class=\"language-text\">arguments</code>）。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\">MDN</a> 给出了一个 <code class=\"language-text\">arguments.callee</code> 无法替换的场景：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sIdentity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> oPerson <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alert(arguments.callee.identity);'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  oPerson<span class=\"token punctuation\">.</span>identity <span class=\"token operator\">=</span> sIdentity<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> oPerson<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> john <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">john</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的函数 <code class=\"language-text\">oPerson</code> 是通过 <code class=\"language-text\">new Function</code> 创建的。在字符串内无法“得知”函数会被赋值的名称，因此只能通过 <code class=\"language-text\">arguments.callee</code> 去获取。在某些非常特殊的业务场景中，可能会有需求将某些表达式通过字符串进行存储，并通过 <code class=\"language-text\">new Function</code> 构建执行。这种时候，使用 <code class=\"language-text\">arguments.callee</code> 获取数据类似于传参。当然，如果只是传参的需求，其实可以写成：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> script <span class=\"token operator\">=</span> <span class=\"token string\">'alert(arg.identity)'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">identity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> closure <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'const arg = arguments[0];'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">return function () { </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>script<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">closure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> identity <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> john <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John Smith'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">john</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"arguments.callee","category":"JavaScript","date":"2019-12-01"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-12-01","title":"arguments.callee","previous":{"time":"2019-11-28","title":"Conflicting order in mini-css-extract-plugin"},"next":{"time":"2019-12-02","title":"7zip-bin in Alpine Docker"}}}}