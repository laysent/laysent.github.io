{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-09-08_cypress-reporter","result":{"data":{"markdownRemark":{"id":"3e1e3f9f-24b8-5288-b813-dd0ea2b1e2d4","html":"<p>Cypress 默认提供了 <code class=\"language-text\">spec</code> reporter，在 CLI 运行的时候，会将结果输出到 stdout 中。同时，如果使用编程的方法直接调用 <code class=\"language-text\">Cypress.run</code> API，会以 Promise 的方式将运行的结果返回，程序可以从运行结果中，将主要的运行数据给读取出来。然而，不论是哪一种方案，都不能非常直观的将运行结果展示出来。以下介绍如何在 Cypress 中引入 <a href=\"https://adamgruber.github.io/mochawesome/\">Mochawesome</a> reporter，用于生成直观的 HTML 报告。</p>\n<p>需要事先说明的是，虽然 Cypress 是建立在 Mocha 的基础上，且 Mochawesome 是 Mocha 中非常流行的报告生成方案，但是直接使用 Mochawesome 在 Cypress 中生成报表还是有问题的。主要的原因在于，Cypress 调整了测试的行为，自 3.0 版本开始，每一个测试用例（spec）都是单独运行的。因此，原生的 Mochawesome 无法直接生成一个包含所有测试用例的完整报告。为此，需要借助一些额外的工具。</p>\n<p>首先，在项目需要用到 <code class=\"language-text\">mocha</code> 和 <code class=\"language-text\">mochawesome</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> mocha mochawesome</code></pre></div>\n<p>另外需要两个额外的包，分别是 <code class=\"language-text\">mochawesome-merge</code> 和 <code class=\"language-text\">mochawesome-report-generator</code>。可以通过 yarn 或 npm 安装到工作目录中，也可以通过 npx 在需要的时候直接使用。这里，<code class=\"language-text\">mochawesome-merge</code> 将用于将所有的测试用例运行结果进行合并的，然后用 <code class=\"language-text\">mochawesome-report-generator</code> 包生成统一的完整报告。</p>\n<p>接下来，\b修改 <code class=\"language-text\">cypress.json</code> 配置文件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"reporter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mochawesome\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"reporterOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"reportDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cypress/results\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"overwrite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"html\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"json\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>配置完成，再运行 Cypress，会在 <code class=\"language-text\">cypress/results</code> 目录下生成一批 JSON 文件（如 <code class=\"language-text\">mochawesome.json</code>，<code class=\"language-text\">mochawesome_001.json</code>，……）。</p>\n<p>有了这批生成的 JSON 报告，就可以使用 <code class=\"language-text\">mochawesome-merge</code> 命令，将这些 JSON 文件打包成一个完整的 JSON 报告。CLI 命令如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx mochawesome-merge --reportDir cypress/results <span class=\"token operator\">></span> mochawesome.json</code></pre></div>\n<p>生成了完整的 JSON 文件之后，可以通过 <code class=\"language-text\">mochawesome-report-generator</code> 生成需要的 HTML 报告：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx mochawesome-report-generator mochawesome.json</code></pre></div>\n<p>当然，如果需要以编程的方式来执行上面的生成报告过程，可以参考下面的代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> cypress <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cypress'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> merge <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome-merge'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> generator <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mochawesome-report-generator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> cypress<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> report <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reportDir<span class=\"token punctuation\">:</span> <span class=\"token string\">'cypress/results'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> htmlReports <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> generator<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>report<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    reportFilename<span class=\"token punctuation\">:</span> <span class=\"token string\">'report.html'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// cdn 的命令可以在生成 HTML 报告的时候不额外生成 JavaScript/CSS 文件</span>\n    <span class=\"token comment\">// 这些静态文件会走 CDN (unpkg)</span>\n    <span class=\"token comment\">// 这样，只需要保存一个 HTML 文件就可以了，方便存储</span>\n    cdn<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// report 就是 HTML 报告文件生成的路径</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>report<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> htmlReports<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>更多的参数使用可以参考项目的源代码。</p>\n<p>需要注意的一点是，生成 Report 之前需要确认 <code class=\"language-text\">cypress/results</code> 目录是否是干净的空目录。如果目录中仍然包含上一次运行的结果，那么最终合并报告的时候，两次运行的结果会叠加在一起，最终导致报告中包含多次运行的内容。一般在 Docker 中运行的话不会有这个问题，但是在本地跑的时候需要注意清理工作。</p>","frontmatter":{"title":"cypress reporter","category":"Cypress","date":"2019-09-08"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-09-08","title":"cypress reporter","previous":{"time":"2019-09-06","title":"Copy out of Docker"},"next":{"time":"2019-09-09","title":"Cypress Upload File"}}}}