{"componentChunkName":"component---src-templates-til-js","path":"/til/2019-11-12_require-resolve","result":{"data":{"markdownRemark":{"id":"65cd384a-ec80-5942-bc9e-9ab8ad9814f5","html":"<p>Node.js 中的 <code class=\"language-text\">require</code> API 在加载 commonjs 模块的时候，会做两个事情：</p>\n<ol>\n<li>根据 Node.js 的算法，查找到对应的模块文件；</li>\n<li>加载查找到的模块文件并运行。</li>\n</ol>\n<p>这里，如果只是想执行第一步，但并不真的运行这个被找到的模块，可以使用 Node.js 提供的 <code class=\"language-text\">require.resolve</code> API。具体的调用示例如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> modulePath <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>modulePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上面代码中，<code class=\"language-text\">modulePath</code> 是一个完整的文件路径，指向的位置就是 <code class=\"language-text\">some-package</code> 这个模块的 entry 文件（定义在 package.json 的 <code class=\"language-text\">main</code> 中）。默认情况下，这个 <code class=\"language-text\">require.resolve</code> 的查找路径是和 <code class=\"language-text\">require</code> API 一致的：在查找的时候，会从当前文件的目录开始，逐级往上查找 <code class=\"language-text\">node_modules</code> 目录下是否有需要的库。</p>\n<p>举例来说，假设有下面这样一个目录结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">A.js\nnode_modules\n|- some-package\n   |- index.js\n|- other-package\n   |- index.js\nutils\n|- B.js\n   node_modules\n   |- some-package\n      |- index.js</code></pre></div>\n<p>且，假设 A.js 的代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./utils/B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A: '</span><span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A: '</span><span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'other-package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>B.js 的代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B: '</span><span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B: '</span><span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'other-package'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>那么，输出的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">B: utils/node_modules/some-package/index.js\nB: node_modules/other-package/index.js\nA: node_modules/some-package/index.js\nA: node_modules/other-package/index.js</code></pre></div>\n<p>但有的时候，只是希望可以使用 Node.js 的查找算法，但是查找的目录位置，并不一定是从当前文件所在的目录开始的。这种时候，就需要用到 <code class=\"language-text\">require.resolve</code> 的第二个参数了：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-package'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  paths<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'where-to-start-searching'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'other-possible-search-location'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里，<code class=\"language-text\">paths</code> 是一个数组，表示所有的搜索起始位置。Node.js 会依次以这些路径为起始点，查找各个层级往上的 node_modules 目录。一旦找到需要的库，就停止查找，否则就会一直往上直到根目录。到达根目录后，当前的查找就以失败告终。如果还有其他的查找路径，就会继续上面的操作，否则程序会抛出异常。</p>\n<p>第二个参数的一个实际应用场景如下：假设有一个 CLI 可以用于代理执行 Webpack 命令，这时候就需要首先通过 <code class=\"language-text\">require.resolve</code> 命令找出当前执行 CLI 命令的目录内，Webpack 库在什么位置。然后才可以用 <code class=\"language-text\">require</code> 命令去加载真正在项目中使用到的 Webpack 版本，而不是 CLI 内部可能依赖的一个 Webpack 版本。</p>\n<p>更多关于 <code class=\"language-text\">require.resolve</code> 命令的说明，可以参考官方的<a href=\"https://nodejs.org/api/modules.html#modules_require_resolve_request_options\">文档</a>。</p>","frontmatter":{"title":"Require Resolve","category":"Node.js","date":"2019-11-12"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"time":"2019-11-12","title":"Require Resolve","previous":{"time":"2019-11-11","title":"Nullish Coalescing"},"next":{"time":"2019-11-13","title":"Invisible Characters"}}}}