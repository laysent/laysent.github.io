{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/post/integrity-and-fetch/","webpackCompilationHash":"bda10dc66575c4b19d6c","result":{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"2313345e-e862-50c2-bcec-d802069b68aa","html":"<p>根据目前的 Subresrouce Integrity <a href=\"https://www.w3.org/TR/SRI/\">规格</a>，当前 <code class=\"language-text\">integrity</code> 只适用于 <code class=\"language-text\">HTMLLinkElement</code> 和 <code class=\"language-text\">HTMLScriptElement</code>。在其中的 Note 里，提到了未来支持其他所有资源类型的可能性：</p>\n<blockquote>\n<p>A future revision of this specification is likely to include integrity support for all possible subresources, i.e., a, audio, embed, iframe, img, link, object, script, source, track, and video elements.</p>\n</blockquote>\n<p>遗憾的是，目前在这方面还尚未有进展。</p>\n<p>虽然 HTML 原生并不支持其他资源类型的 <code class=\"language-text\">integrity</code> 检测，但是 <code class=\"language-text\">fetch</code> API 提供了 <code class=\"language-text\">integrity</code> 的支持，这使得动态加载资源文件的 <code class=\"language-text\">integrity</code> 检测成为了可能。</p>\n<section><h2>Fetch &#x26; Integrity</h2><p><code class=\"language-text\">fetch</code> 的 API 格式如下：</p><div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">Promise&lt;Response&gt; fetch(input[, init]);</code></pre></div><p>除了 input 作为第一参数之外，可以提供额外的初始化信息作为第二参数。而这个初始化的信息中，就包括了 <code class=\"language-text\">integrity</code> 属性。示例代码如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource url'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> integrity<span class=\"token punctuation\">:</span> <span class=\"token string\">'sha256-xxxx'</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'cors'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>这里，<code class=\"language-text\">integrity</code> 提供的格式，与 Subresource Integrity 在 HTML tag 中使用的格式是相同的，前半部分是具体安全散列算法的名称，后半部分是算法计算出的结果。</p><p>同时，需要注意到的是，除了 <code class=\"language-text\">integrity</code> 属性之外，对于跨域请求来说，<code class=\"language-text\">mode</code> 属性也是必须的。这是因为，对于跨域请求来说，如果需要浏览器去判断 <code class=\"language-text\">integrity</code> 是否是正确的，那么就需要浏览器去访问具体的资源内容。对于跨域请求来说，默认这种资源访问是不被允许的，因此需要显示得指定允许跨域资源访问。当然，这就需要第三方服务器明确允许资源访问。</p><p>更具体来说，integrity 的检查只能在 response type 是 <code class=\"language-text\">basic</code>，<code class=\"language-text\">cors</code> 或 <code class=\"language-text\">default</code> 的时候才能进行。其中，<code class=\"language-text\">basic</code> 是同域的情况，<code class=\"language-text\">cors</code> 是对方服务器允许跨域的情况，而 <code class=\"language-text\">default</code> 是 Service Worker 生成的合法 Response。除了这三种情况外，其他的情况下浏览器是不会做 integrity 检查的。</p><p>至此，如果请求资源与给定的 <code class=\"language-text\">integrity</code> 不符合，<code class=\"language-text\">fetch</code> 请求会报错，否则就可以拿到正确的 <code class=\"language-text\">Response</code>，<code class=\"language-text\">integrity</code> 检查完成。</p></section>\n<section><h2>后续处理</h2><p>然而，要真正的使用还需要额外的一步。到目前为止，如果请求的资源文件没有被篡改，那么 <code class=\"language-text\">fetch</code> 就会返回正确的 <code class=\"language-text\">Reponse</code>。然而，<code class=\"language-text\">Response</code> 并不是常见的资源引用的方式。最理想的情况，应该是输入一个 URL，通过 <code class=\"language-text\">fetch</code> 的 <code class=\"language-text\">integrity</code> 检查，最终依然输出一个可以直接使用的 URL 地址。</p><p>为此，就需要用到 <code class=\"language-text\">URL.createObjectURL</code> 了。</p><p><code class=\"language-text\">URL.createObjectURL</code> 方法会创建一个 URL 地址，用于指向指定的 <code class=\"language-text\">File</code> 或 <code class=\"language-text\">Blob</code> 资源文件。因此，只需要先通过 <code class=\"language-text\">fetch</code> 请求，然后将 <code class=\"language-text\">Response</code> 转化成 <code class=\"language-text\">Blob</code>，最后用 <code class=\"language-text\">URL.createObjectURL</code> 将 <code class=\"language-text\">Blob</code> 转化为 URL 地址就可以了。示例代码如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resource url'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> integrity<span class=\"token punctuation\">:</span> <span class=\"token string\">'sha256-xxxx'</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'cors'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">/* .then((url) => { img.src = url; }) */</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p><a href=\"https://laysent.github.io/subresource-integrity-demo/integrity-and-fetch.html\">在线演示</a></p></section>\n<section><h2>React Example</h2><div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getFetch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">src<span class=\"token punctuation\">,</span> integrity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> integrity<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">:</span> <span class=\"token string\">'cors'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">blob</span> <span class=\"token operator\">=></span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ImageComponent <span class=\"token operator\">=</span>\n  <span class=\"token comment\">/**\n   * 用 React.memo 避免不必要的重复网络请求\n   */</span>\n  React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> src<span class=\"token punctuation\">,</span> integrity<span class=\"token punctuation\">,</span> alt<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 用 React.lazy 和 React.Suspense 配合使用，\n     * 构造一个 loading &amp; display 的效果。\n     * 在 fetch 成功/失败之前，显示 loading 效果；\n     * 网络请求完成后再显示结果。\n     */</span>\n    <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getFetch</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> integrity<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n          <span class=\"token parameter\">url</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/**\n             * React.lazy 需要返回的值是 { default: React.Component } 格式\n             */</span>\n            <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>url<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>alt<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">props</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Error: </span><span class=\"token punctuation\">{</span>error<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>alt<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">rest</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Image</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> src<span class=\"token punctuation\">,</span> integrity<span class=\"token punctuation\">,</span> alt<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ImageComponent</span></span> <span class=\"token attr-name\">src</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>src<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">integrity</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>integrity<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">alt</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>alt<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">rest</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.Suspense</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></section>\n<section><h2>缺点</h2><p>以上这种方案，主要存在两个弊端：</p><ol>\n<li><code class=\"language-text\">fetch</code> 请求的优先级和 <code class=\"language-text\">img</code> 或其他资源是不同的，<code class=\"language-text\">fetch</code> 的优先级更低。</li>\n<li>针对 <code class=\"language-text\">fetch</code> 和其他 HTML 标签发起的请求，浏览器并不会共享缓存（<code class=\"language-text\">mode</code> 不同）。\n这意味着，如果 <code class=\"language-text\">fetch</code> 过后，<code class=\"language-text\">img</code> 再次请求，网络会重复发送，即使内容是一样的。</li>\n</ol></section>","frontmatter":{"title":"integrity & fetch","date":"2019-03-07","modified":"2019-03-30","description":"这篇文章主要介绍 fetch 中 integrity 字段的用法，以及如何用此功能给其他资源文件提供 integrity 的校验功能（如图片），附带 React 示例代码。"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/integrity-and-fetch/","previous":{"fields":{"slug":"/random-sampling/","type":"blog"},"frontmatter":{"title":"Random Sampling","category":"Algorithm","tags":"Algorithm, Math"}},"next":{"fields":{"slug":"/baseline-and-progressive-jpeg/","type":"blog"},"frontmatter":{"title":"Baseline & Progressive JPEG","category":"Web","tags":"Web, Graphics"}}}}}