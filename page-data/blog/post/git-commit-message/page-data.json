{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/post/git-commit-message/","webpackCompilationHash":"d0c1c456129354e33ddb","result":{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"7eed8961-8c6f-5cde-a8eb-43a720c350eb","html":"<p>一份好的 Git Commit，可以极大的帮助他人（包括几个月后的自己）理解代码改动。如果是团队工作，好的 Git Message 格式更可以统一形式，提高团队协作的效率。本文将从写好 Git Commit 的目的出发，探讨两个问题：什么样的 Git Message 才能被称作是好的？如何统一团队的 Git Message 形式？</p>\n<section><h2>什么样的 Git Commit 是合适的</h2><p>简单来说，Git Commit Message 应该是解释性的。通过阅读 Git Commit Message，应该可以了解到以下信息：</p><ol>\n<li>这是一个什么样的修改？例如，这是一个 Bug 修复，新功能还是文档修改？</li>\n<li>这个修改大概影响的范围是哪些？</li>\n<li>这个修改的目的是什么？</li>\n</ol><p>当一份解释性 Git Commit Message 包含足够的信息，那么就可以用于快速地搜索、定位改动。例如下面地命令可以查找出所有和聊天相关地新功能改动：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log HEAD --grep feat<span class=\"token punctuation\">(</span>chat<span class=\"token punctuation\">)</span></code></pre></div><p>同时，规范的 Git Commit Message 也让 Changelog 自动生成成为了可能。</p><p>一份<a href=\"https://www.conventionalcommits.org/zh/v1.0.0-beta.3/\">约定式提交</a>大概结构如下：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;类型&gt;[可选的作用域]: &lt;描述&gt;\n&lt;空行&gt;\n[可选的正文]\n&lt;空行&gt;\n[可选的脚注]</code></pre></div><p>其中，<code class=\"language-text\">类型</code>包含以下类别：</p><ul>\n<li><code class=\"language-text\">build</code>：针对编译系统或外部依赖的修改，例如修改了 <code class=\"language-text\">webpack</code> 或 <code class=\"language-text\">babel</code> 的配置，或是升级了某个 <code class=\"language-text\">npm</code> 库</li>\n<li><code class=\"language-text\">chore</code>：一些琐碎的改动，例如修改版本号或是修改 <code class=\"language-text\">.gitignore</code> 文件之类的</li>\n<li><code class=\"language-text\">ci</code>：针对 CI 系统配置的修改，例如修改了 <code class=\"language-text\">Travis</code> 或 <code class=\"language-text\">Circle</code> 的配置文件</li>\n<li><code class=\"language-text\">docs</code>：只针对文档的修改</li>\n<li><code class=\"language-text\">feat</code>：添加新的功能</li>\n<li><code class=\"language-text\">fix</code>：修复 Bug</li>\n<li><code class=\"language-text\">perf</code>：针对性能提升的优化</li>\n<li><code class=\"language-text\">refactor</code>：代码重构的改动，既没有修复 Bug 也没有添加新功能</li>\n<li><code class=\"language-text\">revert</code>：回滚之前的改动</li>\n<li><code class=\"language-text\">style</code>：仅仅是针对代码格式的改动，如修复一些 <code class=\"language-text\">ESLint</code> 的报错</li>\n<li><code class=\"language-text\">test</code>：针对测试的改动，如添加新的测试或是修复已有测试的问题</li>\n</ul><p><strong>可选作用域</strong>用于说明当前修改的影响范围。这里的描述一般根据项目不同，会有差异。选填，可以没有。</p><p><strong>描述</strong>用于简短的描述当前修改的主要内容，长度不超过 50 个字符。（见 <a href=\"https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting\">50/72 Formatting</a>）</p><p><strong>正文</strong>作为描述的补充，可以提供额外的信息。如果内容比较多，需要注意换行的问题。一般不建议 Commit Message 过长。例如，在 VSCode 中，一行 Commit Message 最长为 72 个字符。另外，从规范语言的角度来说，如果是英文 Commit Message，建议使用第一人称现在时，动词用原型即可。举例来说，写 <code class=\"language-text\">fix</code> 而不是 <code class=\"language-text\">fixes</code> 或者 <code class=\"language-text\">fixed</code>。</p><p><strong>脚注</strong>是描述的一些补充说明。主要有两种：</p><ol>\n<li>不兼容改动：如果内容包含了不兼容的改动，需要用 <code class=\"language-text\">BREAKING CHANGE</code> 开头，后面可以补充说明当前不兼容变更的细节、理由以及升级的方案。</li>\n<li>Issues：如果修改有对应的 Issue，那么可以带上相应的 ID，方便后续查找。以 <code class=\"language-text\">ISSUE</code> 开头，后面跟随一个或多个 Issue ID，如 <code class=\"language-text\">ISSUE #123 #456</code>。</li>\n</ol></section>\n<section><h2>团队如何规范</h2><p>Git 提供了 Commit Template 配置，可以在每次写 Git Commit Message 的时候显示，提醒 Git message 的书写格式规范。</p><p>为了配置 Git Commit Temlate，首先在个人目录下生成 <code class=\"language-text\">.gitmessage</code> 文件，参考内容如下：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># &lt;type&gt;[optional scope]: &lt;description&gt;\n# build/chore/ci/docs/feat/fix/perf/refactor/revert/style/test\n# |&lt;----  Using a Maximum Of 50 Characters  ----&gt;|\n\n# Optional body, explains why this change has been made\n# |&lt;----   Try To Limit Each Line to a Maximum Of 72 Characters   ----&gt;|\n\n\n# Optional footer\n# List related issue here and/or inform breaking change if any\n# Example:\n# ISSUE #xxx\n# BREAKING CHANGE: xxxx (what changed, why, how to upgrade)\n# |&lt;----   Try To Limit Each Line to a Maximum Of 72 Characters   ----&gt;|\n\n# --- COMMIT END ---\n# Type can be \n#    build    (change of build system or dependencies)\n#    chore    (other changes, such as version upgrade, etc.)\n#    ci       (change of CI system configuration)\n#    docs     (changes to documentation)\n#    feat     (new feature)\n#    fix      (bug fix)\n#    perf     (improve performance of code)\n#    refactor (refactoring production code)\n#    revert   (revert specific changes made before)\n#    style    (formatting, missing semi colons, etc; no code change)\n#    test     (adding or refactoring tests; no production code change)\n# --------------------</code></pre></div><p>接下来，配置个人目录下的 <code class=\"language-text\">.gitconfig</code> 文件，增加：</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[commit]\n  template = ~/.gitmessage</code></pre></div><p>这样，在新编写一个 Git Commit Message 的时候，就会看到相应的模版提示了。</p><p>然而，使用模版文件，有两个问题：一方面，处于安全方面的考虑，Git 的配置并不是共享的。在团队工作的过程中，上述模版文件并不能非常容易的传播给每一个潜在的代码贡献人。另一方面，模版文件并不是一个强制性的检查，只是一个建议。不满足要求的 Commit Message 依然有可能被签入。</p><p>为此，可以结合 Lint 工具来检查每一次签入的 Message；同时，使用 Hook 配置来保证团队成员在签入代码前，都可以得到相同配置的 Lint 检查。</p><p>对于 Lint 来说，可以使用 <a href=\"https://github.com/conventional-changelog/commitlint\">commitlint</a> 和 <a href=\"https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional\">@commitlint/config-conventional</a>。</p><p>安装</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev @commitlint/config-conventional @commitlint/cli</code></pre></div><p>增加 <code class=\"language-text\">commitlint.config.js</code>，内容如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">extends</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'@commitlint/config-conventional'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div><p>同时，对于团队来说，可以使用 Husky 来共享 Git Hook 的配置，从而达到共享 Lint 检查的目的。</p><p>安装</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev husky</code></pre></div><p>配置 <code class=\"language-text\">package.json</code></p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"husky\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"hooks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"commit-msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commitlint -E HUSKY_GIT_PARAMS\"</span>\n    <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>至此，Git Hook 就配置完成了。其他人在拿到代码并 <code class=\"language-text\">npm install</code> 之后，便会有 Husky 安装好必要的 Hook。之后，每一次的提交，commitlint 都会在本地做文本检测。</p><p>当然，最好可以在 CI 系统中也做一次配置，在真正意义上保证最终签入文字是符合规范的，杜绝前端绕过检测的可能性。</p></section>","frontmatter":{"title":"Git Commit Message","date":"2019-03-24","modified":"2019-08-05","description":"介绍 Git Commit Message 规范与实践"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/git-commit-message/","previous":{"fields":{"slug":"/html5-and-furigana/","type":"blog"},"frontmatter":{"title":"Html5 的旁注标记","category":"Web","tags":"Web"}},"next":{"fields":{"slug":"/subresource-integrity-and-error-handling/","type":"blog"},"frontmatter":{"title":"Subresource Integrity 出错时的处理方案","category":"Web","tags":"Web, JavaScript"}}}}}