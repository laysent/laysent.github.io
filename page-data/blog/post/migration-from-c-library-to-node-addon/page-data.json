{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/post/migration-from-c-library-to-node-addon/","webpackCompilationHash":"687e338135c47159cd63","result":{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"2c3ac8bb-f123-5ac5-bdc6-13755b8d417a","html":"<p>本文主要介绍将 Skype 开源的 SILK v3 解码器从 C 语言库移植到 Node.js 环境的流程，主要用到了 node-gyp 以及 Node.js 提供的 N-API。移植后的包可以在<a href=\"https://www.npmjs.com/package/silk-sdk\">这里</a>找到 ，同时在 <a href=\"https://github.com/laysent/silk-sdk\">GitHub</a> 开源了代码。</p>\n<section><h2>目的</h2><p>原 C 语言库的目录如下</p><ul>\n<li>api：存放了开放接口的三个对应文件，分别是 encode，decode 和 compare</li>\n<li>doc：文档</li>\n<li>interface：SDK 公开的 API 对应头文件存放位置</li>\n<li>src：SDK 代码的存放位置</li>\n</ul><p>这次主要需要做的，就是将 <code class=\"language-text\">api</code> 目录（在原库中，为 <code class=\"language-text\">test</code> 目录）下的三个 CLI 功能以 C/C++ 插件的形式，提供给 Node.js 直接调用。</p></section>\n<section><h2>创建项目</h2><p>在 <code class=\"language-text\">package.json</code> 中，需要配置 gypfile 并设置为 <code class=\"language-text\">true</code>，以指明程序去寻找 <code class=\"language-text\">binding.gyp</code> 文件。scripts 中的 install 命令，会在 npm 包安装完之后进行，用于将源文件编译成平台相关的二进制包，用于后续的使用。具体如下：</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"gypfile\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"install\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node-gyp rebuild\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>另外，需要创建 <code class=\"language-text\">binding.gyp</code> 文件，内容配置如下：</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"target_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编译结果的名字\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"所有用到的源文件\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"include_dirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"所有头文件所在的目录\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>以 SILK SDK 为例，target_name 设置为 silk，这样最终编译出来的结果就是 <code class=\"language-text\">silk.node</code> 文件；sources 中需要把所有用到的 <code class=\"language-text\">.c</code> 文件都列举出来，在本例中就是 <code class=\"language-text\">api</code> 和 <code class=\"language-text\">src</code> 文件夹下的所有 <code class=\"language-text\">.c</code> 文件；include_dirs 指明了项目需要去哪里找头文件，在本例中就是 <code class=\"language-text\">interface</code> 和 <code class=\"language-text\">src</code> 两个目录。最终的结果可以查看<a href=\"https://github.com/laysent/silk-sdk/blob/master/binding.gyp\">这里</a>。</p><p>至此，node-gyp 已经可以正确编译了。运行如下代码可以查看编译是否成功</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run <span class=\"token function\">install</span></code></pre></div><p>或者</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node-gyp clean configure build</code></pre></div><p>然而，此时虽然编译可以成功，但是由于没有公开任何接口，引用编译结果还什么都不能做。</p></section>\n<section><h2>公开接口</h2><p>对于 JavaScript 的代码来说，可以使用 <code class=\"language-text\">module.exports = xxx</code> 将接口公开；对于 C/C++ 的插件来说，也有类似的处理方法。参考的代码如下：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;node_api.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n\n<span class=\"token comment\">/**\n * 这里定义一个宏，方便函数方法的导出\n */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DECLARE_NAPI_METHOD(name, func)                          \\\n  { name, 0, func, 0, 0, 0, napi_default, 0 }</span>\n\n<span class=\"token comment\">/**\n * 这里定义了一个导出方法的入口函数\n * @param {napi_value} env - 这个是 N-API 方法调用需要用到的上下文数据\n * @param {napi_callback_info} info - 可以用此拿到函数调用参数的具体信息\n * @returns {napi_value} - 函数的返回值，在 JavaScript 中可以直接使用\n */</span>\nnapi_value <span class=\"token function\">Decode_Entry</span><span class=\"token punctuation\">(</span>napi_env env<span class=\"token punctuation\">,</span> napi_callback_info info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 初始化函数，主要用于注册开放的接口\n * @param {napi_value} env - 这个是 N-API 方法调用需要用到的上下文数据\n * @param {napi_value} exports - 这个等价于 JavaScript 模块中用到的 `module.exports` 对象\n * @param {napi_value} 将 `module.exports` 对象返回\n */</span>\nnapi_value <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>napi_env env<span class=\"token punctuation\">,</span> napi_value exports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  napi_status status<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 这里定义 `module.exports` 的具体属性值。\n   * 在这个例子中，\"decode\" 是 JavaScript 中实际能用到的接口名字，\n   * 而 Decode_Entry 是 C 中对应的函数名。\n   * 在实际使用的时候，`require('silk-sdk').decode()` 可以调用这个导出的接口。\n   */</span>\n  napi_property_descriptor desc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">DECLARE_NAPI_METHOD</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decode\"</span><span class=\"token punctuation\">,</span> Decode_Entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/**\n   * 将这些属性值赋值到 `exports` 中\n   * 如果赋值成功，函数返回 napi_ok\n   */</span>\n  status <span class=\"token operator\">=</span> <span class=\"token function\">napi_define_properties</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token comment\">/* 总共定义的属性数量 */</span><span class=\"token punctuation\">,</span> desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> exports<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/** 模块注册 */</span>\n<span class=\"token function\">NAPI_MODULE</span><span class=\"token punctuation\">(</span>NODE_GYP_MODULE_NAME<span class=\"token punctuation\">,</span> Init<span class=\"token punctuation\">)</span></code></pre></div><p>至此，公开接口已经注册成功了。编译完成之后，模块将导出一个 <code class=\"language-text\">decode</code> 接口，可以使用如下的 JavaScript 代码来直接调用：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> silk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sdk-silk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsilk<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><section><h3>读取参数</h3><p>以下的代码，可以从给定的 <code class=\"language-text\">napi_callback_info</code> 中提取出参数列表：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t argc<span class=\"token punctuation\">;</span>\nnapi_value args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里假定最多两个参数</span>\n\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">napi_get_cb_info</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>argc<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>其中的 <code class=\"language-text\">args</code> 数组，每一个对应 JavaScript 调用函数时给定的一个参数，而 <code class=\"language-text\">argc</code> 中记录了参数的总数量。使用 <code class=\"language-text\">argc</code> 的数据，可以在给定参数数量不足的时候，抛出异常，参考代码如下：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  status <span class=\"token operator\">=</span> <span class=\"token function\">napi_throw_error</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Wrong number of arguments.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>需要注意的是，从 <code class=\"language-text\">napi_get_cb_info</code> 获取到的结果，都是 <code class=\"language-text\">napi_value</code> 类型的。这里，一般需要转化为 C 中一般使用的类型，以提供给已有的 C 语言库来进行后续的调用。</p><section><h4>值参数转化</h4><p>对于一般的非对象参数，转化的方法比较简单。这里以 Buffer 类型为例：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">napi_status status<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">;</span>\nsize_t bufferLength<span class=\"token punctuation\">;</span>\n\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">napi_get_buffer_info</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bufferLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div><p>以上代码，将第一个参数的数据，从 <code class=\"language-text\">napi_value</code> 转化为 <code class=\"language-text\">void*</code> 类型。其中，Buffer 的头指针存储在 <code class=\"language-text\">buffer</code> 中，Buffer 的总长度存储在 <code class=\"language-text\">bufferLength</code> 变量里。</p><p>其他的值参数转化，可以参考<a href=\"https://nodejs.org/api/n-api.html#n_api_functions_to_convert_from_n_api_to_c_types\">官方的 API 文档</a>。</p></section><section><h4>对象参数</h4><p>从对象参数中提取出具体的属性值，可以参考如下代码：</p><div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 定义变量 */</span>\nnapi_status status<span class=\"token punctuation\">;</span>\nnapi_value key<span class=\"token punctuation\">;</span>\nnapi_value value<span class=\"token punctuation\">;</span>\nbool hasPropert <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\nbool quiet <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 提供一个默认的值</span>\n\n<span class=\"token comment\">/* 获取属性名赋 */</span>\n<span class=\"gatsby-highlight-code-line\">status <span class=\"token operator\">=</span> <span class=\"token function\">napi_create_string_utf8</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token string\">\"quiet\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"quiet\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 检查对象中是否有该属性定义 */</span>\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">napi_has_property</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hasProperty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 读取属性值 */</span>\n  status <span class=\"token operator\">=</span> <span class=\"token function\">napi_get_property</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 将属性值转化为基础类型 */</span>\n  status <span class=\"token operator\">=</span> <span class=\"token function\">napi_get_value_bool</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quiet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里需要注意的是，<code class=\"language-text\">napi_has_property</code> 与 <code class=\"language-text\">napi_get_property</code> 都不直接接受字符串作为属性名，需要现将属性名转化为 <code class=\"language-text\">napi_value</code> 类型之后才可以使用（参考上述代码的高亮标注行）。直接使用字符串作为属性名参数的话，程序会出错。</p></section></section><section><h3>返回结果</h3><p>与获取参数类似，C 中的基础类型也不能直接作为返回值，需要使用 N-API 提供的接口进行转化。下面展示如何将布尔值转化会 JavaScript 中可以识别的布尔值：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool result <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 待转化的布尔值</span>\nnapi_value ret<span class=\"token punctuation\">;</span>\n\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">napi_get_boolean</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></code></pre></div><p>类似的，下面展示如何将一段数组转化为 JavaScript 中可以识别的 Buffer：</p><div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t size <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组的长度</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>output<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 待转化的数组</span>\n\nnapi_status status<span class=\"token punctuation\">;</span>\nnapi_value result<span class=\"token punctuation\">;</span>\n\nstatus <span class=\"token operator\">=</span> <span class=\"token function\">napi_create_buffer_copy</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token comment\">/* 复制后的头指针 */</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> napi_ok<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></code></pre></div></section></section>\n<section><h2>JavaScript 层的封装</h2><p>在完成了 C 插件部分的代码之后，还需要用 JavaScript 对代码做一层封装。这里主要是出于两个方面的考虑：</p><ol>\n<li>从上述代码不难看出，使用 N-API 去做 JavaScript 和 C 之间的变量转化是相对繁琐的。为了给 npm 包提供更丰富的 API，可以将参数的转化、判断部分交给 JavaScript 来做，将处理后的结果移交给 C 来处理。这样，C 部分就不需要提供多态的 API 了，代码更简单。</li>\n<li>node-gyp 的编译结果，在不同的平台/编译配置下，可能会被放到不同的位置。一般会使用 <code class=\"language-text\">bindings</code> 这个 npm 库来间接引用。</li>\n</ol><p>参考代码如下：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* 使用 bindings 正确的引用二进制结果 */</span>\n<span class=\"token keyword\">const</span> silk <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bindings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'silk.node'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*\n   * silk.decode 是 C 插件提供的接口，\n   * 这里可以针对参数/返回值做一些额外的处理\n   */</span>\n  <span class=\"token keyword\">return</span> silk<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 导出封装后的接口 */</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> decode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div><p>最后，需要在 <code class=\"language-text\">package.json</code> 中指明这个文件作为调用的入口文件即可：</p><div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div></section>","frontmatter":{"title":"使用 N-API 移植现有 C 语言库","date":"2019-01-19","modified":"2019-03-11","description":"如何使用 N-API 与 node-gyp，将一个现有的 C 语言库移植为 Node.js 可直接运行的 C/C++ 插件"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/migration-from-c-library-to-node-addon/","previous":{"fields":{"slug":"/subresource-integrity/","type":"blog"},"frontmatter":{"title":"Subresource Integrity","category":"Web","tags":"Web, JavaScript"}},"next":{"fields":{"slug":"/android-app-reverse-engineering-tutorial/","type":"blog"},"frontmatter":{"title":"Android App 逆向工程初探","category":"Android","tags":"Android, Reverse Engineering"}}}}}