{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/post/android-app-reverse-engineering-tutorial/","webpackCompilationHash":"687e338135c47159cd63","result":{"data":{"site":{"siteMetadata":{"blogTitle":"LaySent's Blog","author":"LaySent"}},"markdownRemark":{"id":"2265d1fd-12fd-5225-951f-36fec61df606","html":"<section><h2>背景</h2><p>这次研究的出发点，是希望可以了解某服务提供商 API 的调用规则，从而可以写一个定制化的服务为个人所用。</p><p>通过前期的研究，发现这里的网络请求主要是通过一个 signature 参数对请求的有效性进行验证。如果参数重的 signature 的值不正确，服务器将拒绝返回任何数据。由于网络请求本身对外是透明的，服务提供方为了防止 API 被第三方滥用，往往需要使用各种方法来校验有效性。这个 App 可以在免注册的情况下直接使用，故而一般的账户校验无法进行。这里 signature 是如何计算出来的，服务器又是如何通过校验确认合法性的，是本次研究主要好奇的地方。</p><p>本文主要是一些技术尝试的记录，下文中将不提及具体的 App 名称，以免造成不必要的麻烦。</p></section>\n<section><h2>前期准备</h2><p>Android 逆向主要需要用到以下一些工具</p><ul>\n<li>apktool: <a href=\"https://github.com/iBotPeaches/Apktool\">GitHub</a>，<a href=\"https://bitbucket.org/iBotPeaches/apktool/downloads/\">下载地址</a>，可以将 .apk 文件解码</li>\n<li>smali: <a href=\"https://github.com/JesusFreke/smali\">GitHub</a>，<a href=\"https://bitbucket.org/JesusFreke/smali/downloads/\">下载地址</a>，可以将 .smali 文件打包成 .dex 文件</li>\n<li>ByteCode-Viewer: <a href=\"https://github.com/Konloch/bytecode-viewer/\">GitHub</a>，<a href=\"https://github.com/Konloch/bytecode-viewer/releases\">下载地址</a>，可以直接阅读 .dex 文件中的 Java 代码</li>\n</ul><p>当然，还需要 Android App 的 .apk 安装文件。这个可以从各大 Android App 平台下载到，或者也可以从各 App 的官网找到对应 .apk 的下载地址。</p></section>\n<section><h2>分析步骤</h2><section><h3>apk => smali</h3><p>首先，需要使用 apktool 对拿到的 .apk 文件进行解码：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./apktool d xxx.apk -o xxx</code></pre></div><p>上述命令，将 xxx.apk 文件反编译到 xxx 文件夹内。通过观察解码的结果可以发现，资源文件、配置文件以及代码都被解码出来了。其中，代码部分并不是 java 源码，而是 smali 格式的文件。</p><blockquote>\n<p>在执行 Android Java 层的代码时，其实就是 Dalvik(ART) 虚拟机（使用 C 或 C++ 代码实现）在解析 Dalvik 字节码，从而模拟程序的执行过程。</p>\n<p>自然，Dalvik 字节码晦涩难懂，研究人员们给出了 Dalvik 字节码的一种助记方式：smali 语法。通过一些工具（如 apktool），我们可以把已有的 dex 文件转化为若干个 smali 文件（一般而言，一个 smali 文件对应着一个类），然后进行阅读。对于不同的工具来说，其转换后的 smali 代码一般都不一样，毕竟这个语法不是官方的标准。这里我们介绍比较通用的语法。值得注意的是，在 smali 语法中，使用的都是寄存器，但是其在解释执行的时候，很多都会映射到栈中。</p>\n<p><a href=\"https://ctf-wiki.github.io/ctf-wiki/android/basic_operating_mechanism/java_layer/smali/smali/\">来源</a></p>\n</blockquote><p>有了 smali 文件之后，其实已经可以开始初步的代码阅读了。</p></section><section><h3>smali => dex</h3><p>在 smali 语言不熟悉的情况下，可以借助 smali 工具将文件转化为 dex 文件，并通过 ByteCode-Viewer 来阅读 Java 的代码。具体操作如下：</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">java -jar ./smali-2.2.5.jar a xxx.smali yyy.smali zzz.smali</code></pre></div><p>这里，可以一次性将一批 smali 文件打包为一个 out.dex 文件。编译出这个结果之后，可以通过 ByteCode-Viewer 打开直接阅读 Java 源码。如果 Android App 的打包包含了混淆，那么最终这里生成的代码结果，函数/变量名很可能是难以读懂的 a、b、c，编译的结果可能有一些错误。总体而言，可以将这个结果和 smali 本身的结果配合使用，方便了解代码的本意。</p></section></section>\n<section><h2>具体分析</h2><p>逆向的分析，可以从非代码层面开始着手。</p><p>以这个 App 为例，通过使用 anyproxy 代理网络请求，可以抓取到具体使用的网络请求 API 地址。通过观察发现，不管是什么样的 API 请求，在 URL 的查询参数中，都有几个固定的参数，一个是 timestamp，一个是 signature。通过修改 URL 查询参数的数据不难发现，无论修改参数中的哪个值，都会导致请求直接失败。由此，不难得出初步的结论，signature 的值是通过 URL 查询参数中的其他值计算出来的，并且由于存在 timestamp 这个参数，导致这个计算结果无法缓存。如果不能找到 signature 的具体计算方法，就无法成功模拟调用 API 成功。</p><p>同时，下面列出了几个抓取到的 signature 的值：</p><ul>\n<li>QeVgI1CAbvkwCR9jdrioSz6BGbZg1tcaXWvokGk6OkU%3D</li>\n<li>45k4t1vIzqf%2F5MiERLO4M3WKzl27pT2iXRfgpwohUiA%3D</li>\n</ul><p>不难看出，这里的 %2F 以及 %3D 是 URL 编码后的结果。而编码前的值，很可能是 sha256 加密后的结果（因为和 Subresource Integrity 的结果形似，SRI 相关的介绍可以看<a href=\"https://laysent.github.io/blog/subresource-integrity/\">这里</a>）。</p><p>有了以上的初步分析结果，就可以开始正式的代码分析了。一般来说，Android App 由于 apk 很容易获取到，所以发布之前都会经过代码的混淆操作。这里分析的 App 也不例外。如果直接查看 smali 的解码结果，不难发现很多 a、b、c 之类的函数/变量名，很难直观的了解具体到底函数/类是在进行什么样的操作。然而，从前端的经验来说，虽然函数名/变量名很容易进行混淆，但是字符串本身却很少会进行混淆的操作。有了上面关于 URL 参数的分析，可以很容易想到，先通过搜索对应的 URL 参数字符串，找到相关的代码，然后再对具体的内容进行分析。</p><p>在抓取到的 URL 参数中，可以发现不少固定的参数，比如上文提到的 signature，timestamp，还有 uuid、appSource 等值。既然猜测 signature 的计算需要用到其他的 URL 参数，那么不妨试着在 smali 代码中搜索 signature 字符串，并找到同时使用到 uuid 或者 appSource 或者 timestamp 的位置。</p><p>很快，通过交叉对比，就有两个文件脱颖而出，分别是：</p><ul>\n<li>smali_classes2/com/xxx/yyy/net/a.smali</li>\n<li>smali_classes2/com/xxx/yyy/net/retrofit/b/a.smali</li>\n</ul><p>其中，这里的 retrofit 是 Java 中使用到的一个 HTTP 请求库。同时，从文件路径的 net 不难猜测，这两个文件都是和网络请求相关的，很可能和具体计算 signature 的逻辑相关。</p><p>来看其中的第一个文件。</p><p>由于 smali 的代码比较冗长，这里给出经过 smali 工具解析后的 Java 代码：</p><div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uuid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uuid\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"access_id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ptapp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 这里的 timestamp 就是一个 ms 计算的时间，和 JavaScript 中的 Date.now() 值相同\n     */</span>\n    <span class=\"token class-name\">StringBuilder</span> localStringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    localStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    localStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timestamp\"</span><span class=\"token punctuation\">,</span> localStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"city\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * 从实际的使用上来看，URL 中的 token 并没有提供具体的值，可以猜测这个函数会提供一个 token 值，\n     * 而第二个参数的空字符串就是当 token 未找到情况下（即未登录）的默认值\n     */</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">,</span> ac<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user_token\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appSource\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"appSource\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BaseApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"platform\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Android\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 不难发现，这里的 k.b(k.a(\"POST\", paramMap)) 就是计算 signature 的具体过程，\n   */</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span> paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"signature\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"signature\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>通过查找 smali 对应的代码，不难发现，这里的 <code class=\"language-text\">String str = k.b(k.a(&quot;POST&quot;, paramMap));</code> 对应的代码为：</p><div class=\"gatsby-highlight\" data-language=\"smali\"><pre class=\"language-smali\"><code class=\"language-smali\">:cond_6\nconst-string v0, &quot;POST&quot;\n\n.line 48\ninvoke-static {v0, p0}, Lcom/xxx/yyy/utils/k;-&gt;a(Ljava/lang/String;Ljava/util/Map;)Ljava/lang/String;\n\nmove-result-object v0\n\n.line 49\ninvoke-static {v0}, Lcom/xxx/yyy/utils/k;-&gt;b(Ljava/lang/String;)Ljava/lang/String;\n\nmove-result-object v0</code></pre></div><p>也即使说，分别对应的是 xxx/yyy/utils/k.smali 类中定义的 a 和 b 两个静态方法。</p><p>现在来查看 xxx/yyy/utils/k.smali 中的文件，同样出于长度的考虑，这里给出经过工具解析的 Java 代码：</p><div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * 这个函数的工作非常明显，就是讲字符串进行 URL 编码\n * 编码的效果基本等同于 encodeURLComponent，不同在于后面的那几个字符的替换\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramString<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>paramString <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">URLEncoder</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"+\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%20\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%2A\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%7E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnsupportedEncodingException</span> localUnsupportedEncodingException<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      localUnsupportedEncodingException<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> paramString<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * 这个函数的作用，就是将 paramMap 这个函数中的值，拼接成一个字符串\n * 拼接的结果是 `${paramString}&amp;%2F&amp;${key1}%3D${value1}%26${key2}%3D${value2}`\n * 当然，这里的 key 和 value 都是经过了上面函数进行 URL 编码的\n * 具体的代码如下\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramString<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span> keySet <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 按 key 进行排序</span>\n  <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>keySet<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 拼接字符串</span>\n  <span class=\"token class-name\">StringBuilder</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不编码的 &amp;</span>\n  <span class=\"token comment\">// 这里的 a 函数，就是上面的那个静态方法，是同一个函数的不同重载</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不编码的 &amp;</span>\n  <span class=\"token class-name\">StringBuilder</span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    params<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    params<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    params<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    params<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">/**\n   * 这里的 subString(1) 主要是去掉了开头的 &amp;\n   * 也就是说，这里的前两个 &amp; 是部编码的\n   * 但是之后的每一 key/value 对连接处用到的 &amp; 都是编码成 %2F 了，同样 = 也编码成了 %3D\n   */</span>\n  result<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * 这里是加密的函数，使用 HmacSHA256 进行加密\n * 用到了一个密钥，密钥的主体部分通过 a.b().s() 获取\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> paramString<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里获取到了加密使用的密钥</span>\n  <span class=\"token class-name\">StringBuilder</span> keyBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  keyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  keyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> keyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Mac</span> localMac <span class=\"token operator\">=</span> <span class=\"token class-name\">Mac</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HmacSHA256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    localMac<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretKeySpec</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HmacSHA256\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">Base64</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeBase64</span><span class=\"token punctuation\">(</span>localMac<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>paramString<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> localException<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    localException<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> paramString<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里，主要需要知道的，就是静态方法 b 中的 <code class=\"language-text\">a.b().s()</code> 函数究竟是返回了什么样的密钥。有了这个密钥之后，就可以根据 URL 来计算出正确的 signature 了。这里，<code class=\"language-text\">a.b()</code> 对应的 smali 代码为：</p><div class=\"gatsby-highlight\" data-language=\"smali\"><pre class=\"language-smali\"><code class=\"language-smali\">.method public static b()Lcom/xxx/yyy/manager/a;\n    .locals 1\n\n    .line 91\n    invoke-static {}, Lcom/xxx/yyy/manager/a$a;-&gt;a()Lcom/xxx/yyy/manager/a;\n\n    move-result-object v0\n\n    return-object v0\n.end method</code></pre></div><p>而 <code class=\"language-text\">a$a.a()</code> 对应的 smali 代码为：</p><div class=\"gatsby-highlight\" data-language=\"smali\"><pre class=\"language-smali\"><code class=\"language-smali\">.field private static final a:Lcom/xxx/yyy/manager/a;\n.method static synthetic a()Lcom/xxx/yyy/manager/a;\n    .locals 1\n\n    .line 94\n    sget-object v0, Lcom/xxx/yyy/manager/a$a;-&gt;a:Lcom/xxx/yyy/manager/a;\n\n    return-object v0\n.end method</code></pre></div><p>不难看出，最开始 <code class=\"language-text\">a.b()</code> 的代码，其实就是一个 Singleton 返回了一个 <code class=\"language-text\">a</code> 类型的对象而已。那么 <code class=\"language-text\">a.b().s()</code> 代码，就只需要找到 <code class=\"language-text\">a</code> 类型的 <code class=\"language-text\">s</code> 方法就可以了，在 <code class=\"language-text\">a.smali</code> 中，可以找到代码如下：</p><div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"smali\"><pre class=\"language-smali\"><code class=\"language-smali\">.method public s()Ljava/lang/String;\n    .locals 1\n\n    .line 219\n    iget-object v0, p0, Lcom/xxx/yyy/manager/a;-&gt;b:Lcom/xxx/yyy/b/i;\n\n    invoke-interface {v0}, Lcom/xxx/yyy/b/i;-&gt;k()Ljava/lang/String;\n\n    move-result-object v0\n\n    return-object v0\n.end method</code></pre></div><p>可以等价写成 Java 代码：</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">k</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div><p>这里，可以去 <code class=\"language-text\">a</code> 的构造函数中去寻找 <code class=\"language-text\">this.b</code> 的具体定义方式。同时，从 smali 中也不难知道，这里的 <code class=\"language-text\">this.b</code> 是一个定义在 <code class=\"language-text\">com/xxx/yyy/b/i.smali</code> 中的类对象。直接去该文件中看，不难发现这个 <code class=\"language-text\">i</code> 定义为 <code class=\"language-text\">.class public interface abstract Lcom/xxx/yyy/b/i;</code>。那么，既然是一个 interface，接下来只要搜索哪些类实现了这个 interface 就可以了。搜索 <code class=\"language-text\">.implements Lcom/xxx/yyy/b/i;</code> 不难发现，实现的类，主要就是同目录下的 <code class=\"language-text\">a.smali</code>，<code class=\"language-text\">e.smali</code> 和 <code class=\"language-text\">j.smali</code>。在任意一个具体实现的类中，都可以找到这个 <code class=\"language-text\">k</code> 方法的实现。</p><div class=\"gatsby-highlight\" data-language=\"smali\"><pre class=\"language-smali\"><code class=\"language-smali\">.method public k()Ljava/lang/String;\n    .locals 1\n\n    const-string v0, &quot;xxx&quot;\n\n    return-object v0\n.end method</code></pre></div><p>这里的 xxx 就是具体的密钥值。</p><p>当然，上面如果直接从 <code class=\"language-text\">a</code> 的构造函数中去寻找 <code class=\"language-text\">this.b</code>，也同样指向到了同目录下的 <code class=\"language-text\">g.smali</code>，<code class=\"language-text\">c.smali</code> 等文件，这些分别是上面 <code class=\"language-text\">a.smali</code>，<code class=\"language-text\">e.smali</code> 和 <code class=\"language-text\">j.smali</code> 的子类。具体 <code class=\"language-text\">k</code> 方法的定义，依然在这三个父类中。</p><p>至此，整个 signature 的计算过程基本明朗了。</p><p>然而，这只是第一个文件的解析结果。对于第二个出现 signature 字符串的文件，也可以用类似的思路进行分析。最后发现，真正加密的部分，依然落到了上面提到的那个加密函数中，连拼接字符串的部分也是一样的。唯一不同的是，提供的第一个参数不再是 POST，而是一个函数调用后的结果。这里猜测具体的函数返回结果，就是当前 HTTP 请求的类型，不是 GET 就是 POST。经过测试，也确实如此。故，这部分分析就省略了。</p></section>\n<section><h2>结果</h2><p>根据以上的分析结果，可以把这部分对应的 Java 代码用 JavaScript 再写一遍：</p><div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\+/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%20'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/\\*/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'%2A'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/%7E/g</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getStringForEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  parsed<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> ending <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 去掉抓取 URL 中自带的 signature 值</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'signature'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> parsed<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    acc <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token string\">`&amp;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>ending<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> hmac <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHmac</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sha256'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> hmac<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'代理抓取到的 URL 请求地址'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 这里将输出计算后的 signature 值，可以和抓取到的值比较验证</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'signature: '</span><span class=\"token punctuation\">,</span> <span class=\"token function\">encrypt</span><span class=\"token punctuation\">(</span><span class=\"token function\">getStringForEncrypt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div></section>\n<section><h2>总结</h2><p>总体来说，带着具体的目的去逆向 Android App 并不会特别的困难。中间考虑的太复杂，反而饶了一些弯路。实践下来，从字符串进行切入之后，广度优先遍历搜索会比深度优先遍历搜索来得更有效果一些。深度优先的阅读顺序，容易陷入到代码的细节中，考虑太多调用/被调用方的具体逻辑。广度优先的阅读策略，更容易把握全局的思路，找到真正的突破口。</p><p>最后，逆向是一个非常考验耐心的工程。随时记录已经阅读过/思考过的部分，有助于提高效率。</p></section>","frontmatter":{"title":"Android App 逆向工程初探","date":"2019-01-20","modified":"2019-03-11","description":"这篇文章主要讲关于如何逆向某 Android 程序，并找到网络请求中 querstring 里 signature 计算方法的过程"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/android-app-reverse-engineering-tutorial/","previous":{"fields":{"slug":"/migration-from-c-library-to-node-addon/","type":"blog"},"frontmatter":{"title":"使用 N-API 移植现有 C 语言库","category":"Node.js","tags":"Node.js, JavaScript"}},"next":{"fields":{"slug":"/random-sampling/","type":"blog"},"frontmatter":{"title":"Random Sampling","category":"Algorithm","tags":"Algorithm, Math"}}}}}